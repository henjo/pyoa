
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInstTermAttrTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaInstTermAttrTypeEnum_Convert(PyObject* ob,PyParamoaInstTermAttrTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacNameInstTermAttrType")==0) { result->SetData(oacNameInstTermAttrType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaInstTermAttrTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInstTermAttrTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaInstTermAttrTypeEnum_FromoaInstTermAttrTypeEnum(oaInstTermAttrTypeEnum ob)
{
    if (ob==oacNameInstTermAttrType) return PyString_FromString("oacNameInstTermAttrType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaInstTermAttrTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaInstTermAttrTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaInstTermAttrTypeEnum_FromoaInstTermAttrTypeEnum(oaInstTermAttrTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaInstTermAttrTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaInstTermAttrTypeEnum_doc[] =
"Type convert function for enum: oaInstTermAttrTypeEnum";
                               
static PyMethodDef PyoaInstTermAttrTypeEnum_method =
  {"oaInstTermAttrTypeEnum",(PyCFunction)PyoaInstTermAttrTypeEnum_TypeFunction,METH_VARARGS,oaInstTermAttrTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaInstTermAttrTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacNameInstTermAttrType");
    PyDict_SetItemString(mod_dict,"oacNameInstTermAttrType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaInstTermAttrTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaInstTermAttrTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaInstTermAttrTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInstTermModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaInstTermModTypeEnum_Convert(PyObject* ob,PyParamoaInstTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacAddToNetInstTermModType")==0) { result->SetData(oacAddToNetInstTermModType); return 1;}
        if (strcasecmp(str,"oacRemoveFromNetInstTermModType")==0) { result->SetData(oacRemoveFromNetInstTermModType); return 1;}
        if (strcasecmp(str,"oacSetRouteMethodInstTermModType")==0) { result->SetData(oacSetRouteMethodInstTermModType); return 1;}
        if (strcasecmp(str,"oacSetImplicitInstTermModType")==0) { result->SetData(oacSetImplicitInstTermModType); return 1;}
        if (strcasecmp(str,"oacScalarizeInstTermModType")==0) { result->SetData(oacScalarizeInstTermModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaInstTermModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInstTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(oaInstTermModTypeEnum ob)
{
    if (ob==oacAddToNetInstTermModType) return PyString_FromString("oacAddToNetInstTermModType");
    if (ob==oacRemoveFromNetInstTermModType) return PyString_FromString("oacRemoveFromNetInstTermModType");
    if (ob==oacSetRouteMethodInstTermModType) return PyString_FromString("oacSetRouteMethodInstTermModType");
    if (ob==oacSetImplicitInstTermModType) return PyString_FromString("oacSetImplicitInstTermModType");
    if (ob==oacScalarizeInstTermModType) return PyString_FromString("oacScalarizeInstTermModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaInstTermModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaInstTermModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(oaInstTermModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaInstTermModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaInstTermModTypeEnum_doc[] =
"Type convert function for enum: oaInstTermModTypeEnum";
                               
static PyMethodDef PyoaInstTermModTypeEnum_method =
  {"oaInstTermModTypeEnum",(PyCFunction)PyoaInstTermModTypeEnum_TypeFunction,METH_VARARGS,oaInstTermModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaInstTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacAddToNetInstTermModType");
    PyDict_SetItemString(mod_dict,"oacAddToNetInstTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRemoveFromNetInstTermModType");
    PyDict_SetItemString(mod_dict,"oacRemoveFromNetInstTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetRouteMethodInstTermModType");
    PyDict_SetItemString(mod_dict,"oacSetRouteMethodInstTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetImplicitInstTermModType");
    PyDict_SetItemString(mod_dict,"oacSetImplicitInstTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarizeInstTermModType");
    PyDict_SetItemString(mod_dict,"oacScalarizeInstTermModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaInstTermModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaInstTermModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaInstTermModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt1DTblValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt1DTblValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt1DTblValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInt1DTblValueObject* self = (PyoaInt1DTblValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInt1DTblValue)
    {
        PyParamoaInt1DTblValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt1DTblValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt1DTblValue, Choices are:\n"
        "    (oaInt1DTblValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt1DTblValue_tp_dealloc(PyoaInt1DTblValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInt1DTblValue_tp_repr(PyObject *ob)
{
    PyParamoaInt1DTblValue value;
    int convert_status=PyoaInt1DTblValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[37];
    sprintf(buffer,"<oaInt1DTblValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInt1DTblValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt1DTblValue v1;
    PyParamoaInt1DTblValue v2;
    int convert_status1=PyoaInt1DTblValue_Convert(ob1,&v1);
    int convert_status2=PyoaInt1DTblValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInt1DTblValue_Convert(PyObject* ob,PyParamoaInt1DTblValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaInt1DTblValue_Check(ob)) {
        result->SetData( (oaInt1DTblValue**) ((PyoaInt1DTblValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInt1DTblValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInt1DTblValue_FromoaInt1DTblValue(oaInt1DTblValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInt1DTblValue* data=*value;
        PyObject* bself = PyoaInt1DTblValue_Type.tp_alloc(&PyoaInt1DTblValue_Type,0);
        if (bself == NULL) return bself;
        PyoaInt1DTblValueObject* self = (PyoaInt1DTblValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInt1DTblValue_FromoaInt1DTblValue(oaInt1DTblValue* data)
{
    if (data) {
       PyObject* bself = PyoaInt1DTblValue_Type.tp_alloc(&PyoaInt1DTblValue_Type,0);
       if (bself == NULL) return bself;
       PyoaInt1DTblValueObject* self = (PyoaInt1DTblValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt1DTblValue_get_doc[] = 
"Class: oaInt1DTblValue, Function: get\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaInt4)\n"
"    Calls: void get(oa1DLookupTbl_oaInt4_oaInt4& tbl) const\n"
"    Signature: get|void-void|ref-oa1DLookupTbl_oaInt4_oaInt4,\n"
"    BrowseData: 0,oa1DLookupTbl_oaInt4_oaInt4\n"
"    This function returns the int1DTbl for this value.\n"
"    tbl\n"
"    The returned value\n"
;

static PyObject*
oaInt1DTblValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue data;
    int convert_status=PyoaInt1DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInt1DTblValueObject* self=(PyoaInt1DTblValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoa1DLookupTbl_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &Pyoa1DLookupTbl_oaInt4_oaInt4_Convert,&p1)) {
        data.DataCall()->get(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInt1DTblValue_set_doc[] = 
"Class: oaInt1DTblValue, Function: set\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaInt4)\n"
"    Calls: void set(const oa1DLookupTbl_oaInt4_oaInt4& tbl)\n"
"    Signature: set|void-void|cref-oa1DLookupTbl_oaInt4_oaInt4,\n"
"    This function sets this value to the specified int1DTbl value.\n"
"    tbl\n"
"    The int1DTbl value to set\n"
;

static PyObject*
oaInt1DTblValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue data;
    int convert_status=PyoaInt1DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInt1DTblValueObject* self=(PyoaInt1DTblValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoa1DLookupTbl_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &Pyoa1DLookupTbl_oaInt4_oaInt4_Convert,&p1)) {
        data.DataCall()->set(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInt1DTblValue_isNull_doc[] =
"Class: oaInt1DTblValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInt1DTblValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInt1DTblValue data;
    int convert_status=PyoaInt1DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInt1DTblValue_assign_doc[] = 
"Class: oaInt1DTblValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInt1DTblValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInt1DTblValue data;
  int convert_status=PyoaInt1DTblValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInt1DTblValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt1DTblValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInt1DTblValue_methodlist[] = {
    {"get",(PyCFunction)oaInt1DTblValue_get,METH_VARARGS,oaInt1DTblValue_get_doc},
    {"set",(PyCFunction)oaInt1DTblValue_set,METH_VARARGS,oaInt1DTblValue_set_doc},
    {"isNull",(PyCFunction)oaInt1DTblValue_tp_isNull,METH_VARARGS,oaInt1DTblValue_isNull_doc},
    {"assign",(PyCFunction)oaInt1DTblValue_tp_assign,METH_VARARGS,oaInt1DTblValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt1DTblValue_doc[] = 
"Class: oaInt1DTblValue\n"
"  The oaInt1DTblValue class represents a 1D integer lookup table value.\n"
"  See oaValue for a discussion of the usage of all of the oaValue subclasses.\n"
"Constructors:\n"
"  Paramegers: (oaInt1DTblValue)\n"
"    Calls: (const oaInt1DTblValue&)\n"
"    Signature: oaInt1DTblValue||cref-oaInt1DTblValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt1DTblValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt1DTblValue",
    sizeof(PyoaInt1DTblValueObject),
    0,
    (destructor)oaInt1DTblValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInt1DTblValue_tp_compare,	/* tp_compare */
    (reprfunc)oaInt1DTblValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt1DTblValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInt1DTblValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInt1DTblValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt1DTblValue_static_create_doc[] = 
"Class: oaInt1DTblValue, Function: create\n"
"  Paramegers: (oaObject,oa1DLookupTbl_oaInt4_oaInt4)\n"
"    Calls: oaInt1DTblValue* create(oaObject* database,const oa1DLookupTbl_oaInt4_oaInt4& value)\n"
"    Signature: create|ptr-oaInt1DTblValue|ptr-oaObject,cref-oa1DLookupTbl_oaInt4_oaInt4,\n"
"    This function creates an int1DTbl value in the database specified.\n"
"    database\n"
"    The database in which to create the value\n"
"    value\n"
"    The int1DTbl value\n"
"    oacInvalidDatabase\n"
;

static PyObject*
oaInt1DTblValue_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoa1DLookupTbl_oaInt4_oaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaObject_Convert,&p1,
          &Pyoa1DLookupTbl_oaInt4_oaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt1DTblValuep result= (oaInt1DTblValue::create(p1.Data(),p2.Data()));
        return PyoaInt1DTblValue_FromoaInt1DTblValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInt1DTblValue_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaInt1DTblValue_static_create,METH_VARARGS,oaInt1DTblValue_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt1DTblValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt1DTblValue_Type)<0) {
      printf("** PyType_Ready failed for: oaInt1DTblValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt1DTblValue",
           (PyObject*)(&PyoaInt1DTblValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt1DTblValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInt1DTblValue_Type.tp_dict;
    for(method=oaInt1DTblValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt2DTblValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt2DTblValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt2DTblValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInt2DTblValueObject* self = (PyoaInt2DTblValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInt2DTblValue)
    {
        PyParamoaInt2DTblValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt2DTblValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt2DTblValue, Choices are:\n"
        "    (oaInt2DTblValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt2DTblValue_tp_dealloc(PyoaInt2DTblValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInt2DTblValue_tp_repr(PyObject *ob)
{
    PyParamoaInt2DTblValue value;
    int convert_status=PyoaInt2DTblValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[37];
    sprintf(buffer,"<oaInt2DTblValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInt2DTblValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt2DTblValue v1;
    PyParamoaInt2DTblValue v2;
    int convert_status1=PyoaInt2DTblValue_Convert(ob1,&v1);
    int convert_status2=PyoaInt2DTblValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInt2DTblValue_Convert(PyObject* ob,PyParamoaInt2DTblValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaInt2DTblValue_Check(ob)) {
        result->SetData( (oaInt2DTblValue**) ((PyoaInt2DTblValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInt2DTblValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInt2DTblValue_FromoaInt2DTblValue(oaInt2DTblValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInt2DTblValue* data=*value;
        PyObject* bself = PyoaInt2DTblValue_Type.tp_alloc(&PyoaInt2DTblValue_Type,0);
        if (bself == NULL) return bself;
        PyoaInt2DTblValueObject* self = (PyoaInt2DTblValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInt2DTblValue_FromoaInt2DTblValue(oaInt2DTblValue* data)
{
    if (data) {
       PyObject* bself = PyoaInt2DTblValue_Type.tp_alloc(&PyoaInt2DTblValue_Type,0);
       if (bself == NULL) return bself;
       PyoaInt2DTblValueObject* self = (PyoaInt2DTblValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt2DTblValue_get_doc[] = 
"Class: oaInt2DTblValue, Function: get\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
"    Calls: void get(oa2DLookupTbl_oaInt4_oaInt4_oaInt4& tbl) const\n"
"    Signature: get|void-void|ref-oa2DLookupTbl_oaInt4_oaInt4_oaInt4,\n"
"    BrowseData: 0,oa2DLookupTbl_oaInt4_oaInt4_oaInt4\n"
"    This function returns the int2dTbl for this value.\n"
"    tbl\n"
"    The returned value\n"
;

static PyObject*
oaInt2DTblValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue data;
    int convert_status=PyoaInt2DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInt2DTblValueObject* self=(PyoaInt2DTblValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert,&p1)) {
        data.DataCall()->get(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInt2DTblValue_set_doc[] = 
"Class: oaInt2DTblValue, Function: set\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
"    Calls: void set(const oa2DLookupTbl_oaInt4_oaInt4_oaInt4& tbl)\n"
"    Signature: set|void-void|cref-oa2DLookupTbl_oaInt4_oaInt4_oaInt4,\n"
"    This function sets this value to the specified int2DTbl value.\n"
"    tbl\n"
"    The int2DTbl value to set\n"
;

static PyObject*
oaInt2DTblValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue data;
    int convert_status=PyoaInt2DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInt2DTblValueObject* self=(PyoaInt2DTblValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert,&p1)) {
        data.DataCall()->set(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInt2DTblValue_isNull_doc[] =
"Class: oaInt2DTblValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInt2DTblValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInt2DTblValue data;
    int convert_status=PyoaInt2DTblValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInt2DTblValue_assign_doc[] = 
"Class: oaInt2DTblValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInt2DTblValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInt2DTblValue data;
  int convert_status=PyoaInt2DTblValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInt2DTblValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt2DTblValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInt2DTblValue_methodlist[] = {
    {"get",(PyCFunction)oaInt2DTblValue_get,METH_VARARGS,oaInt2DTblValue_get_doc},
    {"set",(PyCFunction)oaInt2DTblValue_set,METH_VARARGS,oaInt2DTblValue_set_doc},
    {"isNull",(PyCFunction)oaInt2DTblValue_tp_isNull,METH_VARARGS,oaInt2DTblValue_isNull_doc},
    {"assign",(PyCFunction)oaInt2DTblValue_tp_assign,METH_VARARGS,oaInt2DTblValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt2DTblValue_doc[] = 
"Class: oaInt2DTblValue\n"
"  The oaInt2DTblValue class represents a 2D integer lookup table value.\n"
"  See oaValue for a discussion of the usage of all of the oaValue subclasses.\n"
"Constructors:\n"
"  Paramegers: (oaInt2DTblValue)\n"
"    Calls: (const oaInt2DTblValue&)\n"
"    Signature: oaInt2DTblValue||cref-oaInt2DTblValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt2DTblValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt2DTblValue",
    sizeof(PyoaInt2DTblValueObject),
    0,
    (destructor)oaInt2DTblValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInt2DTblValue_tp_compare,	/* tp_compare */
    (reprfunc)oaInt2DTblValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt2DTblValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInt2DTblValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInt2DTblValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt2DTblValue_static_create_doc[] = 
"Class: oaInt2DTblValue, Function: create\n"
"  Paramegers: (oaObject,oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
"    Calls: oaInt2DTblValue* create(oaObject* database,const oa2DLookupTbl_oaInt4_oaInt4_oaInt4& value)\n"
"    Signature: create|ptr-oaInt2DTblValue|ptr-oaObject,cref-oa2DLookupTbl_oaInt4_oaInt4_oaInt4,\n"
"    This function creates an int2DTbl value in the database specified.\n"
"    database\n"
"    The database in which to create the value\n"
"    value\n"
"    The int2DTbl value\n"
"    oacInvalidDatabase\n"
;

static PyObject*
oaInt2DTblValue_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaObject_Convert,&p1,
          &Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt2DTblValuep result= (oaInt2DTblValue::create(p1.Data(),p2.Data()));
        return PyoaInt2DTblValue_FromoaInt2DTblValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInt2DTblValue_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaInt2DTblValue_static_create,METH_VARARGS,oaInt2DTblValue_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt2DTblValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt2DTblValue_Type)<0) {
      printf("** PyType_Ready failed for: oaInt2DTblValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt2DTblValue",
           (PyObject*)(&PyoaInt2DTblValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt2DTblValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInt2DTblValue_Type.tp_dict;
    for(method=oaInt2DTblValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaAnalysisOpPointObject* self = (PyoaIntAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaAnalysisOpPoint)
    {
        PyParamoaIntAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaIntAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaIntAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaIntAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaAnalysisOpPoint v1;
    PyParamoaIntAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaIntAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaIntAppDef_oaAnalysisOpPoint**) ((PyoaIntAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(oaIntAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaIntAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaIntAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaAnalysisOpPointObject* self = (PyoaIntAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(oaIntAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaIntAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaAnalysisOpPointObject* self = (PyoaIntAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: oaInt4 get(const oaAnalysisOpPoint* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaAnalysisOpPoint,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisOpPointObject* self=(PyoaIntAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_getDefault_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisOpPointObject* self=(PyoaIntAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,oaInt4)\n"
"    Calls: void set(oaAnalysisOpPoint* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisOpPointObject* self=(PyoaIntAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaIntAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_getDefault,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaIntAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaIntAppDef_oaAnalysisOpPoint||cref-oaIntAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaAnalysisOpPoint",
    sizeof(PyoaIntAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaIntAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaIntAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisOpPointp result= (oaIntAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaAnalysisOpPoint_FromoaIntAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaIntAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaIntAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaIntAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaAnalysisPointObject* self = (PyoaIntAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaAnalysisPoint)
    {
        PyParamoaIntAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaIntAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaAnalysisPoint_tp_dealloc(PyoaIntAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaAnalysisPoint value;
    int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaIntAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaAnalysisPoint v1;
    PyParamoaIntAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaIntAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaIntAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaIntAppDef_oaAnalysisPoint**) ((PyoaIntAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(oaIntAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaIntAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaIntAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaAnalysisPointObject* self = (PyoaIntAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(oaIntAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaIntAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaAnalysisPointObject* self = (PyoaIntAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaInt4 get(const oaAnalysisPoint* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaAnalysisPoint,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisPointObject* self=(PyoaIntAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisPointObject* self=(PyoaIntAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaInt4)\n"
"    Calls: void set(oaAnalysisPoint* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAnalysisPointObject* self=(PyoaIntAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaIntAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaAnalysisPoint data;
  int convert_status=PyoaIntAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaAnalysisPoint_get,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaAnalysisPoint_set,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaIntAppDef_oaAnalysisPoint&)\n"
"    Signature: oaIntAppDef_oaAnalysisPoint||cref-oaIntAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaAnalysisPoint",
    sizeof(PyoaIntAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaIntAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaIntAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAnalysisPointp result= (oaIntAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaAnalysisPoint_FromoaIntAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaIntAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaIntAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaIntAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaAppObjectObject* self = (PyoaIntAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaAppObject)
    {
        PyParamoaIntAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaAppObject, Choices are:\n"
        "    (oaIntAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaAppObject_tp_dealloc(PyoaIntAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaAppObject value;
    int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaIntAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaAppObject v1;
    PyParamoaIntAppDef_oaAppObject v2;
    int convert_status1=PyoaIntAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaIntAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaIntAppDef_oaAppObject**) ((PyoaIntAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(oaIntAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaIntAppDef_oaAppObject_Type.tp_alloc(&PyoaIntAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaAppObjectObject* self = (PyoaIntAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(oaIntAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaAppObject_Type.tp_alloc(&PyoaIntAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaAppObjectObject* self = (PyoaIntAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_get_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaInt4 get(const oaAppObject* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaAppObject,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAppObject data;
    int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAppObjectObject* self=(PyoaIntAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAppObject data;
    int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAppObjectObject* self=(PyoaIntAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_set_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaInt4)\n"
"    Calls: void set(oaAppObject* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaAppObject,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAppObject data;
    int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAppObjectObject* self=(PyoaIntAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_isNull_doc[] =
"Class: oaIntAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaAppObject data;
    int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaAppObject_assign_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaAppObject data;
  int convert_status=PyoaIntAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaAppObject_get,METH_VARARGS,oaIntAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaAppObject_getDefault,METH_VARARGS,oaIntAppDef_oaAppObject_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaAppObject_set,METH_VARARGS,oaIntAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaIntAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaAppObject_tp_assign,METH_VARARGS,oaIntAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_doc[] = 
"Class: oaIntAppDef_oaAppObject\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaAppObject)\n"
"    Calls: (const oaIntAppDef_oaAppObject&)\n"
"    Signature: oaIntAppDef_oaAppObject||cref-oaIntAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaAppObject",
    sizeof(PyoaIntAppDef_oaAppObjectObject),
    0,
    (destructor)oaIntAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_static_find_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaIntAppDef_oaAppObjectp result= (oaIntAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAppObject_static_get_doc[] = 
"Class: oaIntAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAppObjectp result= (oaIntAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAppObjectp result= (oaIntAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAppObjectp result= (oaIntAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaAppObject_FromoaIntAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaAppObject_static_find,METH_VARARGS,oaIntAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaAppObject_static_get,METH_VARARGS,oaIntAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaAppObject",
           (PyObject*)(&PyoaIntAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaAppObject_Type.tp_dict;
    for(method=oaIntAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaAssignmentObject* self = (PyoaIntAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaAssignment)
    {
        PyParamoaIntAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaAssignment, Choices are:\n"
        "    (oaIntAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaAssignment_tp_dealloc(PyoaIntAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaAssignment value;
    int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaAssignment v1;
    PyParamoaIntAppDef_oaAssignment v2;
    int convert_status1=PyoaIntAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaIntAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaIntAppDef_oaAssignment**) ((PyoaIntAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(oaIntAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaIntAppDef_oaAssignment_Type.tp_alloc(&PyoaIntAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaAssignmentObject* self = (PyoaIntAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(oaIntAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaAssignment_Type.tp_alloc(&PyoaIntAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaAssignmentObject* self = (PyoaIntAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_get_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaInt4 get(const oaAssignment* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaAssignment,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAssignment data;
    int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAssignmentObject* self=(PyoaIntAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAssignment data;
    int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAssignmentObject* self=(PyoaIntAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_set_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaInt4)\n"
"    Calls: void set(oaAssignment* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaAssignment,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaAssignment data;
    int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaAssignmentObject* self=(PyoaIntAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_isNull_doc[] =
"Class: oaIntAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaAssignment data;
    int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaAssignment_assign_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaAssignment data;
  int convert_status=PyoaIntAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaAssignment_get,METH_VARARGS,oaIntAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaAssignment_getDefault,METH_VARARGS,oaIntAppDef_oaAssignment_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaAssignment_set,METH_VARARGS,oaIntAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaIntAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaAssignment_tp_assign,METH_VARARGS,oaIntAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_doc[] = 
"Class: oaIntAppDef_oaAssignment\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaAssignment)\n"
"    Calls: (const oaIntAppDef_oaAssignment&)\n"
"    Signature: oaIntAppDef_oaAssignment||cref-oaIntAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaAssignment",
    sizeof(PyoaIntAppDef_oaAssignmentObject),
    0,
    (destructor)oaIntAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_static_find_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::find(p1.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaAssignment_static_get_doc[] = 
"Class: oaIntAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaAssignmentp result= (oaIntAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaAssignment_FromoaIntAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaAssignment_static_find,METH_VARARGS,oaIntAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaAssignment_static_get,METH_VARARGS,oaIntAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaAssignment",
           (PyObject*)(&PyoaIntAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaAssignment_Type.tp_dict;
    for(method=oaIntAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaBlockObject* self = (PyoaIntAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaBlock)
    {
        PyParamoaIntAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaBlock, Choices are:\n"
        "    (oaIntAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaBlock_tp_dealloc(PyoaIntAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaBlock value;
    int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaBlock v1;
    PyParamoaIntAppDef_oaBlock v2;
    int convert_status1=PyoaIntAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaBlock_Convert(PyObject* ob,PyParamoaIntAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaIntAppDef_oaBlock**) ((PyoaIntAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(oaIntAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaIntAppDef_oaBlock_Type.tp_alloc(&PyoaIntAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaBlockObject* self = (PyoaIntAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(oaIntAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaBlock_Type.tp_alloc(&PyoaIntAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaBlockObject* self = (PyoaIntAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_get_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaInt4 get(const oaBlock* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaBlock,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlock data;
    int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockObject* self=(PyoaIntAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_getDefault_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlock data;
    int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockObject* self=(PyoaIntAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_set_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaInt4)\n"
"    Calls: void set(oaBlock* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaBlock,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlock data;
    int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockObject* self=(PyoaIntAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_isNull_doc[] =
"Class: oaIntAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaBlock data;
    int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaBlock_assign_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaBlock data;
  int convert_status=PyoaIntAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaBlock_get,METH_VARARGS,oaIntAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaBlock_getDefault,METH_VARARGS,oaIntAppDef_oaBlock_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaBlock_set,METH_VARARGS,oaIntAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaBlock_tp_isNull,METH_VARARGS,oaIntAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaBlock_tp_assign,METH_VARARGS,oaIntAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_doc[] = 
"Class: oaIntAppDef_oaBlock\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaBlock)\n"
"    Calls: (const oaIntAppDef_oaBlock&)\n"
"    Signature: oaIntAppDef_oaBlock||cref-oaIntAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaBlock",
    sizeof(PyoaIntAppDef_oaBlockObject),
    0,
    (destructor)oaIntAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_static_find_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::find(p1.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlock_static_get_doc[] = 
"Class: oaIntAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockp result= (oaIntAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaBlock_FromoaIntAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaBlock_static_find,METH_VARARGS,oaIntAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaBlock_static_get,METH_VARARGS,oaIntAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaBlock",
           (PyObject*)(&PyoaIntAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaBlock_Type.tp_dict;
    for(method=oaIntAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaBlockageObject* self = (PyoaIntAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaBlockage)
    {
        PyParamoaIntAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaBlockage, Choices are:\n"
        "    (oaIntAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaBlockage_tp_dealloc(PyoaIntAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaBlockage value;
    int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaIntAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaBlockage v1;
    PyParamoaIntAppDef_oaBlockage v2;
    int convert_status1=PyoaIntAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaIntAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaIntAppDef_oaBlockage**) ((PyoaIntAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(oaIntAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaIntAppDef_oaBlockage_Type.tp_alloc(&PyoaIntAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaBlockageObject* self = (PyoaIntAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(oaIntAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaBlockage_Type.tp_alloc(&PyoaIntAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaBlockageObject* self = (PyoaIntAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_get_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaInt4 get(const oaBlockage* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaBlockage,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlockage data;
    int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockageObject* self=(PyoaIntAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlockage data;
    int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockageObject* self=(PyoaIntAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_set_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaInt4)\n"
"    Calls: void set(oaBlockage* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaBlockage,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBlockage data;
    int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBlockageObject* self=(PyoaIntAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_isNull_doc[] =
"Class: oaIntAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaBlockage data;
    int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaBlockage_assign_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaBlockage data;
  int convert_status=PyoaIntAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaBlockage_get,METH_VARARGS,oaIntAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaBlockage_getDefault,METH_VARARGS,oaIntAppDef_oaBlockage_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaBlockage_set,METH_VARARGS,oaIntAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaIntAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaBlockage_tp_assign,METH_VARARGS,oaIntAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_doc[] = 
"Class: oaIntAppDef_oaBlockage\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaBlockage)\n"
"    Calls: (const oaIntAppDef_oaBlockage&)\n"
"    Signature: oaIntAppDef_oaBlockage||cref-oaIntAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaBlockage",
    sizeof(PyoaIntAppDef_oaBlockageObject),
    0,
    (destructor)oaIntAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_static_find_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::find(p1.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBlockage_static_get_doc[] = 
"Class: oaIntAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBlockagep result= (oaIntAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaBlockage_FromoaIntAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaBlockage_static_find,METH_VARARGS,oaIntAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaBlockage_static_get,METH_VARARGS,oaIntAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaBlockage",
           (PyObject*)(&PyoaIntAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaBlockage_Type.tp_dict;
    for(method=oaIntAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaBoundaryObject* self = (PyoaIntAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaBoundary)
    {
        PyParamoaIntAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaBoundary, Choices are:\n"
        "    (oaIntAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaBoundary_tp_dealloc(PyoaIntAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaBoundary value;
    int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaIntAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaBoundary v1;
    PyParamoaIntAppDef_oaBoundary v2;
    int convert_status1=PyoaIntAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaIntAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaIntAppDef_oaBoundary**) ((PyoaIntAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(oaIntAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaIntAppDef_oaBoundary_Type.tp_alloc(&PyoaIntAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaBoundaryObject* self = (PyoaIntAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(oaIntAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaBoundary_Type.tp_alloc(&PyoaIntAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaBoundaryObject* self = (PyoaIntAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_get_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaInt4 get(const oaBoundary* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaBoundary,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBoundary data;
    int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBoundaryObject* self=(PyoaIntAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBoundary data;
    int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBoundaryObject* self=(PyoaIntAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_set_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaInt4)\n"
"    Calls: void set(oaBoundary* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaBoundary,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBoundary data;
    int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBoundaryObject* self=(PyoaIntAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_isNull_doc[] =
"Class: oaIntAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaBoundary data;
    int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaBoundary_assign_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaBoundary data;
  int convert_status=PyoaIntAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaBoundary_get,METH_VARARGS,oaIntAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaBoundary_getDefault,METH_VARARGS,oaIntAppDef_oaBoundary_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaBoundary_set,METH_VARARGS,oaIntAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaIntAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaBoundary_tp_assign,METH_VARARGS,oaIntAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_doc[] = 
"Class: oaIntAppDef_oaBoundary\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaBoundary)\n"
"    Calls: (const oaIntAppDef_oaBoundary&)\n"
"    Signature: oaIntAppDef_oaBoundary||cref-oaIntAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaBoundary",
    sizeof(PyoaIntAppDef_oaBoundaryObject),
    0,
    (destructor)oaIntAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_static_find_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::find(p1.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBoundary_static_get_doc[] = 
"Class: oaIntAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBoundaryp result= (oaIntAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaBoundary_FromoaIntAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaBoundary_static_find,METH_VARARGS,oaIntAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaBoundary_static_get,METH_VARARGS,oaIntAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaBoundary",
           (PyObject*)(&PyoaIntAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaBoundary_Type.tp_dict;
    for(method=oaIntAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaBusNetDefObject* self = (PyoaIntAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaBusNetDef)
    {
        PyParamoaIntAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaBusNetDef, Choices are:\n"
        "    (oaIntAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaBusNetDef_tp_dealloc(PyoaIntAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaBusNetDef value;
    int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaIntAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaBusNetDef v1;
    PyParamoaIntAppDef_oaBusNetDef v2;
    int convert_status1=PyoaIntAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaIntAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaIntAppDef_oaBusNetDef**) ((PyoaIntAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(oaIntAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaIntAppDef_oaBusNetDef_Type.tp_alloc(&PyoaIntAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaBusNetDefObject* self = (PyoaIntAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(oaIntAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaBusNetDef_Type.tp_alloc(&PyoaIntAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaBusNetDefObject* self = (PyoaIntAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_get_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaInt4 get(const oaBusNetDef* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaBusNetDef,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusNetDef data;
    int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusNetDefObject* self=(PyoaIntAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusNetDef data;
    int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusNetDefObject* self=(PyoaIntAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_set_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaInt4)\n"
"    Calls: void set(oaBusNetDef* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusNetDef data;
    int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusNetDefObject* self=(PyoaIntAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaIntAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaBusNetDef data;
    int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaBusNetDef data;
  int convert_status=PyoaIntAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaBusNetDef_get,METH_VARARGS,oaIntAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaIntAppDef_oaBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaBusNetDef_set,METH_VARARGS,oaIntAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaIntAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaIntAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_doc[] = 
"Class: oaIntAppDef_oaBusNetDef\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaBusNetDef)\n"
"    Calls: (const oaIntAppDef_oaBusNetDef&)\n"
"    Signature: oaIntAppDef_oaBusNetDef||cref-oaIntAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaBusNetDef",
    sizeof(PyoaIntAppDef_oaBusNetDefObject),
    0,
    (destructor)oaIntAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaIntAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusNetDefp result= (oaIntAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaBusNetDef_FromoaIntAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaBusNetDef_static_find,METH_VARARGS,oaIntAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaBusNetDef_static_get,METH_VARARGS,oaIntAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaBusNetDef",
           (PyObject*)(&PyoaIntAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaIntAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaBusTermDefObject* self = (PyoaIntAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaBusTermDef)
    {
        PyParamoaIntAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaBusTermDef, Choices are:\n"
        "    (oaIntAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaBusTermDef_tp_dealloc(PyoaIntAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaBusTermDef value;
    int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaBusTermDef v1;
    PyParamoaIntAppDef_oaBusTermDef v2;
    int convert_status1=PyoaIntAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaIntAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaIntAppDef_oaBusTermDef**) ((PyoaIntAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(oaIntAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaIntAppDef_oaBusTermDef_Type.tp_alloc(&PyoaIntAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaBusTermDefObject* self = (PyoaIntAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(oaIntAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaBusTermDef_Type.tp_alloc(&PyoaIntAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaBusTermDefObject* self = (PyoaIntAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_get_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaInt4 get(const oaBusTermDef* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaBusTermDef,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusTermDef data;
    int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusTermDefObject* self=(PyoaIntAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusTermDef data;
    int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusTermDefObject* self=(PyoaIntAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_set_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaInt4)\n"
"    Calls: void set(oaBusTermDef* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaBusTermDef data;
    int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaBusTermDefObject* self=(PyoaIntAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaIntAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaBusTermDef data;
    int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaBusTermDef data;
  int convert_status=PyoaIntAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaBusTermDef_get,METH_VARARGS,oaIntAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaIntAppDef_oaBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaBusTermDef_set,METH_VARARGS,oaIntAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaIntAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaIntAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_doc[] = 
"Class: oaIntAppDef_oaBusTermDef\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaBusTermDef)\n"
"    Calls: (const oaIntAppDef_oaBusTermDef&)\n"
"    Signature: oaIntAppDef_oaBusTermDef||cref-oaIntAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaBusTermDef",
    sizeof(PyoaIntAppDef_oaBusTermDefObject),
    0,
    (destructor)oaIntAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaIntAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaBusTermDefp result= (oaIntAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaBusTermDef_FromoaIntAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaBusTermDef_static_find,METH_VARARGS,oaIntAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaBusTermDef_static_get,METH_VARARGS,oaIntAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaBusTermDef",
           (PyObject*)(&PyoaIntAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaIntAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaCMapObject* self = (PyoaIntAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaCMap)
    {
        PyParamoaIntAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaCMap, Choices are:\n"
        "    (oaIntAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaCMap_tp_dealloc(PyoaIntAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaCMap value;
    int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaIntAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaCMap v1;
    PyParamoaIntAppDef_oaCMap v2;
    int convert_status1=PyoaIntAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaCMap_Convert(PyObject* ob,PyParamoaIntAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaIntAppDef_oaCMap**) ((PyoaIntAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(oaIntAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaIntAppDef_oaCMap_Type.tp_alloc(&PyoaIntAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaCMapObject* self = (PyoaIntAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(oaIntAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaCMap_Type.tp_alloc(&PyoaIntAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaCMapObject* self = (PyoaIntAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_get_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaInt4 get(const oaCMap* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaCMap,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCMap data;
    int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCMapObject* self=(PyoaIntAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_getDefault_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCMap data;
    int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCMapObject* self=(PyoaIntAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_set_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaInt4)\n"
"    Calls: void set(oaCMap* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaCMap,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCMap data;
    int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCMapObject* self=(PyoaIntAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_isNull_doc[] =
"Class: oaIntAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaCMap data;
    int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaCMap_assign_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaCMap data;
  int convert_status=PyoaIntAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaCMap_get,METH_VARARGS,oaIntAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaCMap_getDefault,METH_VARARGS,oaIntAppDef_oaCMap_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaCMap_set,METH_VARARGS,oaIntAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaCMap_tp_isNull,METH_VARARGS,oaIntAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaCMap_tp_assign,METH_VARARGS,oaIntAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_doc[] = 
"Class: oaIntAppDef_oaCMap\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaCMap)\n"
"    Calls: (const oaIntAppDef_oaCMap&)\n"
"    Signature: oaIntAppDef_oaCMap||cref-oaIntAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaCMap",
    sizeof(PyoaIntAppDef_oaCMapObject),
    0,
    (destructor)oaIntAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_static_find_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::find(p1.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCMap_static_get_doc[] = 
"Class: oaIntAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCMapp result= (oaIntAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaCMap_FromoaIntAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaCMap_static_find,METH_VARARGS,oaIntAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaCMap_static_get,METH_VARARGS,oaIntAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaCMap",
           (PyObject*)(&PyoaIntAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaCMap_Type.tp_dict;
    for(method=oaIntAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaCellObject* self = (PyoaIntAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaCell)
    {
        PyParamoaIntAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaCell, Choices are:\n"
        "    (oaIntAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaCell_tp_dealloc(PyoaIntAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaCell value;
    int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaIntAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaCell v1;
    PyParamoaIntAppDef_oaCell v2;
    int convert_status1=PyoaIntAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaCell_Convert(PyObject* ob,PyParamoaIntAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaCell_Check(ob)) {
        result->SetData( (oaIntAppDef_oaCell**) ((PyoaIntAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(oaIntAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaCell* data=*value;
        PyObject* bself = PyoaIntAppDef_oaCell_Type.tp_alloc(&PyoaIntAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaCellObject* self = (PyoaIntAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(oaIntAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaCell_Type.tp_alloc(&PyoaIntAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaCellObject* self = (PyoaIntAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_get_doc[] = 
"Class: oaIntAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaInt4 get(const oaCell* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaCell,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCell data;
    int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellObject* self=(PyoaIntAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_getDefault_doc[] = 
"Class: oaIntAppDef_oaCell, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCell data;
    int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellObject* self=(PyoaIntAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_set_doc[] = 
"Class: oaIntAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaInt4)\n"
"    Calls: void set(oaCell* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaCell,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCell data;
    int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellObject* self=(PyoaIntAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_isNull_doc[] =
"Class: oaIntAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaCell data;
    int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaCell_assign_doc[] = 
"Class: oaIntAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaCell data;
  int convert_status=PyoaIntAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaCell_get,METH_VARARGS,oaIntAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaCell_getDefault,METH_VARARGS,oaIntAppDef_oaCell_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaCell_set,METH_VARARGS,oaIntAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaCell_tp_isNull,METH_VARARGS,oaIntAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaCell_tp_assign,METH_VARARGS,oaIntAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_doc[] = 
"Class: oaIntAppDef_oaCell\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaCell)\n"
"    Calls: (const oaIntAppDef_oaCell&)\n"
"    Signature: oaIntAppDef_oaCell||cref-oaIntAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaCell",
    sizeof(PyoaIntAppDef_oaCellObject),
    0,
    (destructor)oaIntAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_static_find_doc[] = 
"Class: oaIntAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::find(p1.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCell_static_get_doc[] = 
"Class: oaIntAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellp result= (oaIntAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaCell_FromoaIntAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaCell_static_find,METH_VARARGS,oaIntAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaCell_static_get,METH_VARARGS,oaIntAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaCell",
           (PyObject*)(&PyoaIntAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaCell_Type.tp_dict;
    for(method=oaIntAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaCellViewObject* self = (PyoaIntAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaCellView)
    {
        PyParamoaIntAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaCellView, Choices are:\n"
        "    (oaIntAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaCellView_tp_dealloc(PyoaIntAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaCellView value;
    int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaIntAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaCellView v1;
    PyParamoaIntAppDef_oaCellView v2;
    int convert_status1=PyoaIntAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaCellView_Convert(PyObject* ob,PyParamoaIntAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaIntAppDef_oaCellView**) ((PyoaIntAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(oaIntAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaIntAppDef_oaCellView_Type.tp_alloc(&PyoaIntAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaCellViewObject* self = (PyoaIntAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(oaIntAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaCellView_Type.tp_alloc(&PyoaIntAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaCellViewObject* self = (PyoaIntAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_get_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaInt4 get(const oaCellView* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaCellView,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCellView data;
    int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellViewObject* self=(PyoaIntAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_getDefault_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCellView data;
    int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellViewObject* self=(PyoaIntAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_set_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaInt4)\n"
"    Calls: void set(oaCellView* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaCellView,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCellView data;
    int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaCellViewObject* self=(PyoaIntAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_isNull_doc[] =
"Class: oaIntAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaCellView data;
    int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaCellView_assign_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaCellView data;
  int convert_status=PyoaIntAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaCellView_get,METH_VARARGS,oaIntAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaCellView_getDefault,METH_VARARGS,oaIntAppDef_oaCellView_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaCellView_set,METH_VARARGS,oaIntAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaCellView_tp_isNull,METH_VARARGS,oaIntAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaCellView_tp_assign,METH_VARARGS,oaIntAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_doc[] = 
"Class: oaIntAppDef_oaCellView\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaCellView)\n"
"    Calls: (const oaIntAppDef_oaCellView&)\n"
"    Signature: oaIntAppDef_oaCellView||cref-oaIntAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaCellView",
    sizeof(PyoaIntAppDef_oaCellViewObject),
    0,
    (destructor)oaIntAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_static_find_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::find(p1.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCellView_static_get_doc[] = 
"Class: oaIntAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaCellViewp result= (oaIntAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaCellView_FromoaIntAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaCellView_static_find,METH_VARARGS,oaIntAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaCellView_static_get,METH_VARARGS,oaIntAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaCellView",
           (PyObject*)(&PyoaIntAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaCellView_Type.tp_dict;
    for(method=oaIntAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaClusterObject* self = (PyoaIntAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaCluster)
    {
        PyParamoaIntAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaCluster, Choices are:\n"
        "    (oaIntAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaCluster_tp_dealloc(PyoaIntAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaCluster value;
    int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaIntAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaCluster v1;
    PyParamoaIntAppDef_oaCluster v2;
    int convert_status1=PyoaIntAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaCluster_Convert(PyObject* ob,PyParamoaIntAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaIntAppDef_oaCluster**) ((PyoaIntAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(oaIntAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaIntAppDef_oaCluster_Type.tp_alloc(&PyoaIntAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaClusterObject* self = (PyoaIntAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(oaIntAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaCluster_Type.tp_alloc(&PyoaIntAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaClusterObject* self = (PyoaIntAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_get_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaInt4 get(const oaCluster* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaCluster,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCluster data;
    int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaClusterObject* self=(PyoaIntAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_getDefault_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCluster data;
    int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaClusterObject* self=(PyoaIntAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_set_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaInt4)\n"
"    Calls: void set(oaCluster* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaCluster,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaCluster data;
    int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaClusterObject* self=(PyoaIntAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_isNull_doc[] =
"Class: oaIntAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaCluster data;
    int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaCluster_assign_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaCluster data;
  int convert_status=PyoaIntAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaCluster_get,METH_VARARGS,oaIntAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaCluster_getDefault,METH_VARARGS,oaIntAppDef_oaCluster_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaCluster_set,METH_VARARGS,oaIntAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaCluster_tp_isNull,METH_VARARGS,oaIntAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaCluster_tp_assign,METH_VARARGS,oaIntAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_doc[] = 
"Class: oaIntAppDef_oaCluster\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaCluster)\n"
"    Calls: (const oaIntAppDef_oaCluster&)\n"
"    Signature: oaIntAppDef_oaCluster||cref-oaIntAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaCluster",
    sizeof(PyoaIntAppDef_oaClusterObject),
    0,
    (destructor)oaIntAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_static_find_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::find(p1.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaCluster_static_get_doc[] = 
"Class: oaIntAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaClusterp result= (oaIntAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaCluster_FromoaIntAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaCluster_static_find,METH_VARARGS,oaIntAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaCluster_static_get,METH_VARARGS,oaIntAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaCluster",
           (PyObject*)(&PyoaIntAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaCluster_Type.tp_dict;
    for(method=oaIntAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConnectDefObject* self = (PyoaIntAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConnectDef)
    {
        PyParamoaIntAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConnectDef, Choices are:\n"
        "    (oaIntAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConnectDef_tp_dealloc(PyoaIntAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConnectDef value;
    int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConnectDef v1;
    PyParamoaIntAppDef_oaConnectDef v2;
    int convert_status1=PyoaIntAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaIntAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConnectDef**) ((PyoaIntAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(oaIntAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConnectDef_Type.tp_alloc(&PyoaIntAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConnectDefObject* self = (PyoaIntAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(oaIntAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConnectDef_Type.tp_alloc(&PyoaIntAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConnectDefObject* self = (PyoaIntAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_get_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaInt4 get(const oaConnectDef* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConnectDef,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConnectDef data;
    int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConnectDefObject* self=(PyoaIntAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConnectDef data;
    int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConnectDefObject* self=(PyoaIntAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_set_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaInt4)\n"
"    Calls: void set(oaConnectDef* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConnectDef data;
    int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConnectDefObject* self=(PyoaIntAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_isNull_doc[] =
"Class: oaIntAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConnectDef data;
    int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConnectDef_assign_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConnectDef data;
  int convert_status=PyoaIntAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConnectDef_get,METH_VARARGS,oaIntAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConnectDef_getDefault,METH_VARARGS,oaIntAppDef_oaConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConnectDef_set,METH_VARARGS,oaIntAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaIntAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaIntAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_doc[] = 
"Class: oaIntAppDef_oaConnectDef\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConnectDef)\n"
"    Calls: (const oaIntAppDef_oaConnectDef&)\n"
"    Signature: oaIntAppDef_oaConnectDef||cref-oaIntAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConnectDef",
    sizeof(PyoaIntAppDef_oaConnectDefObject),
    0,
    (destructor)oaIntAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::find(p1.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaIntAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConnectDefp result= (oaIntAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConnectDef_FromoaIntAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConnectDef_static_find,METH_VARARGS,oaIntAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConnectDef_static_get,METH_VARARGS,oaIntAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConnectDef",
           (PyObject*)(&PyoaIntAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaIntAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintObject* self = (PyoaIntAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraint)
    {
        PyParamoaIntAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraint, Choices are:\n"
        "    (oaIntAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraint_tp_dealloc(PyoaIntAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraint value;
    int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraint v1;
    PyParamoaIntAppDef_oaConstraint v2;
    int convert_status1=PyoaIntAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraint**) ((PyoaIntAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(oaIntAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraint_Type.tp_alloc(&PyoaIntAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintObject* self = (PyoaIntAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(oaIntAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraint_Type.tp_alloc(&PyoaIntAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintObject* self = (PyoaIntAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_get_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaInt4 get(const oaConstraint* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraint,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraint data;
    int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintObject* self=(PyoaIntAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraint data;
    int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintObject* self=(PyoaIntAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_set_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaInt4)\n"
"    Calls: void set(oaConstraint* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraint,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraint data;
    int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintObject* self=(PyoaIntAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_isNull_doc[] =
"Class: oaIntAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraint data;
    int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraint_assign_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraint data;
  int convert_status=PyoaIntAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraint_get,METH_VARARGS,oaIntAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraint_getDefault,METH_VARARGS,oaIntAppDef_oaConstraint_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraint_set,METH_VARARGS,oaIntAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraint_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_doc[] = 
"Class: oaIntAppDef_oaConstraint\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraint)\n"
"    Calls: (const oaIntAppDef_oaConstraint&)\n"
"    Signature: oaIntAppDef_oaConstraint||cref-oaIntAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraint",
    sizeof(PyoaIntAppDef_oaConstraintObject),
    0,
    (destructor)oaIntAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::find(p1.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraint_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintp result= (oaIntAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraint_FromoaIntAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraint_static_find,METH_VARARGS,oaIntAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraint_static_get,METH_VARARGS,oaIntAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraint",
           (PyObject*)(&PyoaIntAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraint_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintDefObject* self = (PyoaIntAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintDef)
    {
        PyParamoaIntAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintDef, Choices are:\n"
        "    (oaIntAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintDef_tp_dealloc(PyoaIntAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintDef value;
    int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaIntAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintDef v1;
    PyParamoaIntAppDef_oaConstraintDef v2;
    int convert_status1=PyoaIntAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintDef**) ((PyoaIntAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(oaIntAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintDef_Type.tp_alloc(&PyoaIntAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintDefObject* self = (PyoaIntAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(oaIntAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintDef_Type.tp_alloc(&PyoaIntAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintDefObject* self = (PyoaIntAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_get_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaInt4 get(const oaConstraintDef* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintDef,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintDef data;
    int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintDefObject* self=(PyoaIntAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintDef data;
    int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintDefObject* self=(PyoaIntAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_set_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaInt4)\n"
"    Calls: void set(oaConstraintDef* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintDef data;
    int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintDefObject* self=(PyoaIntAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintDef data;
    int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintDef data;
  int convert_status=PyoaIntAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintDef_get,METH_VARARGS,oaIntAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintDef_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintDef_set,METH_VARARGS,oaIntAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_doc[] = 
"Class: oaIntAppDef_oaConstraintDef\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintDef)\n"
"    Calls: (const oaIntAppDef_oaConstraintDef&)\n"
"    Signature: oaIntAppDef_oaConstraintDef||cref-oaIntAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintDef",
    sizeof(PyoaIntAppDef_oaConstraintDefObject),
    0,
    (destructor)oaIntAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintDefp result= (oaIntAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintDef_FromoaIntAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintDef_static_find,METH_VARARGS,oaIntAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintDef_static_get,METH_VARARGS,oaIntAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintDef",
           (PyObject*)(&PyoaIntAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintGroupObject* self = (PyoaIntAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintGroup)
    {
        PyParamoaIntAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaIntAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintGroup_tp_dealloc(PyoaIntAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintGroup value;
    int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaIntAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintGroup v1;
    PyParamoaIntAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaIntAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintGroup**) ((PyoaIntAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(oaIntAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintGroupObject* self = (PyoaIntAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(oaIntAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintGroupObject* self = (PyoaIntAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaInt4 get(const oaConstraintGroup* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintGroup,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupObject* self=(PyoaIntAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupObject* self=(PyoaIntAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaInt4)\n"
"    Calls: void set(oaConstraintGroup* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupObject* self=(PyoaIntAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintGroup data;
  int convert_status=PyoaIntAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintGroup_get,METH_VARARGS,oaIntAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintGroup_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintGroup_set,METH_VARARGS,oaIntAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintGroup)\n"
"    Calls: (const oaIntAppDef_oaConstraintGroup&)\n"
"    Signature: oaIntAppDef_oaConstraintGroup||cref-oaIntAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintGroup",
    sizeof(PyoaIntAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaIntAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupp result= (oaIntAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintGroup_FromoaIntAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaIntAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaIntAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaIntAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintGroupHeader)
    {
        PyParamoaIntAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaIntAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaIntAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaIntAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintGroupHeader v1;
    PyParamoaIntAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintGroupHeader**) ((PyoaIntAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(oaIntAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(oaIntAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaInt4 get(const oaConstraintGroupHeader* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintGroupHeader,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupHeaderObject* self=(PyoaIntAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupHeaderObject* self=(PyoaIntAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaInt4)\n"
"    Calls: void set(oaConstraintGroupHeader* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupHeaderObject* self=(PyoaIntAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaIntAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaIntAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaIntAppDef_oaConstraintGroupHeader||cref-oaIntAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintGroupHeader",
    sizeof(PyoaIntAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaIntAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupHeaderp result= (oaIntAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintGroupHeader_FromoaIntAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaIntAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaIntAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintGroupMemObject* self = (PyoaIntAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintGroupMem)
    {
        PyParamoaIntAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaIntAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintGroupMem_tp_dealloc(PyoaIntAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaIntAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintGroupMem v1;
    PyParamoaIntAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintGroupMem**) ((PyoaIntAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(oaIntAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintGroupMemObject* self = (PyoaIntAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(oaIntAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaIntAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintGroupMemObject* self = (PyoaIntAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaInt4 get(const oaConstraintGroupMem* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintGroupMem,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupMemObject* self=(PyoaIntAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupMemObject* self=(PyoaIntAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaInt4)\n"
"    Calls: void set(oaConstraintGroupMem* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintGroupMemObject* self=(PyoaIntAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaIntAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaIntAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaIntAppDef_oaConstraintGroupMem||cref-oaIntAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintGroupMem",
    sizeof(PyoaIntAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaIntAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintGroupMemp result= (oaIntAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintGroupMem_FromoaIntAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaIntAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaIntAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintParamObject* self = (PyoaIntAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintParam)
    {
        PyParamoaIntAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintParam, Choices are:\n"
        "    (oaIntAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintParam_tp_dealloc(PyoaIntAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintParam value;
    int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaIntAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintParam v1;
    PyParamoaIntAppDef_oaConstraintParam v2;
    int convert_status1=PyoaIntAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintParam**) ((PyoaIntAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(oaIntAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintParam_Type.tp_alloc(&PyoaIntAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintParamObject* self = (PyoaIntAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(oaIntAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintParam_Type.tp_alloc(&PyoaIntAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintParamObject* self = (PyoaIntAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_get_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaInt4 get(const oaConstraintParam* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintParam,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParam data;
    int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamObject* self=(PyoaIntAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParam data;
    int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamObject* self=(PyoaIntAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_set_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaInt4)\n"
"    Calls: void set(oaConstraintParam* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParam data;
    int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamObject* self=(PyoaIntAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintParam data;
    int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintParam data;
  int convert_status=PyoaIntAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintParam_get,METH_VARARGS,oaIntAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintParam_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintParam_set,METH_VARARGS,oaIntAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_doc[] = 
"Class: oaIntAppDef_oaConstraintParam\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintParam)\n"
"    Calls: (const oaIntAppDef_oaConstraintParam&)\n"
"    Signature: oaIntAppDef_oaConstraintParam||cref-oaIntAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintParam",
    sizeof(PyoaIntAppDef_oaConstraintParamObject),
    0,
    (destructor)oaIntAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamp result= (oaIntAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintParam_FromoaIntAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintParam_static_find,METH_VARARGS,oaIntAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintParam_static_get,METH_VARARGS,oaIntAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintParam",
           (PyObject*)(&PyoaIntAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaConstraintParamDefObject* self = (PyoaIntAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaConstraintParamDef)
    {
        PyParamoaIntAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaIntAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaConstraintParamDef_tp_dealloc(PyoaIntAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaConstraintParamDef value;
    int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaIntAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaConstraintParamDef v1;
    PyParamoaIntAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaIntAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaIntAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaIntAppDef_oaConstraintParamDef**) ((PyoaIntAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(oaIntAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaIntAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaIntAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaConstraintParamDefObject* self = (PyoaIntAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(oaIntAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaIntAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaConstraintParamDefObject* self = (PyoaIntAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaInt4 get(const oaConstraintParamDef* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaConstraintParamDef,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamDefObject* self=(PyoaIntAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamDefObject* self=(PyoaIntAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaInt4)\n"
"    Calls: void set(oaConstraintParamDef* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaConstraintParamDefObject* self=(PyoaIntAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaIntAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaConstraintParamDef data;
  int convert_status=PyoaIntAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaConstraintParamDef_get,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaConstraintParamDef_set,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaIntAppDef_oaConstraintParamDef&)\n"
"    Signature: oaIntAppDef_oaConstraintParamDef||cref-oaIntAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaConstraintParamDef",
    sizeof(PyoaIntAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaIntAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaIntAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaConstraintParamDefp result= (oaIntAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaConstraintParamDef_FromoaIntAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaIntAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaIntAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaIntAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDMDataObject* self = (PyoaIntAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDMData)
    {
        PyParamoaIntAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDMData, Choices are:\n"
        "    (oaIntAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDMData_tp_dealloc(PyoaIntAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDMData value;
    int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDMData v1;
    PyParamoaIntAppDef_oaDMData v2;
    int convert_status1=PyoaIntAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDMData_Convert(PyObject* ob,PyParamoaIntAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDMData**) ((PyoaIntAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(oaIntAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDMData_Type.tp_alloc(&PyoaIntAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDMDataObject* self = (PyoaIntAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(oaIntAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDMData_Type.tp_alloc(&PyoaIntAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDMDataObject* self = (PyoaIntAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_get_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaInt4 get(const oaDMData* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDMData,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMData data;
    int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMDataObject* self=(PyoaIntAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_getDefault_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMData data;
    int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMDataObject* self=(PyoaIntAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_set_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaInt4)\n"
"    Calls: void set(oaDMData* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDMData,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMData data;
    int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMDataObject* self=(PyoaIntAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_isNull_doc[] =
"Class: oaIntAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDMData data;
    int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDMData_assign_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDMData data;
  int convert_status=PyoaIntAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDMData_get,METH_VARARGS,oaIntAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDMData_getDefault,METH_VARARGS,oaIntAppDef_oaDMData_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDMData_set,METH_VARARGS,oaIntAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDMData_tp_isNull,METH_VARARGS,oaIntAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDMData_tp_assign,METH_VARARGS,oaIntAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_doc[] = 
"Class: oaIntAppDef_oaDMData\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDMData)\n"
"    Calls: (const oaIntAppDef_oaDMData&)\n"
"    Signature: oaIntAppDef_oaDMData||cref-oaIntAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDMData",
    sizeof(PyoaIntAppDef_oaDMDataObject),
    0,
    (destructor)oaIntAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_static_find_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::find(p1.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMData_static_get_doc[] = 
"Class: oaIntAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMDatap result= (oaIntAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDMData_FromoaIntAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDMData_static_find,METH_VARARGS,oaIntAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDMData_static_get,METH_VARARGS,oaIntAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDMData",
           (PyObject*)(&PyoaIntAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDMData_Type.tp_dict;
    for(method=oaIntAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDMFileObject* self = (PyoaIntAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDMFile)
    {
        PyParamoaIntAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDMFile, Choices are:\n"
        "    (oaIntAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDMFile_tp_dealloc(PyoaIntAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDMFile value;
    int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDMFile v1;
    PyParamoaIntAppDef_oaDMFile v2;
    int convert_status1=PyoaIntAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaIntAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDMFile**) ((PyoaIntAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(oaIntAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDMFile_Type.tp_alloc(&PyoaIntAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDMFileObject* self = (PyoaIntAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(oaIntAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDMFile_Type.tp_alloc(&PyoaIntAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDMFileObject* self = (PyoaIntAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_get_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaInt4 get(const oaDMFile* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDMFile,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMFile data;
    int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMFileObject* self=(PyoaIntAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMFile data;
    int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMFileObject* self=(PyoaIntAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_set_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaInt4)\n"
"    Calls: void set(oaDMFile* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDMFile,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDMFile data;
    int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDMFileObject* self=(PyoaIntAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_isNull_doc[] =
"Class: oaIntAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDMFile data;
    int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDMFile_assign_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDMFile data;
  int convert_status=PyoaIntAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDMFile_get,METH_VARARGS,oaIntAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDMFile_getDefault,METH_VARARGS,oaIntAppDef_oaDMFile_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDMFile_set,METH_VARARGS,oaIntAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaIntAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDMFile_tp_assign,METH_VARARGS,oaIntAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_doc[] = 
"Class: oaIntAppDef_oaDMFile\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDMFile)\n"
"    Calls: (const oaIntAppDef_oaDMFile&)\n"
"    Signature: oaIntAppDef_oaDMFile||cref-oaIntAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDMFile",
    sizeof(PyoaIntAppDef_oaDMFileObject),
    0,
    (destructor)oaIntAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_static_find_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::find(p1.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDMFile_static_get_doc[] = 
"Class: oaIntAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDMFilep result= (oaIntAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDMFile_FromoaIntAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDMFile_static_find,METH_VARARGS,oaIntAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDMFile_static_get,METH_VARARGS,oaIntAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDMFile",
           (PyObject*)(&PyoaIntAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDMFile_Type.tp_dict;
    for(method=oaIntAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDerivedLayerParamObject* self = (PyoaIntAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDerivedLayerParam)
    {
        PyParamoaIntAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaIntAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDerivedLayerParam_tp_dealloc(PyoaIntAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaIntAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDerivedLayerParam v1;
    PyParamoaIntAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaIntAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDerivedLayerParam**) ((PyoaIntAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(oaIntAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaIntAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDerivedLayerParamObject* self = (PyoaIntAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(oaIntAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaIntAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDerivedLayerParamObject* self = (PyoaIntAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: oaInt4 get(const oaDerivedLayerParam* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDerivedLayerParam,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDerivedLayerParamObject* self=(PyoaIntAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDerivedLayerParamObject* self=(PyoaIntAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,oaInt4)\n"
"    Calls: void set(oaDerivedLayerParam* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDerivedLayerParamObject* self=(PyoaIntAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaIntAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaIntAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaIntAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaIntAppDef_oaDerivedLayerParam||cref-oaIntAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDerivedLayerParam",
    sizeof(PyoaIntAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaIntAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaIntAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDerivedLayerParamp result= (oaIntAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDerivedLayerParam_FromoaIntAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaIntAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaIntAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaIntAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDesignObject* self = (PyoaIntAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDesign)
    {
        PyParamoaIntAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDesign, Choices are:\n"
        "    (oaIntAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDesign_tp_dealloc(PyoaIntAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDesign value;
    int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDesign v1;
    PyParamoaIntAppDef_oaDesign v2;
    int convert_status1=PyoaIntAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDesign_Convert(PyObject* ob,PyParamoaIntAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDesign**) ((PyoaIntAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(oaIntAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDesign_Type.tp_alloc(&PyoaIntAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDesignObject* self = (PyoaIntAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(oaIntAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDesign_Type.tp_alloc(&PyoaIntAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDesignObject* self = (PyoaIntAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_get_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign)\n"
"    Calls: oaInt4 get(const oaDesign* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDesign,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesign data;
    int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignObject* self=(PyoaIntAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_getDefault_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesign data;
    int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignObject* self=(PyoaIntAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_set_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,oaInt4)\n"
"    Calls: void set(oaDesign* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDesign,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesign data;
    int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignObject* self=(PyoaIntAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_isNull_doc[] =
"Class: oaIntAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDesign data;
    int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDesign_assign_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDesign data;
  int convert_status=PyoaIntAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDesign_get,METH_VARARGS,oaIntAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDesign_getDefault,METH_VARARGS,oaIntAppDef_oaDesign_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDesign_set,METH_VARARGS,oaIntAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDesign_tp_isNull,METH_VARARGS,oaIntAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDesign_tp_assign,METH_VARARGS,oaIntAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_doc[] = 
"Class: oaIntAppDef_oaDesign\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDesign)\n"
"    Calls: (const oaIntAppDef_oaDesign&)\n"
"    Signature: oaIntAppDef_oaDesign||cref-oaIntAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDesign",
    sizeof(PyoaIntAppDef_oaDesignObject),
    0,
    (destructor)oaIntAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_static_find_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::find(p1.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesign_static_get_doc[] = 
"Class: oaIntAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignp result= (oaIntAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDesign_FromoaIntAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDesign_static_find,METH_VARARGS,oaIntAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDesign_static_get,METH_VARARGS,oaIntAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDesign",
           (PyObject*)(&PyoaIntAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDesign_Type.tp_dict;
    for(method=oaIntAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDesignInstObject* self = (PyoaIntAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDesignInst)
    {
        PyParamoaIntAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDesignInst, Choices are:\n"
        "    (oaIntAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDesignInst_tp_dealloc(PyoaIntAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDesignInst value;
    int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDesignInst v1;
    PyParamoaIntAppDef_oaDesignInst v2;
    int convert_status1=PyoaIntAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaIntAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDesignInst**) ((PyoaIntAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(oaIntAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDesignInst_Type.tp_alloc(&PyoaIntAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDesignInstObject* self = (PyoaIntAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(oaIntAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDesignInst_Type.tp_alloc(&PyoaIntAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDesignInstObject* self = (PyoaIntAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_get_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: oaInt4 get(const oaDesignInst* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDesignInst,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesignInst data;
    int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignInstObject* self=(PyoaIntAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesignInst data;
    int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignInstObject* self=(PyoaIntAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_set_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,oaInt4)\n"
"    Calls: void set(oaDesignInst* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDesignInst data;
    int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDesignInstObject* self=(PyoaIntAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_isNull_doc[] =
"Class: oaIntAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDesignInst data;
    int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDesignInst_assign_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDesignInst data;
  int convert_status=PyoaIntAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDesignInst_get,METH_VARARGS,oaIntAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDesignInst_getDefault,METH_VARARGS,oaIntAppDef_oaDesignInst_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDesignInst_set,METH_VARARGS,oaIntAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaIntAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaIntAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_doc[] = 
"Class: oaIntAppDef_oaDesignInst\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDesignInst)\n"
"    Calls: (const oaIntAppDef_oaDesignInst&)\n"
"    Signature: oaIntAppDef_oaDesignInst||cref-oaIntAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDesignInst",
    sizeof(PyoaIntAppDef_oaDesignInstObject),
    0,
    (destructor)oaIntAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::find(p1.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaIntAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDesignInstp result= (oaIntAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDesignInst_FromoaIntAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDesignInst_static_find,METH_VARARGS,oaIntAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDesignInst_static_get,METH_VARARGS,oaIntAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDesignInst",
           (PyObject*)(&PyoaIntAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaIntAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaDeviceObject* self = (PyoaIntAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaDevice)
    {
        PyParamoaIntAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaDevice, Choices are:\n"
        "    (oaIntAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaDevice_tp_dealloc(PyoaIntAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaDevice value;
    int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaDevice v1;
    PyParamoaIntAppDef_oaDevice v2;
    int convert_status1=PyoaIntAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaDevice_Convert(PyObject* ob,PyParamoaIntAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaIntAppDef_oaDevice**) ((PyoaIntAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(oaIntAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaIntAppDef_oaDevice_Type.tp_alloc(&PyoaIntAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaDeviceObject* self = (PyoaIntAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(oaIntAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaDevice_Type.tp_alloc(&PyoaIntAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaDeviceObject* self = (PyoaIntAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_get_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice)\n"
"    Calls: oaInt4 get(const oaDevice* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaDevice,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDevice data;
    int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDeviceObject* self=(PyoaIntAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_getDefault_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDevice data;
    int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDeviceObject* self=(PyoaIntAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_set_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,oaInt4)\n"
"    Calls: void set(oaDevice* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaDevice,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaDevice data;
    int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaDeviceObject* self=(PyoaIntAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_isNull_doc[] =
"Class: oaIntAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaDevice data;
    int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaDevice_assign_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaDevice data;
  int convert_status=PyoaIntAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaDevice_get,METH_VARARGS,oaIntAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaDevice_getDefault,METH_VARARGS,oaIntAppDef_oaDevice_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaDevice_set,METH_VARARGS,oaIntAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaDevice_tp_isNull,METH_VARARGS,oaIntAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaDevice_tp_assign,METH_VARARGS,oaIntAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_doc[] = 
"Class: oaIntAppDef_oaDevice\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaDevice)\n"
"    Calls: (const oaIntAppDef_oaDevice&)\n"
"    Signature: oaIntAppDef_oaDevice||cref-oaIntAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaDevice",
    sizeof(PyoaIntAppDef_oaDeviceObject),
    0,
    (destructor)oaIntAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_static_find_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::find(p1.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaDevice_static_get_doc[] = 
"Class: oaIntAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaDevicep result= (oaIntAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaDevice_FromoaIntAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaDevice_static_find,METH_VARARGS,oaIntAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaDevice_static_get,METH_VARARGS,oaIntAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaDevice",
           (PyObject*)(&PyoaIntAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaDevice_Type.tp_dict;
    for(method=oaIntAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaElmore
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaElmore_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaElmore_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaElmoreObject* self = (PyoaIntAppDef_oaElmoreObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaElmore)
    {
        PyParamoaIntAppDef_oaElmore p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaElmore_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaElmore, Choices are:\n"
        "    (oaIntAppDef_oaElmore)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaElmore_tp_dealloc(PyoaIntAppDef_oaElmoreObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaElmore_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaElmore value;
    int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaElmore::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaElmore_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaElmore v1;
    PyParamoaIntAppDef_oaElmore v2;
    int convert_status1=PyoaIntAppDef_oaElmore_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaElmore_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaElmore_Convert(PyObject* ob,PyParamoaIntAppDef_oaElmore* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaElmore_Check(ob)) {
        result->SetData( (oaIntAppDef_oaElmore**) ((PyoaIntAppDef_oaElmoreObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaElmore Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(oaIntAppDef_oaElmore** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaElmore* data=*value;
        PyObject* bself = PyoaIntAppDef_oaElmore_Type.tp_alloc(&PyoaIntAppDef_oaElmore_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaElmoreObject* self = (PyoaIntAppDef_oaElmoreObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(oaIntAppDef_oaElmore* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaElmore_Type.tp_alloc(&PyoaIntAppDef_oaElmore_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaElmoreObject* self = (PyoaIntAppDef_oaElmoreObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_get_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaElmore)\n"
"    Calls: oaInt4 get(const oaElmore* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaElmore,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaElmore_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaElmore data;
    int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaElmoreObject* self=(PyoaIntAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_getDefault_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaElmore_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaElmore data;
    int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaElmoreObject* self=(PyoaIntAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_set_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaElmore,oaInt4)\n"
"    Calls: void set(oaElmore* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaElmore,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaElmore_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaElmore data;
    int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaElmoreObject* self=(PyoaIntAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_isNull_doc[] =
"Class: oaIntAppDef_oaElmore, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaElmore_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaElmore data;
    int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaElmore_assign_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaElmore_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaElmore data;
  int convert_status=PyoaIntAppDef_oaElmore_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaElmore p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaElmore_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaElmore_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaElmore_get,METH_VARARGS,oaIntAppDef_oaElmore_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaElmore_getDefault,METH_VARARGS,oaIntAppDef_oaElmore_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaElmore_set,METH_VARARGS,oaIntAppDef_oaElmore_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaElmore_tp_isNull,METH_VARARGS,oaIntAppDef_oaElmore_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaElmore_tp_assign,METH_VARARGS,oaIntAppDef_oaElmore_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_doc[] = 
"Class: oaIntAppDef_oaElmore\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaElmore)\n"
"    Calls: (const oaIntAppDef_oaElmore&)\n"
"    Signature: oaIntAppDef_oaElmore||cref-oaIntAppDef_oaElmore,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaElmore_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaElmore",
    sizeof(PyoaIntAppDef_oaElmoreObject),
    0,
    (destructor)oaIntAppDef_oaElmore_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaElmore_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaElmore_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaElmore_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaElmore_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaElmore_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_static_find_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaElmore* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaElmore|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaElmore* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaElmore_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::find(p1.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaElmore, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaElmore_static_get_doc[] = 
"Class: oaIntAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaElmore_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaElmorep result= (oaIntAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaElmore_FromoaIntAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaElmore, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaElmore_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaElmore_static_find,METH_VARARGS,oaIntAppDef_oaElmore_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaElmore_static_get,METH_VARARGS,oaIntAppDef_oaElmore_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaElmore_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaElmore_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaElmore\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaElmore",
           (PyObject*)(&PyoaIntAppDef_oaElmore_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaElmore\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaElmore_Type.tp_dict;
    for(method=oaIntAppDef_oaElmore_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaFigGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFigGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaFigGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaFigGroupObject* self = (PyoaIntAppDef_oaFigGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaFigGroup)
    {
        PyParamoaIntAppDef_oaFigGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaFigGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaFigGroup, Choices are:\n"
        "    (oaIntAppDef_oaFigGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaFigGroup_tp_dealloc(PyoaIntAppDef_oaFigGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFigGroup_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaFigGroup value;
    int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaIntAppDef_oaFigGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaFigGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaFigGroup v1;
    PyParamoaIntAppDef_oaFigGroup v2;
    int convert_status1=PyoaIntAppDef_oaFigGroup_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaFigGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaFigGroup_Convert(PyObject* ob,PyParamoaIntAppDef_oaFigGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaFigGroup_Check(ob)) {
        result->SetData( (oaIntAppDef_oaFigGroup**) ((PyoaIntAppDef_oaFigGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaFigGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(oaIntAppDef_oaFigGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaFigGroup* data=*value;
        PyObject* bself = PyoaIntAppDef_oaFigGroup_Type.tp_alloc(&PyoaIntAppDef_oaFigGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaFigGroupObject* self = (PyoaIntAppDef_oaFigGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(oaIntAppDef_oaFigGroup* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaFigGroup_Type.tp_alloc(&PyoaIntAppDef_oaFigGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaFigGroupObject* self = (PyoaIntAppDef_oaFigGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_get_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: oaInt4 get(const oaFigGroup* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaFigGroup,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroup data;
    int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupObject* self=(PyoaIntAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_getDefault_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroup data;
    int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupObject* self=(PyoaIntAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_set_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaFigGroup,oaInt4)\n"
"    Calls: void set(oaFigGroup* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaFigGroup,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroup data;
    int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupObject* self=(PyoaIntAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_isNull_doc[] =
"Class: oaIntAppDef_oaFigGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaFigGroup data;
    int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaFigGroup_assign_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaFigGroup data;
  int convert_status=PyoaIntAppDef_oaFigGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaFigGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaFigGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaFigGroup_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaFigGroup_get,METH_VARARGS,oaIntAppDef_oaFigGroup_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaFigGroup_getDefault,METH_VARARGS,oaIntAppDef_oaFigGroup_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaFigGroup_set,METH_VARARGS,oaIntAppDef_oaFigGroup_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaFigGroup_tp_isNull,METH_VARARGS,oaIntAppDef_oaFigGroup_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaFigGroup_tp_assign,METH_VARARGS,oaIntAppDef_oaFigGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_doc[] = 
"Class: oaIntAppDef_oaFigGroup\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaFigGroup)\n"
"    Calls: (const oaIntAppDef_oaFigGroup&)\n"
"    Signature: oaIntAppDef_oaFigGroup||cref-oaIntAppDef_oaFigGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaFigGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaFigGroup",
    sizeof(PyoaIntAppDef_oaFigGroupObject),
    0,
    (destructor)oaIntAppDef_oaFigGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaFigGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaFigGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaFigGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaFigGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaFigGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_static_find_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFigGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaFigGroup|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFigGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::find(p1.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFigGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroup_static_get_doc[] = 
"Class: oaIntAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaFigGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupp result= (oaIntAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaFigGroup_FromoaIntAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFigGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaFigGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaFigGroup_static_find,METH_VARARGS,oaIntAppDef_oaFigGroup_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaFigGroup_static_get,METH_VARARGS,oaIntAppDef_oaFigGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaFigGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaFigGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaFigGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaFigGroup",
           (PyObject*)(&PyoaIntAppDef_oaFigGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaFigGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaFigGroup_Type.tp_dict;
    for(method=oaIntAppDef_oaFigGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaFigGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFigGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaFigGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaFigGroupMemObject* self = (PyoaIntAppDef_oaFigGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaFigGroupMem)
    {
        PyParamoaIntAppDef_oaFigGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaFigGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaFigGroupMem, Choices are:\n"
        "    (oaIntAppDef_oaFigGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaFigGroupMem_tp_dealloc(PyoaIntAppDef_oaFigGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFigGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaFigGroupMem value;
    int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaIntAppDef_oaFigGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaFigGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaFigGroupMem v1;
    PyParamoaIntAppDef_oaFigGroupMem v2;
    int convert_status1=PyoaIntAppDef_oaFigGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaFigGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaFigGroupMem_Convert(PyObject* ob,PyParamoaIntAppDef_oaFigGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaFigGroupMem_Check(ob)) {
        result->SetData( (oaIntAppDef_oaFigGroupMem**) ((PyoaIntAppDef_oaFigGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaFigGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(oaIntAppDef_oaFigGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaFigGroupMem* data=*value;
        PyObject* bself = PyoaIntAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaIntAppDef_oaFigGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaFigGroupMemObject* self = (PyoaIntAppDef_oaFigGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(oaIntAppDef_oaFigGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaIntAppDef_oaFigGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaFigGroupMemObject* self = (PyoaIntAppDef_oaFigGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_get_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: oaInt4 get(const oaFigGroupMem* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaFigGroupMem,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroupMem data;
    int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupMemObject* self=(PyoaIntAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_getDefault_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroupMem data;
    int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupMemObject* self=(PyoaIntAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_set_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaFigGroupMem,oaInt4)\n"
"    Calls: void set(oaFigGroupMem* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaFigGroupMem,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFigGroupMem data;
    int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFigGroupMemObject* self=(PyoaIntAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_isNull_doc[] =
"Class: oaIntAppDef_oaFigGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaFigGroupMem data;
    int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaFigGroupMem_assign_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaFigGroupMem data;
  int convert_status=PyoaIntAppDef_oaFigGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaFigGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaFigGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaFigGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaFigGroupMem_get,METH_VARARGS,oaIntAppDef_oaFigGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaFigGroupMem_getDefault,METH_VARARGS,oaIntAppDef_oaFigGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaFigGroupMem_set,METH_VARARGS,oaIntAppDef_oaFigGroupMem_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaFigGroupMem_tp_isNull,METH_VARARGS,oaIntAppDef_oaFigGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaFigGroupMem_tp_assign,METH_VARARGS,oaIntAppDef_oaFigGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaFigGroupMem)\n"
"    Calls: (const oaIntAppDef_oaFigGroupMem&)\n"
"    Signature: oaIntAppDef_oaFigGroupMem||cref-oaIntAppDef_oaFigGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaFigGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaFigGroupMem",
    sizeof(PyoaIntAppDef_oaFigGroupMemObject),
    0,
    (destructor)oaIntAppDef_oaFigGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaFigGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaFigGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaFigGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaFigGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaFigGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_static_find_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::find(p1.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFigGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFigGroupMem_static_get_doc[] = 
"Class: oaIntAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaFigGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFigGroupMemp result= (oaIntAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaFigGroupMem_FromoaIntAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFigGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaFigGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaFigGroupMem_static_find,METH_VARARGS,oaIntAppDef_oaFigGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaFigGroupMem_static_get,METH_VARARGS,oaIntAppDef_oaFigGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaFigGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaFigGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaFigGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaFigGroupMem",
           (PyObject*)(&PyoaIntAppDef_oaFigGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaFigGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaFigGroupMem_Type.tp_dict;
    for(method=oaIntAppDef_oaFigGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaFrame
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaFrame_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaFrameObject* self = (PyoaIntAppDef_oaFrameObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaFrame)
    {
        PyParamoaIntAppDef_oaFrame p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaFrame_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaFrame, Choices are:\n"
        "    (oaIntAppDef_oaFrame)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaFrame_tp_dealloc(PyoaIntAppDef_oaFrameObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFrame_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaFrame value;
    int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaFrame::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaFrame_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaFrame v1;
    PyParamoaIntAppDef_oaFrame v2;
    int convert_status1=PyoaIntAppDef_oaFrame_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaFrame_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaFrame_Convert(PyObject* ob,PyParamoaIntAppDef_oaFrame* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaFrame_Check(ob)) {
        result->SetData( (oaIntAppDef_oaFrame**) ((PyoaIntAppDef_oaFrameObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaFrame Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(oaIntAppDef_oaFrame** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaFrame* data=*value;
        PyObject* bself = PyoaIntAppDef_oaFrame_Type.tp_alloc(&PyoaIntAppDef_oaFrame_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaFrameObject* self = (PyoaIntAppDef_oaFrameObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(oaIntAppDef_oaFrame* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaFrame_Type.tp_alloc(&PyoaIntAppDef_oaFrame_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaFrameObject* self = (PyoaIntAppDef_oaFrameObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_get_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaFrame)\n"
"    Calls: oaInt4 get(const oaFrame* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaFrame,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFrame_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrame data;
    int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameObject* self=(PyoaIntAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_getDefault_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaFrame_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrame data;
    int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameObject* self=(PyoaIntAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_set_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaFrame,oaInt4)\n"
"    Calls: void set(oaFrame* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaFrame,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFrame_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrame data;
    int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameObject* self=(PyoaIntAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_isNull_doc[] =
"Class: oaIntAppDef_oaFrame, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaFrame_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaFrame data;
    int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaFrame_assign_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaFrame_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaFrame data;
  int convert_status=PyoaIntAppDef_oaFrame_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaFrame p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaFrame_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaFrame_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaFrame_get,METH_VARARGS,oaIntAppDef_oaFrame_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaFrame_getDefault,METH_VARARGS,oaIntAppDef_oaFrame_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaFrame_set,METH_VARARGS,oaIntAppDef_oaFrame_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaFrame_tp_isNull,METH_VARARGS,oaIntAppDef_oaFrame_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaFrame_tp_assign,METH_VARARGS,oaIntAppDef_oaFrame_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_doc[] = 
"Class: oaIntAppDef_oaFrame\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaFrame)\n"
"    Calls: (const oaIntAppDef_oaFrame&)\n"
"    Signature: oaIntAppDef_oaFrame||cref-oaIntAppDef_oaFrame,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaFrame_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaFrame",
    sizeof(PyoaIntAppDef_oaFrameObject),
    0,
    (destructor)oaIntAppDef_oaFrame_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaFrame_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaFrame_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaFrame_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaFrame_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaFrame_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_static_find_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFrame* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaFrame|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFrame* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaFrame_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::find(p1.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFrame, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrame_static_get_doc[] = 
"Class: oaIntAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaFrame_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFramep result= (oaIntAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaFrame_FromoaIntAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFrame, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaFrame_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaFrame_static_find,METH_VARARGS,oaIntAppDef_oaFrame_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaFrame_static_get,METH_VARARGS,oaIntAppDef_oaFrame_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaFrame_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaFrame_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaFrame\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaFrame",
           (PyObject*)(&PyoaIntAppDef_oaFrame_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaFrame\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaFrame_Type.tp_dict;
    for(method=oaIntAppDef_oaFrame_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaFrameInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFrameInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaFrameInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaFrameInstObject* self = (PyoaIntAppDef_oaFrameInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaFrameInst)
    {
        PyParamoaIntAppDef_oaFrameInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaFrameInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaFrameInst, Choices are:\n"
        "    (oaIntAppDef_oaFrameInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaFrameInst_tp_dealloc(PyoaIntAppDef_oaFrameInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaFrameInst_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaFrameInst value;
    int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaIntAppDef_oaFrameInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaFrameInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaFrameInst v1;
    PyParamoaIntAppDef_oaFrameInst v2;
    int convert_status1=PyoaIntAppDef_oaFrameInst_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaFrameInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaFrameInst_Convert(PyObject* ob,PyParamoaIntAppDef_oaFrameInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaFrameInst_Check(ob)) {
        result->SetData( (oaIntAppDef_oaFrameInst**) ((PyoaIntAppDef_oaFrameInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaFrameInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(oaIntAppDef_oaFrameInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaFrameInst* data=*value;
        PyObject* bself = PyoaIntAppDef_oaFrameInst_Type.tp_alloc(&PyoaIntAppDef_oaFrameInst_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaFrameInstObject* self = (PyoaIntAppDef_oaFrameInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(oaIntAppDef_oaFrameInst* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaFrameInst_Type.tp_alloc(&PyoaIntAppDef_oaFrameInst_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaFrameInstObject* self = (PyoaIntAppDef_oaFrameInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_get_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: oaInt4 get(const oaFrameInst* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaFrameInst,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrameInst data;
    int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameInstObject* self=(PyoaIntAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_getDefault_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrameInst data;
    int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameInstObject* self=(PyoaIntAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_set_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaFrameInst,oaInt4)\n"
"    Calls: void set(oaFrameInst* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaFrameInst,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaFrameInst data;
    int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaFrameInstObject* self=(PyoaIntAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_isNull_doc[] =
"Class: oaIntAppDef_oaFrameInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaFrameInst data;
    int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaFrameInst_assign_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaFrameInst data;
  int convert_status=PyoaIntAppDef_oaFrameInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaFrameInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaFrameInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaFrameInst_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaFrameInst_get,METH_VARARGS,oaIntAppDef_oaFrameInst_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaFrameInst_getDefault,METH_VARARGS,oaIntAppDef_oaFrameInst_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaFrameInst_set,METH_VARARGS,oaIntAppDef_oaFrameInst_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaFrameInst_tp_isNull,METH_VARARGS,oaIntAppDef_oaFrameInst_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaFrameInst_tp_assign,METH_VARARGS,oaIntAppDef_oaFrameInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_doc[] = 
"Class: oaIntAppDef_oaFrameInst\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaFrameInst)\n"
"    Calls: (const oaIntAppDef_oaFrameInst&)\n"
"    Signature: oaIntAppDef_oaFrameInst||cref-oaIntAppDef_oaFrameInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaFrameInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaFrameInst",
    sizeof(PyoaIntAppDef_oaFrameInstObject),
    0,
    (destructor)oaIntAppDef_oaFrameInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaFrameInst_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaFrameInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaFrameInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaFrameInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaFrameInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_static_find_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFrameInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaFrameInst|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFrameInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::find(p1.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFrameInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaFrameInst_static_get_doc[] = 
"Class: oaIntAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaFrameInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaFrameInstp result= (oaIntAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaFrameInst_FromoaIntAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaFrameInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaFrameInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaFrameInst_static_find,METH_VARARGS,oaIntAppDef_oaFrameInst_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaFrameInst_static_get,METH_VARARGS,oaIntAppDef_oaFrameInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaFrameInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaFrameInst_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaFrameInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaFrameInst",
           (PyObject*)(&PyoaIntAppDef_oaFrameInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaFrameInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaFrameInst_Type.tp_dict;
    for(method=oaIntAppDef_oaFrameInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaGCellPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGCellPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaGCellPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaGCellPatternObject* self = (PyoaIntAppDef_oaGCellPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaGCellPattern)
    {
        PyParamoaIntAppDef_oaGCellPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaGCellPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaGCellPattern, Choices are:\n"
        "    (oaIntAppDef_oaGCellPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaGCellPattern_tp_dealloc(PyoaIntAppDef_oaGCellPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGCellPattern_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaGCellPattern value;
    int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaIntAppDef_oaGCellPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaGCellPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaGCellPattern v1;
    PyParamoaIntAppDef_oaGCellPattern v2;
    int convert_status1=PyoaIntAppDef_oaGCellPattern_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaGCellPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaGCellPattern_Convert(PyObject* ob,PyParamoaIntAppDef_oaGCellPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaGCellPattern_Check(ob)) {
        result->SetData( (oaIntAppDef_oaGCellPattern**) ((PyoaIntAppDef_oaGCellPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaGCellPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(oaIntAppDef_oaGCellPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaGCellPattern* data=*value;
        PyObject* bself = PyoaIntAppDef_oaGCellPattern_Type.tp_alloc(&PyoaIntAppDef_oaGCellPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaGCellPatternObject* self = (PyoaIntAppDef_oaGCellPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(oaIntAppDef_oaGCellPattern* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaGCellPattern_Type.tp_alloc(&PyoaIntAppDef_oaGCellPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaGCellPatternObject* self = (PyoaIntAppDef_oaGCellPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_get_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: oaInt4 get(const oaGCellPattern* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaGCellPattern,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGCellPattern data;
    int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGCellPatternObject* self=(PyoaIntAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_getDefault_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGCellPattern data;
    int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGCellPatternObject* self=(PyoaIntAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_set_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaGCellPattern,oaInt4)\n"
"    Calls: void set(oaGCellPattern* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaGCellPattern,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGCellPattern data;
    int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGCellPatternObject* self=(PyoaIntAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_isNull_doc[] =
"Class: oaIntAppDef_oaGCellPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaGCellPattern data;
    int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaGCellPattern_assign_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaGCellPattern data;
  int convert_status=PyoaIntAppDef_oaGCellPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaGCellPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaGCellPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaGCellPattern_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaGCellPattern_get,METH_VARARGS,oaIntAppDef_oaGCellPattern_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaGCellPattern_getDefault,METH_VARARGS,oaIntAppDef_oaGCellPattern_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaGCellPattern_set,METH_VARARGS,oaIntAppDef_oaGCellPattern_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaGCellPattern_tp_isNull,METH_VARARGS,oaIntAppDef_oaGCellPattern_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaGCellPattern_tp_assign,METH_VARARGS,oaIntAppDef_oaGCellPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_doc[] = 
"Class: oaIntAppDef_oaGCellPattern\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaGCellPattern)\n"
"    Calls: (const oaIntAppDef_oaGCellPattern&)\n"
"    Signature: oaIntAppDef_oaGCellPattern||cref-oaIntAppDef_oaGCellPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaGCellPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaGCellPattern",
    sizeof(PyoaIntAppDef_oaGCellPatternObject),
    0,
    (destructor)oaIntAppDef_oaGCellPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaGCellPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaGCellPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaGCellPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaGCellPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaGCellPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_static_find_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGCellPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGCellPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::find(p1.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGCellPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGCellPattern_static_get_doc[] = 
"Class: oaIntAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaGCellPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGCellPatternp result= (oaIntAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaGCellPattern_FromoaIntAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGCellPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaGCellPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaGCellPattern_static_find,METH_VARARGS,oaIntAppDef_oaGCellPattern_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaGCellPattern_static_get,METH_VARARGS,oaIntAppDef_oaGCellPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaGCellPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaGCellPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaGCellPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaGCellPattern",
           (PyObject*)(&PyoaIntAppDef_oaGCellPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaGCellPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaGCellPattern_Type.tp_dict;
    for(method=oaIntAppDef_oaGCellPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaGroupObject* self = (PyoaIntAppDef_oaGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaGroup)
    {
        PyParamoaIntAppDef_oaGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaGroup, Choices are:\n"
        "    (oaIntAppDef_oaGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaGroup_tp_dealloc(PyoaIntAppDef_oaGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGroup_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaGroup value;
    int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaGroup v1;
    PyParamoaIntAppDef_oaGroup v2;
    int convert_status1=PyoaIntAppDef_oaGroup_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaGroup_Convert(PyObject* ob,PyParamoaIntAppDef_oaGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaGroup_Check(ob)) {
        result->SetData( (oaIntAppDef_oaGroup**) ((PyoaIntAppDef_oaGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(oaIntAppDef_oaGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaGroup* data=*value;
        PyObject* bself = PyoaIntAppDef_oaGroup_Type.tp_alloc(&PyoaIntAppDef_oaGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaGroupObject* self = (PyoaIntAppDef_oaGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(oaIntAppDef_oaGroup* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaGroup_Type.tp_alloc(&PyoaIntAppDef_oaGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaGroupObject* self = (PyoaIntAppDef_oaGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_get_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaGroup)\n"
"    Calls: oaInt4 get(const oaGroup* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaGroup,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroup data;
    int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupObject* self=(PyoaIntAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_getDefault_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroup data;
    int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupObject* self=(PyoaIntAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_set_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaGroup,oaInt4)\n"
"    Calls: void set(oaGroup* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaGroup,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroup data;
    int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupObject* self=(PyoaIntAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_isNull_doc[] =
"Class: oaIntAppDef_oaGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaGroup data;
    int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaGroup_assign_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaGroup data;
  int convert_status=PyoaIntAppDef_oaGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaGroup_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaGroup_get,METH_VARARGS,oaIntAppDef_oaGroup_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaGroup_getDefault,METH_VARARGS,oaIntAppDef_oaGroup_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaGroup_set,METH_VARARGS,oaIntAppDef_oaGroup_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaGroup_tp_isNull,METH_VARARGS,oaIntAppDef_oaGroup_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaGroup_tp_assign,METH_VARARGS,oaIntAppDef_oaGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_doc[] = 
"Class: oaIntAppDef_oaGroup\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaGroup)\n"
"    Calls: (const oaIntAppDef_oaGroup&)\n"
"    Signature: oaIntAppDef_oaGroup||cref-oaIntAppDef_oaGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaGroup",
    sizeof(PyoaIntAppDef_oaGroupObject),
    0,
    (destructor)oaIntAppDef_oaGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_static_find_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaGroup|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::find(p1.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroup_static_get_doc[] = 
"Class: oaIntAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupp result= (oaIntAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaGroup_FromoaIntAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaGroup_static_find,METH_VARARGS,oaIntAppDef_oaGroup_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaGroup_static_get,METH_VARARGS,oaIntAppDef_oaGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaGroup",
           (PyObject*)(&PyoaIntAppDef_oaGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaGroup_Type.tp_dict;
    for(method=oaIntAppDef_oaGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaGroupMember
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGroupMember_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaGroupMember_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaGroupMemberObject* self = (PyoaIntAppDef_oaGroupMemberObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaGroupMember)
    {
        PyParamoaIntAppDef_oaGroupMember p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaGroupMember_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaGroupMember, Choices are:\n"
        "    (oaIntAppDef_oaGroupMember)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaGroupMember_tp_dealloc(PyoaIntAppDef_oaGroupMemberObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGroupMember_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaGroupMember value;
    int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaIntAppDef_oaGroupMember::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaGroupMember_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaGroupMember v1;
    PyParamoaIntAppDef_oaGroupMember v2;
    int convert_status1=PyoaIntAppDef_oaGroupMember_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaGroupMember_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaGroupMember_Convert(PyObject* ob,PyParamoaIntAppDef_oaGroupMember* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaGroupMember_Check(ob)) {
        result->SetData( (oaIntAppDef_oaGroupMember**) ((PyoaIntAppDef_oaGroupMemberObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaGroupMember Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(oaIntAppDef_oaGroupMember** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaGroupMember* data=*value;
        PyObject* bself = PyoaIntAppDef_oaGroupMember_Type.tp_alloc(&PyoaIntAppDef_oaGroupMember_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaGroupMemberObject* self = (PyoaIntAppDef_oaGroupMemberObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(oaIntAppDef_oaGroupMember* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaGroupMember_Type.tp_alloc(&PyoaIntAppDef_oaGroupMember_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaGroupMemberObject* self = (PyoaIntAppDef_oaGroupMemberObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_get_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: oaInt4 get(const oaGroupMember* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaGroupMember,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroupMember data;
    int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupMemberObject* self=(PyoaIntAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_getDefault_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroupMember data;
    int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupMemberObject* self=(PyoaIntAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_set_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaGroupMember,oaInt4)\n"
"    Calls: void set(oaGroupMember* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaGroupMember,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGroupMember data;
    int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGroupMemberObject* self=(PyoaIntAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_isNull_doc[] =
"Class: oaIntAppDef_oaGroupMember, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaGroupMember data;
    int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaGroupMember_assign_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaGroupMember data;
  int convert_status=PyoaIntAppDef_oaGroupMember_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaGroupMember p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaGroupMember_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaGroupMember_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaGroupMember_get,METH_VARARGS,oaIntAppDef_oaGroupMember_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaGroupMember_getDefault,METH_VARARGS,oaIntAppDef_oaGroupMember_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaGroupMember_set,METH_VARARGS,oaIntAppDef_oaGroupMember_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaGroupMember_tp_isNull,METH_VARARGS,oaIntAppDef_oaGroupMember_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaGroupMember_tp_assign,METH_VARARGS,oaIntAppDef_oaGroupMember_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_doc[] = 
"Class: oaIntAppDef_oaGroupMember\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaGroupMember)\n"
"    Calls: (const oaIntAppDef_oaGroupMember&)\n"
"    Signature: oaIntAppDef_oaGroupMember||cref-oaIntAppDef_oaGroupMember,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaGroupMember_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaGroupMember",
    sizeof(PyoaIntAppDef_oaGroupMemberObject),
    0,
    (destructor)oaIntAppDef_oaGroupMember_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaGroupMember_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaGroupMember_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaGroupMember_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaGroupMember_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaGroupMember_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_static_find_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGroupMember* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaGroupMember|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGroupMember* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::find(p1.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGroupMember, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGroupMember_static_get_doc[] = 
"Class: oaIntAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaGroupMember_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGroupMemberp result= (oaIntAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaGroupMember_FromoaIntAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGroupMember, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaGroupMember_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaGroupMember_static_find,METH_VARARGS,oaIntAppDef_oaGroupMember_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaGroupMember_static_get,METH_VARARGS,oaIntAppDef_oaGroupMember_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaGroupMember_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaGroupMember_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaGroupMember\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaGroupMember",
           (PyObject*)(&PyoaIntAppDef_oaGroupMember_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaGroupMember\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaGroupMember_Type.tp_dict;
    for(method=oaIntAppDef_oaGroupMember_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaGuide
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGuide_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaGuide_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaGuideObject* self = (PyoaIntAppDef_oaGuideObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaGuide)
    {
        PyParamoaIntAppDef_oaGuide p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaGuide_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaGuide, Choices are:\n"
        "    (oaIntAppDef_oaGuide)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaGuide_tp_dealloc(PyoaIntAppDef_oaGuideObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaGuide_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaGuide value;
    int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaGuide::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaGuide_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaGuide v1;
    PyParamoaIntAppDef_oaGuide v2;
    int convert_status1=PyoaIntAppDef_oaGuide_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaGuide_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaGuide_Convert(PyObject* ob,PyParamoaIntAppDef_oaGuide* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaGuide_Check(ob)) {
        result->SetData( (oaIntAppDef_oaGuide**) ((PyoaIntAppDef_oaGuideObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaGuide Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(oaIntAppDef_oaGuide** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaGuide* data=*value;
        PyObject* bself = PyoaIntAppDef_oaGuide_Type.tp_alloc(&PyoaIntAppDef_oaGuide_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaGuideObject* self = (PyoaIntAppDef_oaGuideObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(oaIntAppDef_oaGuide* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaGuide_Type.tp_alloc(&PyoaIntAppDef_oaGuide_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaGuideObject* self = (PyoaIntAppDef_oaGuideObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_get_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaGuide)\n"
"    Calls: oaInt4 get(const oaGuide* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaGuide,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGuide_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGuide data;
    int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGuideObject* self=(PyoaIntAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_getDefault_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaGuide_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGuide data;
    int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGuideObject* self=(PyoaIntAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_set_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaGuide,oaInt4)\n"
"    Calls: void set(oaGuide* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaGuide,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaGuide_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaGuide data;
    int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaGuideObject* self=(PyoaIntAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_isNull_doc[] =
"Class: oaIntAppDef_oaGuide, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaGuide_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaGuide data;
    int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaGuide_assign_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaGuide_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaGuide data;
  int convert_status=PyoaIntAppDef_oaGuide_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaGuide p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaGuide_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaGuide_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaGuide_get,METH_VARARGS,oaIntAppDef_oaGuide_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaGuide_getDefault,METH_VARARGS,oaIntAppDef_oaGuide_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaGuide_set,METH_VARARGS,oaIntAppDef_oaGuide_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaGuide_tp_isNull,METH_VARARGS,oaIntAppDef_oaGuide_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaGuide_tp_assign,METH_VARARGS,oaIntAppDef_oaGuide_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_doc[] = 
"Class: oaIntAppDef_oaGuide\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaGuide)\n"
"    Calls: (const oaIntAppDef_oaGuide&)\n"
"    Signature: oaIntAppDef_oaGuide||cref-oaIntAppDef_oaGuide,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaGuide_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaGuide",
    sizeof(PyoaIntAppDef_oaGuideObject),
    0,
    (destructor)oaIntAppDef_oaGuide_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaGuide_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaGuide_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaGuide_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaGuide_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaGuide_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_static_find_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGuide* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaGuide|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGuide* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaGuide_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::find(p1.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGuide, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaGuide_static_get_doc[] = 
"Class: oaIntAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaGuide_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaGuidep result= (oaIntAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaGuide_FromoaIntAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaGuide, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaGuide_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaGuide_static_find,METH_VARARGS,oaIntAppDef_oaGuide_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaGuide_static_get,METH_VARARGS,oaIntAppDef_oaGuide_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaGuide_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaGuide_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaGuide\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaGuide",
           (PyObject*)(&PyoaIntAppDef_oaGuide_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaGuide\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaGuide_Type.tp_dict;
    for(method=oaIntAppDef_oaGuide_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaImage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaImage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaImage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaImageObject* self = (PyoaIntAppDef_oaImageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaImage)
    {
        PyParamoaIntAppDef_oaImage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaImage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaImage, Choices are:\n"
        "    (oaIntAppDef_oaImage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaImage_tp_dealloc(PyoaIntAppDef_oaImageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaImage_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaImage value;
    int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaImage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaImage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaImage v1;
    PyParamoaIntAppDef_oaImage v2;
    int convert_status1=PyoaIntAppDef_oaImage_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaImage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaImage_Convert(PyObject* ob,PyParamoaIntAppDef_oaImage* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaImage_Check(ob)) {
        result->SetData( (oaIntAppDef_oaImage**) ((PyoaIntAppDef_oaImageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaImage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(oaIntAppDef_oaImage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaImage* data=*value;
        PyObject* bself = PyoaIntAppDef_oaImage_Type.tp_alloc(&PyoaIntAppDef_oaImage_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaImageObject* self = (PyoaIntAppDef_oaImageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(oaIntAppDef_oaImage* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaImage_Type.tp_alloc(&PyoaIntAppDef_oaImage_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaImageObject* self = (PyoaIntAppDef_oaImageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_get_doc[] = 
"Class: oaIntAppDef_oaImage, Function: get\n"
"  Paramegers: (oaImage)\n"
"    Calls: oaInt4 get(const oaImage* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaImage,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaImage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaImage data;
    int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaImageObject* self=(PyoaIntAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_getDefault_doc[] = 
"Class: oaIntAppDef_oaImage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaImage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaImage data;
    int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaImageObject* self=(PyoaIntAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_set_doc[] = 
"Class: oaIntAppDef_oaImage, Function: set\n"
"  Paramegers: (oaImage,oaInt4)\n"
"    Calls: void set(oaImage* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaImage,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaImage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaImage data;
    int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaImageObject* self=(PyoaIntAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_isNull_doc[] =
"Class: oaIntAppDef_oaImage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaImage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaImage data;
    int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaImage_assign_doc[] = 
"Class: oaIntAppDef_oaImage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaImage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaImage data;
  int convert_status=PyoaIntAppDef_oaImage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaImage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaImage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaImage_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaImage_get,METH_VARARGS,oaIntAppDef_oaImage_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaImage_getDefault,METH_VARARGS,oaIntAppDef_oaImage_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaImage_set,METH_VARARGS,oaIntAppDef_oaImage_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaImage_tp_isNull,METH_VARARGS,oaIntAppDef_oaImage_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaImage_tp_assign,METH_VARARGS,oaIntAppDef_oaImage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_doc[] = 
"Class: oaIntAppDef_oaImage\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaImage)\n"
"    Calls: (const oaIntAppDef_oaImage&)\n"
"    Signature: oaIntAppDef_oaImage||cref-oaIntAppDef_oaImage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaImage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaImage",
    sizeof(PyoaIntAppDef_oaImageObject),
    0,
    (destructor)oaIntAppDef_oaImage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaImage_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaImage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaImage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaImage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaImage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_static_find_doc[] = 
"Class: oaIntAppDef_oaImage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaImage* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaImage|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaImage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaImage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::find(p1.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaImage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaImage_static_get_doc[] = 
"Class: oaIntAppDef_oaImage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaImage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaImagep result= (oaIntAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaImage_FromoaIntAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaImage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaImage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaImage_static_find,METH_VARARGS,oaIntAppDef_oaImage_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaImage_static_get,METH_VARARGS,oaIntAppDef_oaImage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaImage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaImage_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaImage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaImage",
           (PyObject*)(&PyoaIntAppDef_oaImage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaImage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaImage_Type.tp_dict;
    for(method=oaIntAppDef_oaImage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaInstObject* self = (PyoaIntAppDef_oaInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaInst)
    {
        PyParamoaIntAppDef_oaInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaInst, Choices are:\n"
        "    (oaIntAppDef_oaInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaInst_tp_dealloc(PyoaIntAppDef_oaInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInst_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaInst value;
    int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaIntAppDef_oaInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaInst v1;
    PyParamoaIntAppDef_oaInst v2;
    int convert_status1=PyoaIntAppDef_oaInst_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaInst_Convert(PyObject* ob,PyParamoaIntAppDef_oaInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaInst_Check(ob)) {
        result->SetData( (oaIntAppDef_oaInst**) ((PyoaIntAppDef_oaInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(oaIntAppDef_oaInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaInst* data=*value;
        PyObject* bself = PyoaIntAppDef_oaInst_Type.tp_alloc(&PyoaIntAppDef_oaInst_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaInstObject* self = (PyoaIntAppDef_oaInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(oaIntAppDef_oaInst* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaInst_Type.tp_alloc(&PyoaIntAppDef_oaInst_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaInstObject* self = (PyoaIntAppDef_oaInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_get_doc[] = 
"Class: oaIntAppDef_oaInst, Function: get\n"
"  Paramegers: (oaInst)\n"
"    Calls: oaInt4 get(const oaInst* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaInst,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInst data;
    int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstObject* self=(PyoaIntAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_getDefault_doc[] = 
"Class: oaIntAppDef_oaInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInst data;
    int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstObject* self=(PyoaIntAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_set_doc[] = 
"Class: oaIntAppDef_oaInst, Function: set\n"
"  Paramegers: (oaInst,oaInt4)\n"
"    Calls: void set(oaInst* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaInst,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInst data;
    int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstObject* self=(PyoaIntAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_isNull_doc[] =
"Class: oaIntAppDef_oaInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaInst data;
    int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaInst_assign_doc[] = 
"Class: oaIntAppDef_oaInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaInst data;
  int convert_status=PyoaIntAppDef_oaInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaInst_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaInst_get,METH_VARARGS,oaIntAppDef_oaInst_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaInst_getDefault,METH_VARARGS,oaIntAppDef_oaInst_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaInst_set,METH_VARARGS,oaIntAppDef_oaInst_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaInst_tp_isNull,METH_VARARGS,oaIntAppDef_oaInst_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaInst_tp_assign,METH_VARARGS,oaIntAppDef_oaInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_doc[] = 
"Class: oaIntAppDef_oaInst\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaInst)\n"
"    Calls: (const oaIntAppDef_oaInst&)\n"
"    Signature: oaIntAppDef_oaInst||cref-oaIntAppDef_oaInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaInst",
    sizeof(PyoaIntAppDef_oaInstObject),
    0,
    (destructor)oaIntAppDef_oaInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaInst_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_static_find_doc[] = 
"Class: oaIntAppDef_oaInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaInst|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::find(p1.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInst_static_get_doc[] = 
"Class: oaIntAppDef_oaInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstp result= (oaIntAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaInst_FromoaIntAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaInst_static_find,METH_VARARGS,oaIntAppDef_oaInst_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaInst_static_get,METH_VARARGS,oaIntAppDef_oaInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaInst_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaInst",
           (PyObject*)(&PyoaIntAppDef_oaInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaInst_Type.tp_dict;
    for(method=oaIntAppDef_oaInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaInstHeaderObject* self = (PyoaIntAppDef_oaInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaInstHeader)
    {
        PyParamoaIntAppDef_oaInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaInstHeader, Choices are:\n"
        "    (oaIntAppDef_oaInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaInstHeader_tp_dealloc(PyoaIntAppDef_oaInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaInstHeader value;
    int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaIntAppDef_oaInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaInstHeader v1;
    PyParamoaIntAppDef_oaInstHeader v2;
    int convert_status1=PyoaIntAppDef_oaInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaInstHeader_Convert(PyObject* ob,PyParamoaIntAppDef_oaInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaInstHeader_Check(ob)) {
        result->SetData( (oaIntAppDef_oaInstHeader**) ((PyoaIntAppDef_oaInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(oaIntAppDef_oaInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaInstHeader* data=*value;
        PyObject* bself = PyoaIntAppDef_oaInstHeader_Type.tp_alloc(&PyoaIntAppDef_oaInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaInstHeaderObject* self = (PyoaIntAppDef_oaInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(oaIntAppDef_oaInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaInstHeader_Type.tp_alloc(&PyoaIntAppDef_oaInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaInstHeaderObject* self = (PyoaIntAppDef_oaInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_get_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: oaInt4 get(const oaInstHeader* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaInstHeader,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstHeader data;
    int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstHeaderObject* self=(PyoaIntAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_getDefault_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstHeader data;
    int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstHeaderObject* self=(PyoaIntAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_set_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaInstHeader,oaInt4)\n"
"    Calls: void set(oaInstHeader* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaInstHeader,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstHeader data;
    int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstHeaderObject* self=(PyoaIntAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_isNull_doc[] =
"Class: oaIntAppDef_oaInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaInstHeader data;
    int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaInstHeader_assign_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaInstHeader data;
  int convert_status=PyoaIntAppDef_oaInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaInstHeader_get,METH_VARARGS,oaIntAppDef_oaInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaInstHeader_getDefault,METH_VARARGS,oaIntAppDef_oaInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaInstHeader_set,METH_VARARGS,oaIntAppDef_oaInstHeader_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaInstHeader_tp_isNull,METH_VARARGS,oaIntAppDef_oaInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaInstHeader_tp_assign,METH_VARARGS,oaIntAppDef_oaInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_doc[] = 
"Class: oaIntAppDef_oaInstHeader\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaInstHeader)\n"
"    Calls: (const oaIntAppDef_oaInstHeader&)\n"
"    Signature: oaIntAppDef_oaInstHeader||cref-oaIntAppDef_oaInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaInstHeader",
    sizeof(PyoaIntAppDef_oaInstHeaderObject),
    0,
    (destructor)oaIntAppDef_oaInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_static_find_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaInstHeader|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::find(p1.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstHeader_static_get_doc[] = 
"Class: oaIntAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstHeaderp result= (oaIntAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaInstHeader_FromoaIntAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaInstHeader_static_find,METH_VARARGS,oaIntAppDef_oaInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaInstHeader_static_get,METH_VARARGS,oaIntAppDef_oaInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaInstHeader",
           (PyObject*)(&PyoaIntAppDef_oaInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaInstHeader_Type.tp_dict;
    for(method=oaIntAppDef_oaInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaInstTermObject* self = (PyoaIntAppDef_oaInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaInstTerm)
    {
        PyParamoaIntAppDef_oaInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaInstTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaInstTerm, Choices are:\n"
        "    (oaIntAppDef_oaInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaInstTerm_tp_dealloc(PyoaIntAppDef_oaInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaInstTerm value;
    int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaIntAppDef_oaInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaInstTerm v1;
    PyParamoaIntAppDef_oaInstTerm v2;
    int convert_status1=PyoaIntAppDef_oaInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaInstTerm_Convert(PyObject* ob,PyParamoaIntAppDef_oaInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaInstTerm_Check(ob)) {
        result->SetData( (oaIntAppDef_oaInstTerm**) ((PyoaIntAppDef_oaInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(oaIntAppDef_oaInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaInstTerm* data=*value;
        PyObject* bself = PyoaIntAppDef_oaInstTerm_Type.tp_alloc(&PyoaIntAppDef_oaInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaInstTermObject* self = (PyoaIntAppDef_oaInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(oaIntAppDef_oaInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaInstTerm_Type.tp_alloc(&PyoaIntAppDef_oaInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaInstTermObject* self = (PyoaIntAppDef_oaInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_get_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: oaInt4 get(const oaInstTerm* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaInstTerm,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstTerm data;
    int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstTermObject* self=(PyoaIntAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_getDefault_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstTerm data;
    int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstTermObject* self=(PyoaIntAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_set_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaInstTerm,oaInt4)\n"
"    Calls: void set(oaInstTerm* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaInstTerm,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaInstTerm data;
    int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaInstTermObject* self=(PyoaIntAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_isNull_doc[] =
"Class: oaIntAppDef_oaInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaInstTerm data;
    int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaInstTerm_assign_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaInstTerm data;
  int convert_status=PyoaIntAppDef_oaInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaInstTerm_get,METH_VARARGS,oaIntAppDef_oaInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaInstTerm_getDefault,METH_VARARGS,oaIntAppDef_oaInstTerm_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaInstTerm_set,METH_VARARGS,oaIntAppDef_oaInstTerm_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaInstTerm_tp_isNull,METH_VARARGS,oaIntAppDef_oaInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaInstTerm_tp_assign,METH_VARARGS,oaIntAppDef_oaInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_doc[] = 
"Class: oaIntAppDef_oaInstTerm\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaInstTerm)\n"
"    Calls: (const oaIntAppDef_oaInstTerm&)\n"
"    Signature: oaIntAppDef_oaInstTerm||cref-oaIntAppDef_oaInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaInstTerm",
    sizeof(PyoaIntAppDef_oaInstTermObject),
    0,
    (destructor)oaIntAppDef_oaInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_static_find_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaInstTerm|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::find(p1.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaInstTerm_static_get_doc[] = 
"Class: oaIntAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaInstTermp result= (oaIntAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaInstTerm_FromoaIntAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaInstTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaInstTerm_static_find,METH_VARARGS,oaIntAppDef_oaInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaInstTerm_static_get,METH_VARARGS,oaIntAppDef_oaInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaInstTerm",
           (PyObject*)(&PyoaIntAppDef_oaInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaInstTerm_Type.tp_dict;
    for(method=oaIntAppDef_oaInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaLPPHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLPPHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaLPPHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaLPPHeaderObject* self = (PyoaIntAppDef_oaLPPHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaLPPHeader)
    {
        PyParamoaIntAppDef_oaLPPHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaLPPHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaLPPHeader, Choices are:\n"
        "    (oaIntAppDef_oaLPPHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaLPPHeader_tp_dealloc(PyoaIntAppDef_oaLPPHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLPPHeader_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaLPPHeader value;
    int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaIntAppDef_oaLPPHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaLPPHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaLPPHeader v1;
    PyParamoaIntAppDef_oaLPPHeader v2;
    int convert_status1=PyoaIntAppDef_oaLPPHeader_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaLPPHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaLPPHeader_Convert(PyObject* ob,PyParamoaIntAppDef_oaLPPHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaLPPHeader_Check(ob)) {
        result->SetData( (oaIntAppDef_oaLPPHeader**) ((PyoaIntAppDef_oaLPPHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaLPPHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(oaIntAppDef_oaLPPHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaLPPHeader* data=*value;
        PyObject* bself = PyoaIntAppDef_oaLPPHeader_Type.tp_alloc(&PyoaIntAppDef_oaLPPHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaLPPHeaderObject* self = (PyoaIntAppDef_oaLPPHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(oaIntAppDef_oaLPPHeader* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaLPPHeader_Type.tp_alloc(&PyoaIntAppDef_oaLPPHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaLPPHeaderObject* self = (PyoaIntAppDef_oaLPPHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_get_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: oaInt4 get(const oaLPPHeader* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaLPPHeader,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLPPHeader data;
    int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLPPHeaderObject* self=(PyoaIntAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_getDefault_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLPPHeader data;
    int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLPPHeaderObject* self=(PyoaIntAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_set_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaLPPHeader,oaInt4)\n"
"    Calls: void set(oaLPPHeader* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaLPPHeader,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLPPHeader data;
    int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLPPHeaderObject* self=(PyoaIntAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_isNull_doc[] =
"Class: oaIntAppDef_oaLPPHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaLPPHeader data;
    int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaLPPHeader_assign_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaLPPHeader data;
  int convert_status=PyoaIntAppDef_oaLPPHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaLPPHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaLPPHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaLPPHeader_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaLPPHeader_get,METH_VARARGS,oaIntAppDef_oaLPPHeader_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaLPPHeader_getDefault,METH_VARARGS,oaIntAppDef_oaLPPHeader_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaLPPHeader_set,METH_VARARGS,oaIntAppDef_oaLPPHeader_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaLPPHeader_tp_isNull,METH_VARARGS,oaIntAppDef_oaLPPHeader_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaLPPHeader_tp_assign,METH_VARARGS,oaIntAppDef_oaLPPHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_doc[] = 
"Class: oaIntAppDef_oaLPPHeader\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaLPPHeader)\n"
"    Calls: (const oaIntAppDef_oaLPPHeader&)\n"
"    Signature: oaIntAppDef_oaLPPHeader||cref-oaIntAppDef_oaLPPHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaLPPHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaLPPHeader",
    sizeof(PyoaIntAppDef_oaLPPHeaderObject),
    0,
    (destructor)oaIntAppDef_oaLPPHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaLPPHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaLPPHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaLPPHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaLPPHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaLPPHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_static_find_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLPPHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLPPHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::find(p1.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLPPHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLPPHeader_static_get_doc[] = 
"Class: oaIntAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaLPPHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLPPHeaderp result= (oaIntAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaLPPHeader_FromoaIntAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLPPHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaLPPHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaLPPHeader_static_find,METH_VARARGS,oaIntAppDef_oaLPPHeader_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaLPPHeader_static_get,METH_VARARGS,oaIntAppDef_oaLPPHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaLPPHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaLPPHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaLPPHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaLPPHeader",
           (PyObject*)(&PyoaIntAppDef_oaLPPHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaLPPHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaLPPHeader_Type.tp_dict;
    for(method=oaIntAppDef_oaLPPHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaLayer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLayer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaLayer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaLayerObject* self = (PyoaIntAppDef_oaLayerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaLayer)
    {
        PyParamoaIntAppDef_oaLayer p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaLayer_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaLayer, Choices are:\n"
        "    (oaIntAppDef_oaLayer)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaLayer_tp_dealloc(PyoaIntAppDef_oaLayerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLayer_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaLayer value;
    int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaIntAppDef_oaLayer::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaLayer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaLayer v1;
    PyParamoaIntAppDef_oaLayer v2;
    int convert_status1=PyoaIntAppDef_oaLayer_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaLayer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaLayer_Convert(PyObject* ob,PyParamoaIntAppDef_oaLayer* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaLayer_Check(ob)) {
        result->SetData( (oaIntAppDef_oaLayer**) ((PyoaIntAppDef_oaLayerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaLayer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(oaIntAppDef_oaLayer** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaLayer* data=*value;
        PyObject* bself = PyoaIntAppDef_oaLayer_Type.tp_alloc(&PyoaIntAppDef_oaLayer_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaLayerObject* self = (PyoaIntAppDef_oaLayerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(oaIntAppDef_oaLayer* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaLayer_Type.tp_alloc(&PyoaIntAppDef_oaLayer_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaLayerObject* self = (PyoaIntAppDef_oaLayerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_get_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: get\n"
"  Paramegers: (oaLayer)\n"
"    Calls: oaInt4 get(const oaLayer* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaLayer,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLayer_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayer data;
    int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerObject* self=(PyoaIntAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_getDefault_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaLayer_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayer data;
    int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerObject* self=(PyoaIntAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_set_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: set\n"
"  Paramegers: (oaLayer,oaInt4)\n"
"    Calls: void set(oaLayer* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaLayer,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLayer_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayer data;
    int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerObject* self=(PyoaIntAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayer p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_isNull_doc[] =
"Class: oaIntAppDef_oaLayer, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaLayer_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaLayer data;
    int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaLayer_assign_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaLayer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaLayer data;
  int convert_status=PyoaIntAppDef_oaLayer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaLayer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaLayer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaLayer_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaLayer_get,METH_VARARGS,oaIntAppDef_oaLayer_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaLayer_getDefault,METH_VARARGS,oaIntAppDef_oaLayer_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaLayer_set,METH_VARARGS,oaIntAppDef_oaLayer_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaLayer_tp_isNull,METH_VARARGS,oaIntAppDef_oaLayer_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaLayer_tp_assign,METH_VARARGS,oaIntAppDef_oaLayer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_doc[] = 
"Class: oaIntAppDef_oaLayer\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaLayer)\n"
"    Calls: (const oaIntAppDef_oaLayer&)\n"
"    Signature: oaIntAppDef_oaLayer||cref-oaIntAppDef_oaLayer,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaLayer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaLayer",
    sizeof(PyoaIntAppDef_oaLayerObject),
    0,
    (destructor)oaIntAppDef_oaLayer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaLayer_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaLayer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaLayer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaLayer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaLayer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_static_find_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLayer* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaLayer|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLayer* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaLayer_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::find(p1.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLayer, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayer_static_get_doc[] = 
"Class: oaIntAppDef_oaLayer, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaLayer_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerp result= (oaIntAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaLayer_FromoaIntAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLayer, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaLayer_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaLayer_static_find,METH_VARARGS,oaIntAppDef_oaLayer_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaLayer_static_get,METH_VARARGS,oaIntAppDef_oaLayer_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaLayer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaLayer_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaLayer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaLayer",
           (PyObject*)(&PyoaIntAppDef_oaLayer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaLayer\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaLayer_Type.tp_dict;
    for(method=oaIntAppDef_oaLayer_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaLayerHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLayerHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaLayerHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaLayerHeaderObject* self = (PyoaIntAppDef_oaLayerHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaLayerHeader)
    {
        PyParamoaIntAppDef_oaLayerHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaLayerHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaLayerHeader, Choices are:\n"
        "    (oaIntAppDef_oaLayerHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaLayerHeader_tp_dealloc(PyoaIntAppDef_oaLayerHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLayerHeader_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaLayerHeader value;
    int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaIntAppDef_oaLayerHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaLayerHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaLayerHeader v1;
    PyParamoaIntAppDef_oaLayerHeader v2;
    int convert_status1=PyoaIntAppDef_oaLayerHeader_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaLayerHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaLayerHeader_Convert(PyObject* ob,PyParamoaIntAppDef_oaLayerHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaLayerHeader_Check(ob)) {
        result->SetData( (oaIntAppDef_oaLayerHeader**) ((PyoaIntAppDef_oaLayerHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaLayerHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(oaIntAppDef_oaLayerHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaLayerHeader* data=*value;
        PyObject* bself = PyoaIntAppDef_oaLayerHeader_Type.tp_alloc(&PyoaIntAppDef_oaLayerHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaLayerHeaderObject* self = (PyoaIntAppDef_oaLayerHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(oaIntAppDef_oaLayerHeader* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaLayerHeader_Type.tp_alloc(&PyoaIntAppDef_oaLayerHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaLayerHeaderObject* self = (PyoaIntAppDef_oaLayerHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_get_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: get\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: oaInt4 get(const oaLayerHeader* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaLayerHeader,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayerHeader data;
    int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerHeaderObject* self=(PyoaIntAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_getDefault_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayerHeader data;
    int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerHeaderObject* self=(PyoaIntAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_set_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: set\n"
"  Paramegers: (oaLayerHeader,oaInt4)\n"
"    Calls: void set(oaLayerHeader* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaLayerHeader,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLayerHeader data;
    int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLayerHeaderObject* self=(PyoaIntAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerHeader p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_isNull_doc[] =
"Class: oaIntAppDef_oaLayerHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaLayerHeader data;
    int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaLayerHeader_assign_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaLayerHeader data;
  int convert_status=PyoaIntAppDef_oaLayerHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaLayerHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaLayerHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaLayerHeader_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaLayerHeader_get,METH_VARARGS,oaIntAppDef_oaLayerHeader_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaLayerHeader_getDefault,METH_VARARGS,oaIntAppDef_oaLayerHeader_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaLayerHeader_set,METH_VARARGS,oaIntAppDef_oaLayerHeader_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaLayerHeader_tp_isNull,METH_VARARGS,oaIntAppDef_oaLayerHeader_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaLayerHeader_tp_assign,METH_VARARGS,oaIntAppDef_oaLayerHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_doc[] = 
"Class: oaIntAppDef_oaLayerHeader\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaLayerHeader)\n"
"    Calls: (const oaIntAppDef_oaLayerHeader&)\n"
"    Signature: oaIntAppDef_oaLayerHeader||cref-oaIntAppDef_oaLayerHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaLayerHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaLayerHeader",
    sizeof(PyoaIntAppDef_oaLayerHeaderObject),
    0,
    (destructor)oaIntAppDef_oaLayerHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaLayerHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaLayerHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaLayerHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaLayerHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaLayerHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_static_find_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLayerHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLayerHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::find(p1.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLayerHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLayerHeader_static_get_doc[] = 
"Class: oaIntAppDef_oaLayerHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaLayerHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLayerHeaderp result= (oaIntAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaLayerHeader_FromoaIntAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLayerHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaLayerHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaLayerHeader_static_find,METH_VARARGS,oaIntAppDef_oaLayerHeader_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaLayerHeader_static_get,METH_VARARGS,oaIntAppDef_oaLayerHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaLayerHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaLayerHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaLayerHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaLayerHeader",
           (PyObject*)(&PyoaIntAppDef_oaLayerHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaLayerHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaLayerHeader_Type.tp_dict;
    for(method=oaIntAppDef_oaLayerHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaLib
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLib_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaLib_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaLibObject* self = (PyoaIntAppDef_oaLibObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaLib)
    {
        PyParamoaIntAppDef_oaLib p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaLib_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaLib, Choices are:\n"
        "    (oaIntAppDef_oaLib)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaLib_tp_dealloc(PyoaIntAppDef_oaLibObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaLib_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaLib value;
    int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[39];
    sprintf(buffer,"<oaIntAppDef_oaLib::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaLib_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaLib v1;
    PyParamoaIntAppDef_oaLib v2;
    int convert_status1=PyoaIntAppDef_oaLib_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaLib_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaLib_Convert(PyObject* ob,PyParamoaIntAppDef_oaLib* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaLib_Check(ob)) {
        result->SetData( (oaIntAppDef_oaLib**) ((PyoaIntAppDef_oaLibObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaLib Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(oaIntAppDef_oaLib** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaLib* data=*value;
        PyObject* bself = PyoaIntAppDef_oaLib_Type.tp_alloc(&PyoaIntAppDef_oaLib_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaLibObject* self = (PyoaIntAppDef_oaLibObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(oaIntAppDef_oaLib* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaLib_Type.tp_alloc(&PyoaIntAppDef_oaLib_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaLibObject* self = (PyoaIntAppDef_oaLibObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_get_doc[] = 
"Class: oaIntAppDef_oaLib, Function: get\n"
"  Paramegers: (oaLib)\n"
"    Calls: oaInt4 get(const oaLib* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaLib,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLib_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLib data;
    int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLibObject* self=(PyoaIntAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_getDefault_doc[] = 
"Class: oaIntAppDef_oaLib, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaLib_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLib data;
    int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLibObject* self=(PyoaIntAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_set_doc[] = 
"Class: oaIntAppDef_oaLib, Function: set\n"
"  Paramegers: (oaLib,oaInt4)\n"
"    Calls: void set(oaLib* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaLib,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaLib_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaLib data;
    int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaLibObject* self=(PyoaIntAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLib_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_isNull_doc[] =
"Class: oaIntAppDef_oaLib, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaLib_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaLib data;
    int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaLib_assign_doc[] = 
"Class: oaIntAppDef_oaLib, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaLib_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaLib data;
  int convert_status=PyoaIntAppDef_oaLib_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaLib p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaLib_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaLib_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaLib_get,METH_VARARGS,oaIntAppDef_oaLib_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaLib_getDefault,METH_VARARGS,oaIntAppDef_oaLib_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaLib_set,METH_VARARGS,oaIntAppDef_oaLib_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaLib_tp_isNull,METH_VARARGS,oaIntAppDef_oaLib_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaLib_tp_assign,METH_VARARGS,oaIntAppDef_oaLib_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_doc[] = 
"Class: oaIntAppDef_oaLib\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaLib)\n"
"    Calls: (const oaIntAppDef_oaLib&)\n"
"    Signature: oaIntAppDef_oaLib||cref-oaIntAppDef_oaLib,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaLib_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaLib",
    sizeof(PyoaIntAppDef_oaLibObject),
    0,
    (destructor)oaIntAppDef_oaLib_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaLib_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaLib_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaLib_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaLib_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaLib_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_static_find_doc[] = 
"Class: oaIntAppDef_oaLib, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLib* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaLib|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLib* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaLib_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::find(p1.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLib, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaLib_static_get_doc[] = 
"Class: oaIntAppDef_oaLib, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaLib_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaLibp result= (oaIntAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaLib_FromoaIntAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaLib, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaLib_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaLib_static_find,METH_VARARGS,oaIntAppDef_oaLib_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaLib_static_get,METH_VARARGS,oaIntAppDef_oaLib_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaLib_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaLib_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaLib\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaLib",
           (PyObject*)(&PyoaIntAppDef_oaLib_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaLib\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaLib_Type.tp_dict;
    for(method=oaIntAppDef_oaLib_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaMarker
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaMarker_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaMarker_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaMarkerObject* self = (PyoaIntAppDef_oaMarkerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaMarker)
    {
        PyParamoaIntAppDef_oaMarker p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaMarker_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaMarker, Choices are:\n"
        "    (oaIntAppDef_oaMarker)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaMarker_tp_dealloc(PyoaIntAppDef_oaMarkerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaMarker_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaMarker value;
    int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaIntAppDef_oaMarker::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaMarker_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaMarker v1;
    PyParamoaIntAppDef_oaMarker v2;
    int convert_status1=PyoaIntAppDef_oaMarker_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaMarker_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaMarker_Convert(PyObject* ob,PyParamoaIntAppDef_oaMarker* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaMarker_Check(ob)) {
        result->SetData( (oaIntAppDef_oaMarker**) ((PyoaIntAppDef_oaMarkerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaMarker Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(oaIntAppDef_oaMarker** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaMarker* data=*value;
        PyObject* bself = PyoaIntAppDef_oaMarker_Type.tp_alloc(&PyoaIntAppDef_oaMarker_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaMarkerObject* self = (PyoaIntAppDef_oaMarkerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(oaIntAppDef_oaMarker* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaMarker_Type.tp_alloc(&PyoaIntAppDef_oaMarker_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaMarkerObject* self = (PyoaIntAppDef_oaMarkerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_get_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaMarker)\n"
"    Calls: oaInt4 get(const oaMarker* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaMarker,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaMarker_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaMarker data;
    int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaMarkerObject* self=(PyoaIntAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_getDefault_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaMarker_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaMarker data;
    int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaMarkerObject* self=(PyoaIntAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_set_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaMarker,oaInt4)\n"
"    Calls: void set(oaMarker* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaMarker,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaMarker_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaMarker data;
    int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaMarkerObject* self=(PyoaIntAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_isNull_doc[] =
"Class: oaIntAppDef_oaMarker, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaMarker_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaMarker data;
    int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaMarker_assign_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaMarker_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaMarker data;
  int convert_status=PyoaIntAppDef_oaMarker_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaMarker p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaMarker_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaMarker_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaMarker_get,METH_VARARGS,oaIntAppDef_oaMarker_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaMarker_getDefault,METH_VARARGS,oaIntAppDef_oaMarker_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaMarker_set,METH_VARARGS,oaIntAppDef_oaMarker_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaMarker_tp_isNull,METH_VARARGS,oaIntAppDef_oaMarker_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaMarker_tp_assign,METH_VARARGS,oaIntAppDef_oaMarker_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_doc[] = 
"Class: oaIntAppDef_oaMarker\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaMarker)\n"
"    Calls: (const oaIntAppDef_oaMarker&)\n"
"    Signature: oaIntAppDef_oaMarker||cref-oaIntAppDef_oaMarker,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaMarker_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaMarker",
    sizeof(PyoaIntAppDef_oaMarkerObject),
    0,
    (destructor)oaIntAppDef_oaMarker_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaMarker_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaMarker_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaMarker_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaMarker_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaMarker_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_static_find_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaMarker* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaMarker|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaMarker* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaMarker_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::find(p1.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaMarker, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaMarker_static_get_doc[] = 
"Class: oaIntAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaMarker_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaMarkerp result= (oaIntAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaMarker_FromoaIntAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaMarker, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaMarker_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaMarker_static_find,METH_VARARGS,oaIntAppDef_oaMarker_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaMarker_static_get,METH_VARARGS,oaIntAppDef_oaMarker_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaMarker_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaMarker_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaMarker\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaMarker",
           (PyObject*)(&PyoaIntAppDef_oaMarker_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaMarker\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaMarker_Type.tp_dict;
    for(method=oaIntAppDef_oaMarker_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntAppDef_oaModAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaModAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntAppDef_oaModAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntAppDef_oaModAssignmentObject* self = (PyoaIntAppDef_oaModAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntAppDef_oaModAssignment)
    {
        PyParamoaIntAppDef_oaModAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntAppDef_oaModAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntAppDef_oaModAssignment, Choices are:\n"
        "    (oaIntAppDef_oaModAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntAppDef_oaModAssignment_tp_dealloc(PyoaIntAppDef_oaModAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntAppDef_oaModAssignment_tp_repr(PyObject *ob)
{
    PyParamoaIntAppDef_oaModAssignment value;
    int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaIntAppDef_oaModAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntAppDef_oaModAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntAppDef_oaModAssignment v1;
    PyParamoaIntAppDef_oaModAssignment v2;
    int convert_status1=PyoaIntAppDef_oaModAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaIntAppDef_oaModAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntAppDef_oaModAssignment_Convert(PyObject* ob,PyParamoaIntAppDef_oaModAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntAppDef_oaModAssignment_Check(ob)) {
        result->SetData( (oaIntAppDef_oaModAssignment**) ((PyoaIntAppDef_oaModAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntAppDef_oaModAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(oaIntAppDef_oaModAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntAppDef_oaModAssignment* data=*value;
        PyObject* bself = PyoaIntAppDef_oaModAssignment_Type.tp_alloc(&PyoaIntAppDef_oaModAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaIntAppDef_oaModAssignmentObject* self = (PyoaIntAppDef_oaModAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(oaIntAppDef_oaModAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaIntAppDef_oaModAssignment_Type.tp_alloc(&PyoaIntAppDef_oaModAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaIntAppDef_oaModAssignmentObject* self = (PyoaIntAppDef_oaModAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_get_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: oaInt4 get(const oaModAssignment* object)\n"
"    Signature: get|simple-oaInt4|cptr-oaModAssignment,\n"
"    This function returns the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaModAssignment data;
    int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaModAssignmentObject* self=(PyoaIntAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaInt4 result= (data.DataCall()->get(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_getDefault_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefault() const\n"
"    Signature: getDefault|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this integer extension.\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaModAssignment data;
    int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaModAssignmentObject* self=(PyoaIntAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefault());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_set_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaModAssignment,oaInt4)\n"
"    Calls: void set(oaModAssignment* object,oaInt4 value)\n"
"    Signature: set|void-void|ptr-oaModAssignment,simple-oaInt4,\n"
"    This function sets the value of this integer extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntAppDef_oaModAssignment data;
    int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntAppDef_oaModAssignmentObject* self=(PyoaIntAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_isNull_doc[] =
"Class: oaIntAppDef_oaModAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntAppDef_oaModAssignment data;
    int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntAppDef_oaModAssignment_assign_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntAppDef_oaModAssignment data;
  int convert_status=PyoaIntAppDef_oaModAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntAppDef_oaModAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntAppDef_oaModAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntAppDef_oaModAssignment_methodlist[] = {
    {"get",(PyCFunction)oaIntAppDef_oaModAssignment_get,METH_VARARGS,oaIntAppDef_oaModAssignment_get_doc},
    {"getDefault",(PyCFunction)oaIntAppDef_oaModAssignment_getDefault,METH_VARARGS,oaIntAppDef_oaModAssignment_getDefault_doc},
    {"set",(PyCFunction)oaIntAppDef_oaModAssignment_set,METH_VARARGS,oaIntAppDef_oaModAssignment_set_doc},
    {"isNull",(PyCFunction)oaIntAppDef_oaModAssignment_tp_isNull,METH_VARARGS,oaIntAppDef_oaModAssignment_isNull_doc},
    {"assign",(PyCFunction)oaIntAppDef_oaModAssignment_tp_assign,METH_VARARGS,oaIntAppDef_oaModAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_doc[] = 
"Class: oaIntAppDef_oaModAssignment\n"
"  The oaIntAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, an integer field is added to each object of the specified dataType. The default value for this extension is INT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntAppDef_oaModAssignment)\n"
"    Calls: (const oaIntAppDef_oaModAssignment&)\n"
"    Signature: oaIntAppDef_oaModAssignment||cref-oaIntAppDef_oaModAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntAppDef_oaModAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntAppDef_oaModAssignment",
    sizeof(PyoaIntAppDef_oaModAssignmentObject),
    0,
    (destructor)oaIntAppDef_oaModAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntAppDef_oaModAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaIntAppDef_oaModAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntAppDef_oaModAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntAppDef_oaModAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntAppDef_oaModAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_static_find_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaModAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntAppDef_oaModAssignment|cref-oaString,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaModAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::find(p1.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::find(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaModAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntAppDef_oaModAssignment_static_get_doc[] = 
"Class: oaIntAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name . You can create an integer extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
"    Calls: oaIntAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaInt4 defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaInt4,simple-oaBoolean,\n"
"    This function constructs an oaIntAppDef object, creating an integer extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaIntAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    persist\n"
"    Saves the oaIntAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntAppDef_oaModAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2)) {
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaInt4 p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaInt4_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaInt4,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaInt4 p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntAppDef_oaModAssignmentp result= (oaIntAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaIntAppDef_oaModAssignment_FromoaIntAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntAppDef_oaModAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaInt4)\n"
        "    (oaString,oaInt4,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaInt4)\n"
        "    (oaString,oaAppObjectDef,oaInt4,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntAppDef_oaModAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntAppDef_oaModAssignment_static_find,METH_VARARGS,oaIntAppDef_oaModAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaIntAppDef_oaModAssignment_static_get,METH_VARARGS,oaIntAppDef_oaModAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntAppDef_oaModAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntAppDef_oaModAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaIntAppDef_oaModAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntAppDef_oaModAssignment",
           (PyObject*)(&PyoaIntAppDef_oaModAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntAppDef_oaModAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntAppDef_oaModAssignment_Type.tp_dict;
    for(method=oaIntAppDef_oaModAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

