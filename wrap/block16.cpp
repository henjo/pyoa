
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDir
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDir_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDir_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDirObject* self = (PyoaDirObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value = (oaFSComponent*)  new oaDir(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaDir)
    {
        PyParamoaDir p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDir_Convert,&p1)) {
            self->value=(oaFSComponent*)  new oaDir(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDir, Choices are:\n"
        "    (oaString)\n"
        "    (oaDir)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDir_tp_dealloc(PyoaDirObject* self)
{
    if (!self->borrow) {
        delete (oaDir*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDir_tp_repr(PyObject *ob)
{
    PyParamoaDir value;
    int convert_status=PyoaDir_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[27];
    sprintf(buffer,"<oaDir::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDir_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDir v1;
    PyParamoaDir v2;
    int convert_status1=PyoaDir_Convert(ob1,&v1);
    int convert_status2=PyoaDir_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDir_Convert(PyObject* ob,PyParamoaDir* result)
{
    if (ob == NULL) return 1;
    if (PyoaDir_Check(ob)) {
        result->SetData( (oaDir*) ((PyoaDirObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDir Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDir_FromoaDir(oaDir* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaDir_Type.tp_alloc(&PyoaDir_Type,0);
        if (bself == NULL) return bself;
        PyoaDirObject* self = (PyoaDirObject*)bself;
        self->value = (oaFSComponent*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDir_create_doc[] = 
"Class: oaDir, Function: create\n"
"  Paramegers: ()\n"
"    Calls: void create() const\n"
"    Signature: create|void-void|\n"
"    BrowseData: 0\n"
"    This function creates the directory on disk. It assumes that the directory does not exist.\n"
"    oacDirCreateFailed\n"
;

static PyObject*
oaDir_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDir data;
    int convert_status=PyoaDir_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDirObject* self=(PyoaDirObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->create();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDir_exists_doc[] = 
"Class: oaDir, Function: exists\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean exists() const\n"
"    Signature: exists|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the file system object associated with the name exists on disk and is a directory.\n"
;

static PyObject*
oaDir_exists(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDir data;
    int convert_status=PyoaDir_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDirObject* self=(PyoaDirObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->exists());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDir_isCWD_doc[] = 
"Class: oaDir, Function: isCWD\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isCWD() const\n"
"    Signature: isCWD|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the directory is the current working directory.\n"
;

static PyObject*
oaDir_isCWD(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDir data;
    int convert_status=PyoaDir_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDirObject* self=(PyoaDirObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isCWD());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDir_isEmpty_doc[] = 
"Class: oaDir, Function: isEmpty\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isEmpty() const\n"
"    Signature: isEmpty|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if this directory does not contain any files or subdirectories.\n"
;

static PyObject*
oaDir_isEmpty(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDir data;
    int convert_status=PyoaDir_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDirObject* self=(PyoaDirObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isEmpty());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaDir_assign_doc[] = 
"Class: oaDir, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDir_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDir data;
  int convert_status=PyoaDir_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDir p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDir_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDir_methodlist[] = {
    {"create",(PyCFunction)oaDir_create,METH_VARARGS,oaDir_create_doc},
    {"exists",(PyCFunction)oaDir_exists,METH_VARARGS,oaDir_exists_doc},
    {"isCWD",(PyCFunction)oaDir_isCWD,METH_VARARGS,oaDir_isCWD_doc},
    {"isEmpty",(PyCFunction)oaDir_isEmpty,METH_VARARGS,oaDir_isEmpty_doc},
    {"assign",(PyCFunction)oaDir_tp_assign,METH_VARARGS,oaDir_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDir_doc[] = 
"Class: oaDir\n"
"  The oaDir utility class implements a class for managing a file system component that is a directory.\n"
"Constructors:\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDir(const oaString& nameIn)\n"
"    Signature: oaDir||cref-oaString,\n"
"    This is the constructor for the oaDir class.\n"
"    nameIn\n"
"    Path to the directory. The path may be relative to the current working directory, or a fully qualified path name.\n"
"  Paramegers: (oaDir)\n"
"    Calls: (const oaDir&)\n"
"    Signature: oaDir||cref-oaDir,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDir_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDir",
    sizeof(PyoaDirObject),
    0,
    (destructor)oaDir_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDir_tp_compare,	/* tp_compare */
    (reprfunc)oaDir_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDir_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDir_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaFSComponent_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDir_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDir_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDir_Type)<0) {
      printf("** PyType_Ready failed for: oaDir\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDir",
           (PyObject*)(&PyoaDir_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDir\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDirIter
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDirIter_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDirIter_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDirIterObject* self = (PyoaDirIterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaDirIter(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDirIterModeEnum)
    {
        PyParamoaString p1;
        PyParamoaDirIterModeEnum p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDirIterModeEnum_Convert,&p2)) {
            self->value =  new oaDirIter(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            self->value =  new oaDirIter(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaDirIterModeEnum)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaDirIterModeEnum p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaDirIterModeEnum_Convert,&p3)) {
            self->value =  new oaDirIter(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDirIter, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDirIterModeEnum)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaDirIterModeEnum)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDirIter_tp_dealloc(PyoaDirIterObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDirIter_tp_repr(PyObject *ob)
{
    PyParamoaDirIter value;
    int convert_status=PyoaDirIter_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[31];
    sprintf(buffer,"<oaDirIter::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDirIter_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDirIter v1;
    PyParamoaDirIter v2;
    int convert_status1=PyoaDirIter_Convert(ob1,&v1);
    int convert_status2=PyoaDirIter_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
static PyObject*
oaDirIter_getiter(PyObject *self)
{
    Py_INCREF(self);
    return self;
}

// ------------------------------------------------------------------
PyObject* oaDirIter_iternext(PyObject *self);

// ------------------------------------------------------------------
int
PyoaDirIter_Convert(PyObject* ob,PyParamoaDirIter* result)
{
    if (ob == NULL) return 1;
    if (PyoaDirIter_Check(ob)) {
        result->SetData(  ((PyoaDirIterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDirIter Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDirIter_FromoaDirIter(oaDirIter* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaDirIter_Type.tp_alloc(&PyoaDirIter_Type,0);
        if (bself == NULL) return bself;
        PyoaDirIterObject* self = (PyoaDirIterObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDirIter_getNext_doc[] = 
"Class: oaDirIter, Function: getNext\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean getNext()\n"
"    Signature: getNext|simple-oaBoolean|ref-oaString,\n"
"    BrowseData: 1\n"
"    This function returns the name of the next entry in the directory associated with this iterator. NULL is returned if all entries have been iterated. This function does not return the special directory entries \".\" and \"..\".\n"
"    Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"    name\n"
"    The name of the next entry.\n"
;

extern PyObject* oaDirIter_getNext(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char oaDirIter_next_doc[] = 
"Class: oaDirIter, Function: next\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean* next()\n"
"    Signature: next|ptr-oaBoolean|,\n"
"    BrowseData: 1\n"
"    get next value or raise StopIteration\n"
;

extern PyObject* oaDirIter_next(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char oaDirIter_reset_doc[] = 
"Class: oaDirIter, Function: reset\n"
"  Paramegers: ()\n"
"    Calls: void reset()\n"
"    Signature: reset|void-void|\n"
"    BrowseData: 0\n"
"    This function resets the iterator, causing it to starting iterating from the beginning of the directory list again.\n"
"    oacUnableToOpenDir\n"
;

static PyObject*
oaDirIter_reset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDirIter data;
    int convert_status=PyoaDirIter_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDirIterObject* self=(PyoaDirIterObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->reset();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaDirIter_assign_doc[] = 
"Class: oaDirIter, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDirIter_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDirIter data;
  int convert_status=PyoaDirIter_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDirIter p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDirIter_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDirIter_methodlist[] = {
    {"getNext",(PyCFunction)oaDirIter_getNext,METH_VARARGS,oaDirIter_getNext_doc},
    {"next",(PyCFunction)oaDirIter_next,METH_VARARGS,oaDirIter_next_doc},
    {"reset",(PyCFunction)oaDirIter_reset,METH_VARARGS,oaDirIter_reset_doc},
    {"assign",(PyCFunction)oaDirIter_tp_assign,METH_VARARGS,oaDirIter_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDirIter_doc[] = 
"Class: oaDirIter\n"
"  The oaDirIter utility class implements a general iterator for iterating the names of items in a directory. The oaDirIter may be customized by specifying the type of objects returned to be restricted to files (oacFilesDirIterMode), restricted to directories (oacDirsDirIterMode), or unrestricted (oacAllDirIterMode).\n"
"  Additionally, the user may optionally specify a wildcard string for name filtering.\n"
"  Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"Constructors:\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDirIter(const oaString& dirPathIn)\n"
"    Signature: oaDirIter||cref-oaString,simple-oaDirIterModeEnum,\n"
"    This is one of the constructors for the oaDirIter class. The user can specify whether to iterate over files, directories, or both according to the value of modeIn, as follows:\n"
"    oacFilesDirIterMode restrict iterator to files, oacDirsDirIterMode restrict iterator to directories oacAllDirIterMode unrestricted; iterate over both directories and files. This is the default mode.\n"
"    Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"    dirPathIn\n"
"    The directory to be iterated.\n"
"    modeIn\n"
"    The iteration mode (see above).\n"
"    oacUnableToOpenDir\n"
"  Paramegers: (oaString,oaDirIterModeEnum)\n"
"    Calls: oaDirIter(const oaString& dirPathIn,oaDirIterModeEnum modeIn)\n"
"    Signature: oaDirIter||cref-oaString,simple-oaDirIterModeEnum,\n"
"    This is one of the constructors for the oaDirIter class. The user can specify whether to iterate over files, directories, or both according to the value of modeIn, as follows:\n"
"    oacFilesDirIterMode restrict iterator to files, oacDirsDirIterMode restrict iterator to directories oacAllDirIterMode unrestricted; iterate over both directories and files. This is the default mode.\n"
"    Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"    dirPathIn\n"
"    The directory to be iterated.\n"
"    modeIn\n"
"    The iteration mode (see above).\n"
"    oacUnableToOpenDir\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaDirIter(const oaString& dirPathIn,const oaString& wildcardNameIn)\n"
"    Signature: oaDirIter||cref-oaString,cref-oaString,simple-oaDirIterModeEnum,\n"
"    As with the first version of the oaDirIter constructor above, this version allows the user to specify whether to iterate over files, directories, or both according to the value of modeIn, as follows:\n"
"    oacFilesDirIterMode restrict iterator to files oacDirsDirIterMode restrict iterator to directories oacAllDirIterMode unrestricted; iterate over both directories and files. This is the default mode.\n"
"    In addition, the user may optionally specify a string wildcard for name filtering.\n"
"    Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"    dirPathIn\n"
"    The directory to be iterated.\n"
"    wildcardNameIn\n"
"    The wildcard name, which is applied to files and subdirectories in the search path.\n"
"    modeIn\n"
"    The iteration mode.\n"
"    oacUnableToOpenDir\n"
"  Paramegers: (oaString,oaString,oaDirIterModeEnum)\n"
"    Calls: oaDirIter(const oaString& dirPathIn,const oaString& wildcardNameIn,oaDirIterModeEnum modeIn)\n"
"    Signature: oaDirIter||cref-oaString,cref-oaString,simple-oaDirIterModeEnum,\n"
"    As with the first version of the oaDirIter constructor above, this version allows the user to specify whether to iterate over files, directories, or both according to the value of modeIn, as follows:\n"
"    oacFilesDirIterMode restrict iterator to files oacDirsDirIterMode restrict iterator to directories oacAllDirIterMode unrestricted; iterate over both directories and files. This is the default mode.\n"
"    In addition, the user may optionally specify a string wildcard for name filtering.\n"
"    Note that the oaDirIter only returns names of file system objects, and has no direct connection with the oaFSComponent class objects.\n"
"    dirPathIn\n"
"    The directory to be iterated.\n"
"    wildcardNameIn\n"
"    The wildcard name, which is applied to files and subdirectories in the search path.\n"
"    modeIn\n"
"    The iteration mode.\n"
"    oacUnableToOpenDir\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDirIter_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDirIter",
    sizeof(PyoaDirIterObject),
    0,
    (destructor)oaDirIter_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDirIter_tp_compare,	/* tp_compare */
    (reprfunc)oaDirIter_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDirIter_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    (getiterfunc)oaDirIter_getiter,	/* tp_iter */
    (iternextfunc)oaDirIter_iternext,	/* tp_iternext */
    oaDirIter_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDirIter_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDirIter_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDirIter_Type)<0) {
      printf("** PyType_Ready failed for: oaDirIter\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDirIter",
           (PyObject*)(&PyoaDirIter_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDirIter\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDirIterModeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaDirIterModeEnum_Convert(PyObject* ob,PyParamoaDirIterModeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacFilesDirIterMode")==0) { result->SetData(oacFilesDirIterMode); return 1;}
        if (strcasecmp(str,"oacDirsDirIterMode")==0) { result->SetData(oacDirsDirIterMode); return 1;}
        if (strcasecmp(str,"oacAllDirIterMode")==0) { result->SetData(oacAllDirIterMode); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaDirIterModeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDirIterModeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaDirIterModeEnum_FromoaDirIterModeEnum(oaDirIterModeEnum ob)
{
    if (ob==oacFilesDirIterMode) return PyString_FromString("oacFilesDirIterMode");
    if (ob==oacDirsDirIterMode) return PyString_FromString("oacDirsDirIterMode");
    if (ob==oacAllDirIterMode) return PyString_FromString("oacAllDirIterMode");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaDirIterModeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaDirIterModeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaDirIterModeEnum_FromoaDirIterModeEnum(oaDirIterModeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaDirIterModeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaDirIterModeEnum_doc[] =
"Type convert function for enum: oaDirIterModeEnum";
                               
static PyMethodDef PyoaDirIterModeEnum_method =
  {"oaDirIterModeEnum",(PyCFunction)PyoaDirIterModeEnum_TypeFunction,METH_VARARGS,oaDirIterModeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaDirIterModeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacFilesDirIterMode");
    PyDict_SetItemString(mod_dict,"oacFilesDirIterMode",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDirsDirIterMode");
    PyDict_SetItemString(mod_dict,"oacDirsDirIterMode",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAllDirIterMode");
    PyDict_SetItemString(mod_dict,"oacAllDirIterMode",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaDirIterModeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaDirIterModeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaDirIterModeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDistanceMeasureType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDistanceMeasureType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDistanceMeasureType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDistanceMeasureTypeObject* self = (PyoaDistanceMeasureTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDistanceMeasureTypeEnum)
    {
        PyParamoaDistanceMeasureTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaDistanceMeasureTypeEnum_Convert,&p1)) {
            self->value =  new oaDistanceMeasureType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaDistanceMeasureType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaDistanceMeasureType)
    {
        PyParamoaDistanceMeasureType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDistanceMeasureType_Convert,&p1)) {
            self->value= new oaDistanceMeasureType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDistanceMeasureType, Choices are:\n"
        "    (oaDistanceMeasureTypeEnum)\n"
        "    (oaString)\n"
        "    (oaDistanceMeasureType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDistanceMeasureType_tp_dealloc(PyoaDistanceMeasureTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDistanceMeasureType_tp_repr(PyObject *ob)
{
    PyParamoaDistanceMeasureType value;
    int convert_status=PyoaDistanceMeasureType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[43];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaDistanceMeasureType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDistanceMeasureType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDistanceMeasureType v1;
    PyParamoaDistanceMeasureType v2;
    int convert_status1=PyoaDistanceMeasureType_Convert(ob1,&v1);
    int convert_status2=PyoaDistanceMeasureType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDistanceMeasureType_Convert(PyObject* ob,PyParamoaDistanceMeasureType* result)
{
    if (ob == NULL) return 1;
    if (PyoaDistanceMeasureType_Check(ob)) {
        result->SetData(  ((PyoaDistanceMeasureTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDistanceMeasureType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDistanceMeasureType_FromoaDistanceMeasureType(oaDistanceMeasureType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaDistanceMeasureType_Type.tp_alloc(&PyoaDistanceMeasureType_Type,0);
        if (bself == NULL) return bself;
        PyoaDistanceMeasureTypeObject* self = (PyoaDistanceMeasureTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDistanceMeasureType_getName_doc[] = 
"Class: oaDistanceMeasureType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the string name that corresponds to the oaDistanceMeasureTypeEnum value represented by this oaDistanceMeasureType.\n"
;

static PyObject*
oaDistanceMeasureType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDistanceMeasureType data;
    int convert_status=PyoaDistanceMeasureType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDistanceMeasureTypeObject* self=(PyoaDistanceMeasureTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDistanceMeasureType_oaDistanceMeasureTypeEnum_doc[] = 
"Class: oaDistanceMeasureType, Function: oaDistanceMeasureTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaDistanceMeasureTypeEnum oaDistanceMeasureTypeEnum() const\n"
"    Signature: operator oaDistanceMeasureTypeEnum|simple-oaDistanceMeasureTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator recasts this oaDistanceMeasureType to the oaDistanceMeasureTypeEnum value it represents.\n"
;

static PyObject*
oaDistanceMeasureType_oaDistanceMeasureTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDistanceMeasureType data;
    int convert_status=PyoaDistanceMeasureType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDistanceMeasureTypeObject* self=(PyoaDistanceMeasureTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaDistanceMeasureTypeEnum result= (data.DataCall()->operator oaDistanceMeasureTypeEnum());
        return PyoaDistanceMeasureTypeEnum_FromoaDistanceMeasureTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaDistanceMeasureType_assign_doc[] = 
"Class: oaDistanceMeasureType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDistanceMeasureType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDistanceMeasureType data;
  int convert_status=PyoaDistanceMeasureType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDistanceMeasureType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDistanceMeasureType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDistanceMeasureType_methodlist[] = {
    {"getName",(PyCFunction)oaDistanceMeasureType_getName,METH_VARARGS,oaDistanceMeasureType_getName_doc},
    {"oaDistanceMeasureTypeEnum",(PyCFunction)oaDistanceMeasureType_oaDistanceMeasureTypeEnum,METH_VARARGS,oaDistanceMeasureType_oaDistanceMeasureTypeEnum_doc},
    {"assign",(PyCFunction)oaDistanceMeasureType_tp_assign,METH_VARARGS,oaDistanceMeasureType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDistanceMeasureType_doc[] = 
"Class: oaDistanceMeasureType\n"
"  oaDistanceMeasureTypeEnum\n"
"  The oaDistanceMeasureType class is an enum wrapper class for oaDistanceMeasureTypeEnum values.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"Constructors:\n"
"  Paramegers: (oaDistanceMeasureTypeEnum)\n"
"    Calls: oaDistanceMeasureType(oaDistanceMeasureTypeEnum valueIn)\n"
"    Signature: oaDistanceMeasureType||simple-oaDistanceMeasureTypeEnum,\n"
"    This constructor for the oaDistanceMeasureType wrapper class takes an oaDistanceMeasureTypeEnum value.\n"
"    valueIn\n"
"    An oaDistanceMeasureTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDistanceMeasureType(const oaString& name)\n"
"    Signature: oaDistanceMeasureType||cref-oaString,\n"
"    This constructor for oaDistanceMeasureType wrapper class takes the oaString name of an oaDistanceMeasureTypeEnum value as input.\n"
"    name\n"
"    The oaString name of an oaDistanceMeasureTypeEnum value.\n"
"    oacInvalidDistanceMeasureTypeName\n"
"  Paramegers: (oaDistanceMeasureType)\n"
"    Calls: (const oaDistanceMeasureType&)\n"
"    Signature: oaDistanceMeasureType||cref-oaDistanceMeasureType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDistanceMeasureType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDistanceMeasureType",
    sizeof(PyoaDistanceMeasureTypeObject),
    0,
    (destructor)oaDistanceMeasureType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDistanceMeasureType_tp_compare,	/* tp_compare */
    (reprfunc)oaDistanceMeasureType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDistanceMeasureType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDistanceMeasureType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDistanceMeasureType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDistanceMeasureType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDistanceMeasureType_Type)<0) {
      printf("** PyType_Ready failed for: oaDistanceMeasureType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDistanceMeasureType",
           (PyObject*)(&PyoaDistanceMeasureType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDistanceMeasureType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDistanceMeasureTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaDistanceMeasureTypeEnum_Convert(PyObject* ob,PyParamoaDistanceMeasureTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacEuclidianDistanceMeasureType")==0) { result->SetData(oacEuclidianDistanceMeasureType); return 1;}
        if (strcasecmp(str,"oacManhattanDistanceMeasureType")==0) { result->SetData(oacManhattanDistanceMeasureType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaDistanceMeasureTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDistanceMeasureTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaDistanceMeasureTypeEnum_FromoaDistanceMeasureTypeEnum(oaDistanceMeasureTypeEnum ob)
{
    if (ob==oacEuclidianDistanceMeasureType) return PyString_FromString("oacEuclidianDistanceMeasureType");
    if (ob==oacManhattanDistanceMeasureType) return PyString_FromString("oacManhattanDistanceMeasureType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaDistanceMeasureTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaDistanceMeasureTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaDistanceMeasureTypeEnum_FromoaDistanceMeasureTypeEnum(oaDistanceMeasureTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaDistanceMeasureTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaDistanceMeasureTypeEnum_doc[] =
"Type convert function for enum: oaDistanceMeasureTypeEnum";
                               
static PyMethodDef PyoaDistanceMeasureTypeEnum_method =
  {"oaDistanceMeasureTypeEnum",(PyCFunction)PyoaDistanceMeasureTypeEnum_TypeFunction,METH_VARARGS,oaDistanceMeasureTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaDistanceMeasureTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacEuclidianDistanceMeasureType");
    PyDict_SetItemString(mod_dict,"oacEuclidianDistanceMeasureType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacManhattanDistanceMeasureType");
    PyDict_SetItemString(mod_dict,"oacManhattanDistanceMeasureType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaDistanceMeasureTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaDistanceMeasureTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaDistanceMeasureTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDomain
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDomain_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDomain_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDomainObject* self = (PyoaDomainObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDomainEnum)
    {
        PyParamoaDomainEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaDomainEnum_Convert,&p1)) {
            self->value =  new oaDomain(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaDomain(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaDomain)
    {
        PyParamoaDomain p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDomain_Convert,&p1)) {
            self->value= new oaDomain(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDomain, Choices are:\n"
        "    (oaDomainEnum)\n"
        "    (oaString)\n"
        "    (oaDomain)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDomain_tp_dealloc(PyoaDomainObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDomain_tp_repr(PyObject *ob)
{
    PyParamoaDomain value;
    int convert_status=PyoaDomain_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[30];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaDomain::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDomain_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDomain v1;
    PyParamoaDomain v2;
    int convert_status1=PyoaDomain_Convert(ob1,&v1);
    int convert_status2=PyoaDomain_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDomain_Convert(PyObject* ob,PyParamoaDomain* result)
{
    if (ob == NULL) return 1;
    if (PyoaDomain_Check(ob)) {
        result->SetData(  ((PyoaDomainObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDomain Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDomain_FromoaDomain(oaDomain* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaDomain_Type.tp_alloc(&PyoaDomain_Type,0);
        if (bself == NULL) return bself;
        PyoaDomainObject* self = (PyoaDomainObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDomain_getName_doc[] = 
"Class: oaDomain, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaDomainEnum object.\n"
;

static PyObject*
oaDomain_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDomain data;
    int convert_status=PyoaDomain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDomainObject* self=(PyoaDomainObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDomain_oaDomainEnum_doc[] = 
"Class: oaDomain, Function: oaDomainEnum\n"
"  Paramegers: ()\n"
"    Calls: oaDomainEnum oaDomainEnum() const\n"
"    Signature: operator oaDomainEnum|simple-oaDomainEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaDomain object into the corresponding #oaDomainEnum value.\n"
;

static PyObject*
oaDomain_oaDomainEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDomain data;
    int convert_status=PyoaDomain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDomainObject* self=(PyoaDomainObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaDomainEnum result= (data.DataCall()->operator oaDomainEnum());
        return PyoaDomainEnum_FromoaDomainEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaDomain_assign_doc[] = 
"Class: oaDomain, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDomain_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDomain data;
  int convert_status=PyoaDomain_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDomain p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDomain_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDomain_methodlist[] = {
    {"getName",(PyCFunction)oaDomain_getName,METH_VARARGS,oaDomain_getName_doc},
    {"oaDomainEnum",(PyCFunction)oaDomain_oaDomainEnum,METH_VARARGS,oaDomain_oaDomainEnum_doc},
    {"assign",(PyCFunction)oaDomain_tp_assign,METH_VARARGS,oaDomain_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDomain_doc[] = 
"Class: oaDomain\n"
"  The oaDomain class is an enum wrapper that indicates which hierarchy domain a managed object is in. See oaObject::getDomain for one usage. See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  Each database object has a domain value, which may be none (oacNoDomain). The domain is an inherent attribute of an object and may not be set by the user.\n"
"  Objects in the design database may in the block domain (oacBlockDomain), which represents physical hierarchy, the module domain (oacModDomain), which represents logical hierarchy, the occurrence domain (oacOccDomain), which contains the occurrence hierarchy, or no domain (oacNoDomain). Objects belonging to databases other than the design database have no domain.\n"
"  oaDomainEnum\n"
"Constructors:\n"
"  Paramegers: (oaDomainEnum)\n"
"    Calls: oaDomain(oaDomainEnum valueIn)\n"
"    Signature: oaDomain||simple-oaDomainEnum,\n"
"    This function constructs an instance of an oaDomain class using the specified #oaDomainEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDomain(const oaString& name)\n"
"    Signature: oaDomain||cref-oaString,\n"
"    This function constructs an instance of an oaDomain class using the #oaDomainEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaDomainEnum.\n"
"    oacInvalidDomainName\n"
"  Paramegers: (oaDomain)\n"
"    Calls: (const oaDomain&)\n"
"    Signature: oaDomain||cref-oaDomain,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDomain_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDomain",
    sizeof(PyoaDomainObject),
    0,
    (destructor)oaDomain_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDomain_tp_compare,	/* tp_compare */
    (reprfunc)oaDomain_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDomain_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDomain_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDomain_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDomain_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDomain_Type)<0) {
      printf("** PyType_Ready failed for: oaDomain\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDomain",
           (PyObject*)(&PyoaDomain_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDomain\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDomainEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaDomainEnum_Convert(PyObject* ob,PyParamoaDomainEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacFutureDomain")==0) { result->SetData(oacFutureDomain); return 1;}
        if (strcasecmp(str,"oacNoDomain")==0) { result->SetData(oacNoDomain); return 1;}
        if (strcasecmp(str,"oacBlockDomain")==0) { result->SetData(oacBlockDomain); return 1;}
        if (strcasecmp(str,"oacOccDomain")==0) { result->SetData(oacOccDomain); return 1;}
        if (strcasecmp(str,"oacModDomain")==0) { result->SetData(oacModDomain); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaDomainEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDomainEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaDomainEnum_FromoaDomainEnum(oaDomainEnum ob)
{
    if (ob==oacFutureDomain) return PyString_FromString("oacFutureDomain");
    if (ob==oacNoDomain) return PyString_FromString("oacNoDomain");
    if (ob==oacBlockDomain) return PyString_FromString("oacBlockDomain");
    if (ob==oacOccDomain) return PyString_FromString("oacOccDomain");
    if (ob==oacModDomain) return PyString_FromString("oacModDomain");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaDomainEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaDomainEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaDomainEnum_FromoaDomainEnum(oaDomainEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaDomainEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaDomainEnum_doc[] =
"Type convert function for enum: oaDomainEnum";
                               
static PyMethodDef PyoaDomainEnum_method =
  {"oaDomainEnum",(PyCFunction)PyoaDomainEnum_TypeFunction,METH_VARARGS,oaDomainEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaDomainEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacFutureDomain");
    PyDict_SetItemString(mod_dict,"oacFutureDomain",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNoDomain");
    PyDict_SetItemString(mod_dict,"oacNoDomain",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBlockDomain");
    PyDict_SetItemString(mod_dict,"oacBlockDomain",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccDomain");
    PyDict_SetItemString(mod_dict,"oacOccDomain",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModDomain");
    PyDict_SetItemString(mod_dict,"oacModDomain",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaDomainEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaDomainEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaDomainEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDonut
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDonut_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDonut_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDonutObject* self = (PyoaDonutObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDonut)
    {
        PyParamoaDonut p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDonut_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDonut, Choices are:\n"
        "    (oaDonut)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDonut_tp_dealloc(PyoaDonutObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDonut_tp_repr(PyObject *ob)
{
    PyParamoaDonut value;
    int convert_status=PyoaDonut_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[29];
    sprintf(buffer,"<oaDonut::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDonut_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDonut v1;
    PyParamoaDonut v2;
    int convert_status1=PyoaDonut_Convert(ob1,&v1);
    int convert_status2=PyoaDonut_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDonut_Convert(PyObject* ob,PyParamoaDonut* result)
{
    if (ob == NULL) return 1;
    if (PyoaDonut_Check(ob)) {
        result->SetData( (oaDonut**) ((PyoaDonutObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDonut Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDonut_FromoaDonut(oaDonut** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDonut* data=*value;
        PyObject* bself = PyoaDonut_Type.tp_alloc(&PyoaDonut_Type,0);
        if (bself == NULL) return bself;
        PyoaDonutObject* self = (PyoaDonutObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDonut_FromoaDonut(oaDonut* data)
{
    if (data) {
       PyObject* bself = PyoaDonut_Type.tp_alloc(&PyoaDonut_Type,0);
       if (bself == NULL) return bself;
       PyoaDonutObject* self = (PyoaDonutObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDonut_convertToPolygon_doc[] = 
"Class: oaDonut, Function: convertToPolygon\n"
"  Paramegers: ()\n"
"    Calls: oaPolygon* convertToPolygon()\n"
"    Signature: convertToPolygon|ptr-oaPolygon|simple-oaUInt4,\n"
"    BrowseData: 1\n"
"    This function converts this donut to a polygon using the specified number of sides. The pointer to the polygon is returned.\n"
"    numSides\n"
"    The number of segments to represent the donut as a polygon; the default is 20\n"
"    oacDonutNumSidesInvalid\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaPolygon* convertToPolygon(oaUInt4 numSides)\n"
"    Signature: convertToPolygon|ptr-oaPolygon|simple-oaUInt4,\n"
"    This function converts this donut to a polygon using the specified number of sides. The pointer to the polygon is returned.\n"
"    numSides\n"
"    The number of segments to represent the donut as a polygon; the default is 20\n"
"    oacDonutNumSidesInvalid\n"
;

static PyObject*
oaDonut_convertToPolygon(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaPolygonp result= (data.DataCall()->convertToPolygon());
            return PyoaPolygon_FromoaPolygon(result);
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaPolygonp result= (data.DataCall()->convertToPolygon(p1.Data()));
            return PyoaPolygon_FromoaPolygon(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDonut, function: convertToPolygon, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_getBoundary_doc[] = 
"Class: oaDonut, Function: getBoundary\n"
"  Paramegers: (oaPointArray)\n"
"    Calls: void getBoundary(oaPointArray& points) const\n"
"    Signature: getBoundary|void-void|ref-oaPointArray,simple-oaUInt4,\n"
"    BrowseData: 0,oaPointArray\n"
"    This function fills out points with the boundary polygon of this donut. The polygon is generated with the number of sides specified by numSides .\n"
"    points\n"
"    The point array for the resulting boundary\n"
"    numSides\n"
"    The number of sides of the resulting boundary\n"
"    oacDonutNumSidesInvalid\n"
"  Paramegers: (oaPointArray,oaUInt4)\n"
"    Calls: void getBoundary(oaPointArray& points,oaUInt4 numSides) const\n"
"    Signature: getBoundary|void-void|ref-oaPointArray,simple-oaUInt4,\n"
"    This function fills out points with the boundary polygon of this donut. The polygon is generated with the number of sides specified by numSides .\n"
"    points\n"
"    The point array for the resulting boundary\n"
"    numSides\n"
"    The number of sides of the resulting boundary\n"
"    oacDonutNumSidesInvalid\n"
;

static PyObject*
oaDonut_getBoundary(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    // Case: (oaPointArray)
    {
        PyParamoaPointArray p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaPointArray_Convert,&p1)) {
            data.DataCall()->getBoundary(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaPointArray,oaUInt4)
    {
        PyParamoaPointArray p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaPointArray_Convert,&p1,
              &PyoaUInt4_Convert,&p2)) {
            data.DataCall()->getBoundary(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDonut, function: getBoundary, Choices are:\n"
        "    (oaPointArray)\n"
        "    (oaPointArray,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_getCenter_doc[] = 
"Class: oaDonut, Function: getCenter\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void getCenter(oaPoint& point) const\n"
"    Signature: getCenter|void-void|ref-oaPoint,\n"
"    BrowseData: 0,oaPoint\n"
"    This function fills out point with the center point of this donut.\n"
"    point\n"
"    The center of the donut\n"
;

static PyObject*
oaDonut_getCenter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->getCenter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_getHoleBBox_doc[] = 
"Class: oaDonut, Function: getHoleBBox\n"
"  Paramegers: (oaBox)\n"
"    Calls: void getHoleBBox(oaBox& bBox) const\n"
"    Signature: getHoleBBox|void-void|ref-oaBox,\n"
"    BrowseData: 0,oaBox\n"
"    This function fills out bBox with the hole bBox of this donut.\n"
"    bBox\n"
"    The bounding box of the donut\n"
;

static PyObject*
oaDonut_getHoleBBox(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBox p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBox_Convert,&p1)) {
        data.DataCall()->getHoleBBox(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_getHoleRadius_doc[] = 
"Class: oaDonut, Function: getHoleRadius\n"
"  Paramegers: ()\n"
"    Calls: oaDist getHoleRadius() const\n"
"    Signature: getHoleRadius|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the inner radius of this donut.\n"
;

static PyObject*
oaDonut_getHoleRadius(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getHoleRadius());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_getRadius_doc[] = 
"Class: oaDonut, Function: getRadius\n"
"  Paramegers: ()\n"
"    Calls: oaDist getRadius() const\n"
"    Signature: getRadius|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the outer radius of this donut.\n"
;

static PyObject*
oaDonut_getRadius(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getRadius());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_setCenter_doc[] = 
"Class: oaDonut, Function: setCenter\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void setCenter(const oaPoint& center)\n"
"    Signature: setCenter|void-void|cref-oaPoint,\n"
"    This function sets the center of this donut to the specified value.\n"
"    center\n"
"    The center point for the donut\n"
;

static PyObject*
oaDonut_setCenter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->setCenter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_setHoleRadius_doc[] = 
"Class: oaDonut, Function: setHoleRadius\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setHoleRadius(oaDist holeRadius)\n"
"    Signature: setHoleRadius|void-void|simple-oaDist,\n"
"    This function sets the inner radius of this donut to the specified value.\n"
"    holeRadius\n"
"    The inner radius for the donut\n"
"    oacDonutRadiiInvalid\n"
;

static PyObject*
oaDonut_setHoleRadius(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setHoleRadius(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_setRadii_doc[] = 
"Class: oaDonut, Function: setRadii\n"
"  Paramegers: (oaDist,oaDist)\n"
"    Calls: void setRadii(oaDist radius,oaDist holeRadius)\n"
"    Signature: setRadii|void-void|simple-oaDist,simple-oaDist,\n"
"    This function sets the inner and outer radii of this donut to the specified values.\n"
"    radius\n"
"    The outer radius for the donut\n"
"    holeRadius\n"
"    The inner radius for the donut\n"
"    oacDonutRadiiInvalid\n"
;

static PyObject*
oaDonut_setRadii(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    PyParamoaDist p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDist_Convert,&p1,
          &PyoaDist_Convert,&p2)) {
        data.DataCall()->setRadii(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_setRadius_doc[] = 
"Class: oaDonut, Function: setRadius\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setRadius(oaDist radius)\n"
"    Signature: setRadius|void-void|simple-oaDist,\n"
"    This function sets the outer radius of this donut to the specified value.\n"
"    radius\n"
"    The outer radius for the donut\n"
"    oacDonutRadiiInvalid\n"
;

static PyObject*
oaDonut_setRadius(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDonutObject* self=(PyoaDonutObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setRadius(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_isNull_doc[] =
"Class: oaDonut, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDonut_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDonut data;
    int convert_status=PyoaDonut_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDonut_assign_doc[] = 
"Class: oaDonut, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDonut_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDonut data;
  int convert_status=PyoaDonut_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDonut p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDonut_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDonut_methodlist[] = {
    {"convertToPolygon",(PyCFunction)oaDonut_convertToPolygon,METH_VARARGS,oaDonut_convertToPolygon_doc},
    {"getBoundary",(PyCFunction)oaDonut_getBoundary,METH_VARARGS,oaDonut_getBoundary_doc},
    {"getCenter",(PyCFunction)oaDonut_getCenter,METH_VARARGS,oaDonut_getCenter_doc},
    {"getHoleBBox",(PyCFunction)oaDonut_getHoleBBox,METH_VARARGS,oaDonut_getHoleBBox_doc},
    {"getHoleRadius",(PyCFunction)oaDonut_getHoleRadius,METH_VARARGS,oaDonut_getHoleRadius_doc},
    {"getRadius",(PyCFunction)oaDonut_getRadius,METH_VARARGS,oaDonut_getRadius_doc},
    {"setCenter",(PyCFunction)oaDonut_setCenter,METH_VARARGS,oaDonut_setCenter_doc},
    {"setHoleRadius",(PyCFunction)oaDonut_setHoleRadius,METH_VARARGS,oaDonut_setHoleRadius_doc},
    {"setRadii",(PyCFunction)oaDonut_setRadii,METH_VARARGS,oaDonut_setRadii_doc},
    {"setRadius",(PyCFunction)oaDonut_setRadius,METH_VARARGS,oaDonut_setRadius_doc},
    {"isNull",(PyCFunction)oaDonut_tp_isNull,METH_VARARGS,oaDonut_isNull_doc},
    {"assign",(PyCFunction)oaDonut_tp_assign,METH_VARARGS,oaDonut_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDonut_doc[] = 
"Class: oaDonut\n"
"  This class implements a donut shape defined by two concentric circles.\n"
"Constructors:\n"
"  Paramegers: (oaDonut)\n"
"    Calls: (const oaDonut&)\n"
"    Signature: oaDonut||cref-oaDonut,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDonut_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDonut",
    sizeof(PyoaDonutObject),
    0,
    (destructor)oaDonut_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDonut_tp_compare,	/* tp_compare */
    (reprfunc)oaDonut_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDonut_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDonut_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaShape_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDonut_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDonut_static_create_doc[] = 
"Class: oaDonut, Function: create\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist,oaDist)\n"
"    Calls: oaDonut* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& center,oaDist radius,oaDist holeRadius)\n"
"    Signature: create|ptr-oaDonut|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaDist,simple-oaDist,\n"
"    This function creates a donut with the specified attributes. The specified radii are checked to verify the inner radius is less than the outer radius.\n"
"    block\n"
"    The block in which the donut is created\n"
"    layerNum\n"
"    The number layer on which the donut is created\n"
"    purposeNum\n"
"    The number of the purpose on which the donut is created\n"
"    center\n"
"    The center point for the donut\n"
"    radius\n"
"    The outer radius for the donut\n"
"    holeRadius\n"
"    The inner radius for the donut\n"
"    oacDonutRadiiInvalid\n"
;

static PyObject*
oaDonut_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    PyParamoaLayerNum p2;
    PyParamoaPurposeNum p3;
    PyParamoaPoint p4;
    PyParamoaDist p5;
    PyParamoaDist p6;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaLayerNum_Convert,&p2,
          &PyoaPurposeNum_Convert,&p3,
          &PyoaPoint_Convert,&p4,
          &PyoaDist_Convert,&p5,
          &PyoaDist_Convert,&p6)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDonutp result= (oaDonut::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data()));
        return PyoaDonut_FromoaDonut(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDonut_static_genBoundary_doc[] = 
"Class: oaDonut, Function: genBoundary\n"
"  Paramegers: (oaPoint,oaDist,oaDist,oaUInt4,oaPointArray)\n"
"    Calls: void genBoundary(const oaPoint& center,oaDist radius,oaDist holeRadius,oaUInt4 numSides,oaPointArray& boundary)\n"
"    Signature: genBoundary|void-void|cref-oaPoint,simple-oaDist,simple-oaDist,simple-oaUInt4,ref-oaPointArray,\n"
"    This function fills out boundary with the bounding polygon of a donut with the specified parameters. The polygon is generated with the number of sides specified by numSides .\n"
"    center\n"
"    The center point of the donut\n"
"    radius\n"
"    The outer radius of the donut\n"
"    holeRadius\n"
"    The inner radius of the donut\n"
"    numSides\n"
"    The number of sides of the resulting boundary\n"
"    boundary\n"
"    The point array for the resulting boundary\n"
"    oacDonutNumSidesInvalid\n"
;

static PyObject*
oaDonut_static_genBoundary(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPoint p1;
    PyParamoaDist p2;
    PyParamoaDist p3;
    PyParamoaUInt4 p4;
    PyParamoaPointArray p5;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&",
          &PyoaPoint_Convert,&p1,
          &PyoaDist_Convert,&p2,
          &PyoaDist_Convert,&p3,
          &PyoaUInt4_Convert,&p4,
          &PyoaPointArray_Convert,&p5)) {
        oaDonut::genBoundary(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDonut_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaDonut_static_create,METH_VARARGS,oaDonut_static_create_doc},
    {"static_genBoundary",(PyCFunction)oaDonut_static_genBoundary,METH_VARARGS,oaDonut_static_genBoundary_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDonut_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDonut_Type)<0) {
      printf("** PyType_Ready failed for: oaDonut\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDonut",
           (PyObject*)(&PyoaDonut_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDonut\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDonut_Type.tp_dict;
    for(method=oaDonut_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDot
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDot_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDot_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDotObject* self = (PyoaDotObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDot)
    {
        PyParamoaDot p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDot_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDot, Choices are:\n"
        "    (oaDot)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDot_tp_dealloc(PyoaDotObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDot_tp_repr(PyObject *ob)
{
    PyParamoaDot value;
    int convert_status=PyoaDot_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[27];
    sprintf(buffer,"<oaDot::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDot_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDot v1;
    PyParamoaDot v2;
    int convert_status1=PyoaDot_Convert(ob1,&v1);
    int convert_status2=PyoaDot_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDot_Convert(PyObject* ob,PyParamoaDot* result)
{
    if (ob == NULL) return 1;
    if (PyoaDot_Check(ob)) {
        result->SetData( (oaDot**) ((PyoaDotObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDot Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDot_FromoaDot(oaDot** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDot* data=*value;
        PyObject* bself = PyoaDot_Type.tp_alloc(&PyoaDot_Type,0);
        if (bself == NULL) return bself;
        PyoaDotObject* self = (PyoaDotObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDot_FromoaDot(oaDot* data)
{
    if (data) {
       PyObject* bself = PyoaDot_Type.tp_alloc(&PyoaDot_Type,0);
       if (bself == NULL) return bself;
       PyoaDotObject* self = (PyoaDotObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDot_getHeight_doc[] = 
"Class: oaDot, Function: getHeight\n"
"  Paramegers: ()\n"
"    Calls: oaDist getHeight() const\n"
"    Signature: getHeight|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the height of this dot.\n"
;

static PyObject*
oaDot_getHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getHeight());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_getLocation_doc[] = 
"Class: oaDot, Function: getLocation\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void getLocation(oaPoint& point) const\n"
"    Signature: getLocation|void-void|ref-oaPoint,\n"
"    BrowseData: 0,oaPoint\n"
"    This function fills out location with the location point of this dot.\n"
;

static PyObject*
oaDot_getLocation(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->getLocation(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_getWidth_doc[] = 
"Class: oaDot, Function: getWidth\n"
"  Paramegers: ()\n"
"    Calls: oaDist getWidth() const\n"
"    Signature: getWidth|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the width of this dot.\n"
;

static PyObject*
oaDot_getWidth(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getWidth());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_setHeight_doc[] = 
"Class: oaDot, Function: setHeight\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setHeight(oaDist height)\n"
"    Signature: setHeight|void-void|simple-oaDist,\n"
"    This function sets the height of this dot to the specified value.\n"
;

static PyObject*
oaDot_setHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setHeight(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_setLocation_doc[] = 
"Class: oaDot, Function: setLocation\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void setLocation(const oaPoint& location)\n"
"    Signature: setLocation|void-void|cref-oaPoint,\n"
"    This function sets the location of this dot to the specified value.\n"
;

static PyObject*
oaDot_setLocation(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->setLocation(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_setWidth_doc[] = 
"Class: oaDot, Function: setWidth\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setWidth(oaDist width)\n"
"    Signature: setWidth|void-void|simple-oaDist,\n"
"    This function sets the width of this dot to the specified value.\n"
;

static PyObject*
oaDot_setWidth(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDotObject* self=(PyoaDotObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setWidth(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDot_isNull_doc[] =
"Class: oaDot, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDot_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDot data;
    int convert_status=PyoaDot_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDot_assign_doc[] = 
"Class: oaDot, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDot_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDot data;
  int convert_status=PyoaDot_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDot p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDot_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDot_methodlist[] = {
    {"getHeight",(PyCFunction)oaDot_getHeight,METH_VARARGS,oaDot_getHeight_doc},
    {"getLocation",(PyCFunction)oaDot_getLocation,METH_VARARGS,oaDot_getLocation_doc},
    {"getWidth",(PyCFunction)oaDot_getWidth,METH_VARARGS,oaDot_getWidth_doc},
    {"setHeight",(PyCFunction)oaDot_setHeight,METH_VARARGS,oaDot_setHeight_doc},
    {"setLocation",(PyCFunction)oaDot_setLocation,METH_VARARGS,oaDot_setLocation_doc},
    {"setWidth",(PyCFunction)oaDot_setWidth,METH_VARARGS,oaDot_setWidth_doc},
    {"isNull",(PyCFunction)oaDot_tp_isNull,METH_VARARGS,oaDot_isNull_doc},
    {"assign",(PyCFunction)oaDot_tp_assign,METH_VARARGS,oaDot_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDot_doc[] = 
"Class: oaDot\n"
"  The oaDot class implements an oaDot shape. An oaDot shape represents a dot at a location point that can have a non-zero width and height.\n"
"Constructors:\n"
"  Paramegers: (oaDot)\n"
"    Calls: (const oaDot&)\n"
"    Signature: oaDot||cref-oaDot,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDot_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDot",
    sizeof(PyoaDotObject),
    0,
    (destructor)oaDot_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDot_tp_compare,	/* tp_compare */
    (reprfunc)oaDot_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDot_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDot_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaShape_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDot_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDot_static_create_doc[] = 
"Class: oaDot, Function: create\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint)\n"
"    Calls: oaDot* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& location)\n"
"    Signature: create|ptr-oaDot|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaDist,simple-oaDist,\n"
"    This function creates a dot in the specified block, with the specified layer number, purpose number, location, and optional width and height.\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist)\n"
"    Calls: oaDot* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& location,oaDist width)\n"
"    Signature: create|ptr-oaDot|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaDist,simple-oaDist,\n"
"    This function creates a dot in the specified block, with the specified layer number, purpose number, location, and optional width and height.\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist,oaDist)\n"
"    Calls: oaDot* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& location,oaDist width,oaDist height)\n"
"    Signature: create|ptr-oaDot|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaDist,simple-oaDist,\n"
"    This function creates a dot in the specified block, with the specified layer number, purpose number, location, and optional width and height.\n"
;

static PyObject*
oaDot_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaPoint p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaPoint_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaDotp result= (oaDot::create(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDot_FromoaDot(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaPoint p4;
        PyParamoaDist p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaPoint_Convert,&p4,
              &PyoaDist_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaDotp result= (oaDot::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
            return PyoaDot_FromoaDot(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist,oaDist)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaPoint p4;
        PyParamoaDist p5;
        PyParamoaDist p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaPoint_Convert,&p4,
              &PyoaDist_Convert,&p5,
              &PyoaDist_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaDotp result= (oaDot::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data()));
            return PyoaDot_FromoaDot(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDot, function: create, Choices are:\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaPoint)\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist)\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaPoint,oaDist,oaDist)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDot_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaDot_static_create,METH_VARARGS,oaDot_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDot_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDot_Type)<0) {
      printf("** PyType_Ready failed for: oaDot\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDot",
           (PyObject*)(&PyoaDot_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDot\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDot_Type.tp_dict;
    for(method=oaDot_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaAnalysisOpPointObject* self = (PyoaDoubleAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaAnalysisOpPoint)
    {
        PyParamoaDoubleAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaDoubleAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaDoubleAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaDoubleAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaAnalysisOpPoint v1;
    PyParamoaDoubleAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaAnalysisOpPoint**) ((PyoaDoubleAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(oaDoubleAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaDoubleAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaAnalysisOpPointObject* self = (PyoaDoubleAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(oaDoubleAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaDoubleAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaAnalysisOpPointObject* self = (PyoaDoubleAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: oaDouble get(const oaAnalysisOpPoint* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaAnalysisOpPoint,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisOpPointObject* self=(PyoaDoubleAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisOpPointObject* self=(PyoaDoubleAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,oaDouble)\n"
"    Calls: void set(oaAnalysisOpPoint* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisOpPointObject* self=(PyoaDoubleAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaDoubleAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_getDefault,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaDoubleAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaDoubleAppDef_oaAnalysisOpPoint||cref-oaDoubleAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaAnalysisOpPoint",
    sizeof(PyoaDoubleAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaDoubleAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisOpPointp result= (oaDoubleAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaAnalysisOpPoint_FromoaDoubleAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaDoubleAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaDoubleAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaDoubleAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaAnalysisPointObject* self = (PyoaDoubleAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaAnalysisPoint)
    {
        PyParamoaDoubleAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaDoubleAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaAnalysisPoint_tp_dealloc(PyoaDoubleAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaAnalysisPoint value;
    int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaDoubleAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaAnalysisPoint v1;
    PyParamoaDoubleAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaAnalysisPoint**) ((PyoaDoubleAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(oaDoubleAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaDoubleAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaAnalysisPointObject* self = (PyoaDoubleAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(oaDoubleAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaDoubleAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaAnalysisPointObject* self = (PyoaDoubleAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaDouble get(const oaAnalysisPoint* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaAnalysisPoint,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisPointObject* self=(PyoaDoubleAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisPointObject* self=(PyoaDoubleAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaDouble)\n"
"    Calls: void set(oaAnalysisPoint* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAnalysisPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAnalysisPointObject* self=(PyoaDoubleAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaAnalysisPoint data;
    int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaAnalysisPoint data;
  int convert_status=PyoaDoubleAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_get,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_set,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaDoubleAppDef_oaAnalysisPoint&)\n"
"    Signature: oaDoubleAppDef_oaAnalysisPoint||cref-oaDoubleAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaAnalysisPoint",
    sizeof(PyoaDoubleAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaDoubleAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaDoubleAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAnalysisPointp result= (oaDoubleAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaAnalysisPoint_FromoaDoubleAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaDoubleAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaDoubleAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaDoubleAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaAppObjectObject* self = (PyoaDoubleAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaAppObject)
    {
        PyParamoaDoubleAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaAppObject, Choices are:\n"
        "    (oaDoubleAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaAppObject_tp_dealloc(PyoaDoubleAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaAppObject value;
    int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDoubleAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaAppObject v1;
    PyParamoaDoubleAppDef_oaAppObject v2;
    int convert_status1=PyoaDoubleAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaAppObject**) ((PyoaDoubleAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(oaDoubleAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaAppObject_Type.tp_alloc(&PyoaDoubleAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaAppObjectObject* self = (PyoaDoubleAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(oaDoubleAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaAppObject_Type.tp_alloc(&PyoaDoubleAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaAppObjectObject* self = (PyoaDoubleAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_get_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaDouble get(const oaAppObject* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaAppObject,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAppObject data;
    int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAppObjectObject* self=(PyoaDoubleAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAppObject data;
    int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAppObjectObject* self=(PyoaDoubleAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_set_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaDouble)\n"
"    Calls: void set(oaAppObject* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaAppObject,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAppObject data;
    int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAppObjectObject* self=(PyoaDoubleAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_isNull_doc[] =
"Class: oaDoubleAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaAppObject data;
    int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaAppObject_assign_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaAppObject data;
  int convert_status=PyoaDoubleAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaAppObject_get,METH_VARARGS,oaDoubleAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaAppObject_getDefault,METH_VARARGS,oaDoubleAppDef_oaAppObject_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaAppObject_set,METH_VARARGS,oaDoubleAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaAppObject_tp_assign,METH_VARARGS,oaDoubleAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_doc[] = 
"Class: oaDoubleAppDef_oaAppObject\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaAppObject)\n"
"    Calls: (const oaDoubleAppDef_oaAppObject&)\n"
"    Signature: oaDoubleAppDef_oaAppObject||cref-oaDoubleAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaAppObject",
    sizeof(PyoaDoubleAppDef_oaAppObjectObject),
    0,
    (destructor)oaDoubleAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_static_find_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaDoubleAppDef_oaAppObjectp result= (oaDoubleAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAppObject_static_get_doc[] = 
"Class: oaDoubleAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAppObjectp result= (oaDoubleAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAppObjectp result= (oaDoubleAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAppObjectp result= (oaDoubleAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaAppObject_FromoaDoubleAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaAppObject_static_find,METH_VARARGS,oaDoubleAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaAppObject_static_get,METH_VARARGS,oaDoubleAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaAppObject",
           (PyObject*)(&PyoaDoubleAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaAppObject_Type.tp_dict;
    for(method=oaDoubleAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaAssignmentObject* self = (PyoaDoubleAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaAssignment)
    {
        PyParamoaDoubleAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaAssignment, Choices are:\n"
        "    (oaDoubleAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaAssignment_tp_dealloc(PyoaDoubleAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaAssignment value;
    int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaAssignment v1;
    PyParamoaDoubleAppDef_oaAssignment v2;
    int convert_status1=PyoaDoubleAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaAssignment**) ((PyoaDoubleAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(oaDoubleAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaAssignment_Type.tp_alloc(&PyoaDoubleAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaAssignmentObject* self = (PyoaDoubleAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(oaDoubleAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaAssignment_Type.tp_alloc(&PyoaDoubleAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaAssignmentObject* self = (PyoaDoubleAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_get_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaDouble get(const oaAssignment* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaAssignment,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAssignment data;
    int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAssignmentObject* self=(PyoaDoubleAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAssignment data;
    int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAssignmentObject* self=(PyoaDoubleAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_set_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaDouble)\n"
"    Calls: void set(oaAssignment* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaAssignment,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaAssignment data;
    int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaAssignmentObject* self=(PyoaDoubleAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_isNull_doc[] =
"Class: oaDoubleAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaAssignment data;
    int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaAssignment_assign_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaAssignment data;
  int convert_status=PyoaDoubleAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaAssignment_get,METH_VARARGS,oaDoubleAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaAssignment_getDefault,METH_VARARGS,oaDoubleAppDef_oaAssignment_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaAssignment_set,METH_VARARGS,oaDoubleAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaAssignment_tp_assign,METH_VARARGS,oaDoubleAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_doc[] = 
"Class: oaDoubleAppDef_oaAssignment\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaAssignment)\n"
"    Calls: (const oaDoubleAppDef_oaAssignment&)\n"
"    Signature: oaDoubleAppDef_oaAssignment||cref-oaDoubleAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaAssignment",
    sizeof(PyoaDoubleAppDef_oaAssignmentObject),
    0,
    (destructor)oaDoubleAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_static_find_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::find(p1.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaAssignment_static_get_doc[] = 
"Class: oaDoubleAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaAssignmentp result= (oaDoubleAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaAssignment_FromoaDoubleAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaAssignment_static_find,METH_VARARGS,oaDoubleAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaAssignment_static_get,METH_VARARGS,oaDoubleAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaAssignment",
           (PyObject*)(&PyoaDoubleAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaAssignment_Type.tp_dict;
    for(method=oaDoubleAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaBlockObject* self = (PyoaDoubleAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaBlock)
    {
        PyParamoaDoubleAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaBlock, Choices are:\n"
        "    (oaDoubleAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaBlock_tp_dealloc(PyoaDoubleAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaBlock value;
    int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDoubleAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaBlock v1;
    PyParamoaDoubleAppDef_oaBlock v2;
    int convert_status1=PyoaDoubleAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaBlock_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaBlock**) ((PyoaDoubleAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(oaDoubleAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaBlock_Type.tp_alloc(&PyoaDoubleAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaBlockObject* self = (PyoaDoubleAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(oaDoubleAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaBlock_Type.tp_alloc(&PyoaDoubleAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaBlockObject* self = (PyoaDoubleAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_get_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaDouble get(const oaBlock* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaBlock,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlock data;
    int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockObject* self=(PyoaDoubleAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlock data;
    int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockObject* self=(PyoaDoubleAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_set_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaDouble)\n"
"    Calls: void set(oaBlock* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaBlock,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlock data;
    int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockObject* self=(PyoaDoubleAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_isNull_doc[] =
"Class: oaDoubleAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaBlock data;
    int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaBlock_assign_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaBlock data;
  int convert_status=PyoaDoubleAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaBlock_get,METH_VARARGS,oaDoubleAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaBlock_getDefault,METH_VARARGS,oaDoubleAppDef_oaBlock_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaBlock_set,METH_VARARGS,oaDoubleAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaBlock_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaBlock_tp_assign,METH_VARARGS,oaDoubleAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_doc[] = 
"Class: oaDoubleAppDef_oaBlock\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaBlock)\n"
"    Calls: (const oaDoubleAppDef_oaBlock&)\n"
"    Signature: oaDoubleAppDef_oaBlock||cref-oaDoubleAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaBlock",
    sizeof(PyoaDoubleAppDef_oaBlockObject),
    0,
    (destructor)oaDoubleAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_static_find_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::find(p1.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlock_static_get_doc[] = 
"Class: oaDoubleAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockp result= (oaDoubleAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaBlock_FromoaDoubleAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaBlock_static_find,METH_VARARGS,oaDoubleAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaBlock_static_get,METH_VARARGS,oaDoubleAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaBlock",
           (PyObject*)(&PyoaDoubleAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaBlock_Type.tp_dict;
    for(method=oaDoubleAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaBlockageObject* self = (PyoaDoubleAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaBlockage)
    {
        PyParamoaDoubleAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaBlockage, Choices are:\n"
        "    (oaDoubleAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaBlockage_tp_dealloc(PyoaDoubleAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaBlockage value;
    int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDoubleAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaBlockage v1;
    PyParamoaDoubleAppDef_oaBlockage v2;
    int convert_status1=PyoaDoubleAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaBlockage**) ((PyoaDoubleAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(oaDoubleAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaBlockage_Type.tp_alloc(&PyoaDoubleAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaBlockageObject* self = (PyoaDoubleAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(oaDoubleAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaBlockage_Type.tp_alloc(&PyoaDoubleAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaBlockageObject* self = (PyoaDoubleAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_get_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaDouble get(const oaBlockage* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaBlockage,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlockage data;
    int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockageObject* self=(PyoaDoubleAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlockage data;
    int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockageObject* self=(PyoaDoubleAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_set_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaDouble)\n"
"    Calls: void set(oaBlockage* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaBlockage,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBlockage data;
    int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBlockageObject* self=(PyoaDoubleAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_isNull_doc[] =
"Class: oaDoubleAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaBlockage data;
    int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaBlockage_assign_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaBlockage data;
  int convert_status=PyoaDoubleAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaBlockage_get,METH_VARARGS,oaDoubleAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaBlockage_getDefault,METH_VARARGS,oaDoubleAppDef_oaBlockage_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaBlockage_set,METH_VARARGS,oaDoubleAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaBlockage_tp_assign,METH_VARARGS,oaDoubleAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_doc[] = 
"Class: oaDoubleAppDef_oaBlockage\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaBlockage)\n"
"    Calls: (const oaDoubleAppDef_oaBlockage&)\n"
"    Signature: oaDoubleAppDef_oaBlockage||cref-oaDoubleAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaBlockage",
    sizeof(PyoaDoubleAppDef_oaBlockageObject),
    0,
    (destructor)oaDoubleAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_static_find_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::find(p1.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBlockage_static_get_doc[] = 
"Class: oaDoubleAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBlockagep result= (oaDoubleAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaBlockage_FromoaDoubleAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaBlockage_static_find,METH_VARARGS,oaDoubleAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaBlockage_static_get,METH_VARARGS,oaDoubleAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaBlockage",
           (PyObject*)(&PyoaDoubleAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaBlockage_Type.tp_dict;
    for(method=oaDoubleAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaBoundaryObject* self = (PyoaDoubleAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaBoundary)
    {
        PyParamoaDoubleAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaBoundary, Choices are:\n"
        "    (oaDoubleAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaBoundary_tp_dealloc(PyoaDoubleAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaBoundary value;
    int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDoubleAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaBoundary v1;
    PyParamoaDoubleAppDef_oaBoundary v2;
    int convert_status1=PyoaDoubleAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaBoundary**) ((PyoaDoubleAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(oaDoubleAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaBoundary_Type.tp_alloc(&PyoaDoubleAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaBoundaryObject* self = (PyoaDoubleAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(oaDoubleAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaBoundary_Type.tp_alloc(&PyoaDoubleAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaBoundaryObject* self = (PyoaDoubleAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_get_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaDouble get(const oaBoundary* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaBoundary,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBoundary data;
    int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBoundaryObject* self=(PyoaDoubleAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBoundary data;
    int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBoundaryObject* self=(PyoaDoubleAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_set_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaDouble)\n"
"    Calls: void set(oaBoundary* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaBoundary,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBoundary data;
    int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBoundaryObject* self=(PyoaDoubleAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_isNull_doc[] =
"Class: oaDoubleAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaBoundary data;
    int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaBoundary_assign_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaBoundary data;
  int convert_status=PyoaDoubleAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaBoundary_get,METH_VARARGS,oaDoubleAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaBoundary_getDefault,METH_VARARGS,oaDoubleAppDef_oaBoundary_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaBoundary_set,METH_VARARGS,oaDoubleAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaBoundary_tp_assign,METH_VARARGS,oaDoubleAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_doc[] = 
"Class: oaDoubleAppDef_oaBoundary\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaBoundary)\n"
"    Calls: (const oaDoubleAppDef_oaBoundary&)\n"
"    Signature: oaDoubleAppDef_oaBoundary||cref-oaDoubleAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaBoundary",
    sizeof(PyoaDoubleAppDef_oaBoundaryObject),
    0,
    (destructor)oaDoubleAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_static_find_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::find(p1.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBoundary_static_get_doc[] = 
"Class: oaDoubleAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBoundaryp result= (oaDoubleAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaBoundary_FromoaDoubleAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaBoundary_static_find,METH_VARARGS,oaDoubleAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaBoundary_static_get,METH_VARARGS,oaDoubleAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaBoundary",
           (PyObject*)(&PyoaDoubleAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaBoundary_Type.tp_dict;
    for(method=oaDoubleAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaBusNetDefObject* self = (PyoaDoubleAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaBusNetDef)
    {
        PyParamoaDoubleAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaBusNetDef, Choices are:\n"
        "    (oaDoubleAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaBusNetDef_tp_dealloc(PyoaDoubleAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaBusNetDef value;
    int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDoubleAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaBusNetDef v1;
    PyParamoaDoubleAppDef_oaBusNetDef v2;
    int convert_status1=PyoaDoubleAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaBusNetDef**) ((PyoaDoubleAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(oaDoubleAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaBusNetDef_Type.tp_alloc(&PyoaDoubleAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaBusNetDefObject* self = (PyoaDoubleAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(oaDoubleAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaBusNetDef_Type.tp_alloc(&PyoaDoubleAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaBusNetDefObject* self = (PyoaDoubleAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_get_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaDouble get(const oaBusNetDef* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaBusNetDef,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusNetDef data;
    int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusNetDefObject* self=(PyoaDoubleAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusNetDef data;
    int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusNetDefObject* self=(PyoaDoubleAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_set_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaDouble)\n"
"    Calls: void set(oaBusNetDef* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusNetDef data;
    int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusNetDefObject* self=(PyoaDoubleAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaDoubleAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaBusNetDef data;
    int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaBusNetDef data;
  int convert_status=PyoaDoubleAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaBusNetDef_get,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaBusNetDef_set,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaBusNetDef)\n"
"    Calls: (const oaDoubleAppDef_oaBusNetDef&)\n"
"    Signature: oaDoubleAppDef_oaBusNetDef||cref-oaDoubleAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaBusNetDef",
    sizeof(PyoaDoubleAppDef_oaBusNetDefObject),
    0,
    (destructor)oaDoubleAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaDoubleAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusNetDefp result= (oaDoubleAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaBusNetDef_FromoaDoubleAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaBusNetDef_static_find,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaBusNetDef_static_get,METH_VARARGS,oaDoubleAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaBusNetDef",
           (PyObject*)(&PyoaDoubleAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaDoubleAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaBusTermDefObject* self = (PyoaDoubleAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaBusTermDef)
    {
        PyParamoaDoubleAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaBusTermDef, Choices are:\n"
        "    (oaDoubleAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaBusTermDef_tp_dealloc(PyoaDoubleAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaBusTermDef value;
    int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaBusTermDef v1;
    PyParamoaDoubleAppDef_oaBusTermDef v2;
    int convert_status1=PyoaDoubleAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaBusTermDef**) ((PyoaDoubleAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(oaDoubleAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaBusTermDef_Type.tp_alloc(&PyoaDoubleAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaBusTermDefObject* self = (PyoaDoubleAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(oaDoubleAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaBusTermDef_Type.tp_alloc(&PyoaDoubleAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaBusTermDefObject* self = (PyoaDoubleAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_get_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaDouble get(const oaBusTermDef* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaBusTermDef,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusTermDef data;
    int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusTermDefObject* self=(PyoaDoubleAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusTermDef data;
    int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusTermDefObject* self=(PyoaDoubleAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_set_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaDouble)\n"
"    Calls: void set(oaBusTermDef* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaBusTermDef data;
    int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaBusTermDefObject* self=(PyoaDoubleAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaDoubleAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaBusTermDef data;
    int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaBusTermDef data;
  int convert_status=PyoaDoubleAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaBusTermDef_get,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaBusTermDef_set,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaBusTermDef)\n"
"    Calls: (const oaDoubleAppDef_oaBusTermDef&)\n"
"    Signature: oaDoubleAppDef_oaBusTermDef||cref-oaDoubleAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaBusTermDef",
    sizeof(PyoaDoubleAppDef_oaBusTermDefObject),
    0,
    (destructor)oaDoubleAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaDoubleAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaBusTermDefp result= (oaDoubleAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaBusTermDef_FromoaDoubleAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaBusTermDef_static_find,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaBusTermDef_static_get,METH_VARARGS,oaDoubleAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaBusTermDef",
           (PyObject*)(&PyoaDoubleAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaDoubleAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaCMapObject* self = (PyoaDoubleAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaCMap)
    {
        PyParamoaDoubleAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaCMap, Choices are:\n"
        "    (oaDoubleAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaCMap_tp_dealloc(PyoaDoubleAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaCMap value;
    int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDoubleAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaCMap v1;
    PyParamoaDoubleAppDef_oaCMap v2;
    int convert_status1=PyoaDoubleAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaCMap_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaCMap**) ((PyoaDoubleAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(oaDoubleAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaCMap_Type.tp_alloc(&PyoaDoubleAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaCMapObject* self = (PyoaDoubleAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(oaDoubleAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaCMap_Type.tp_alloc(&PyoaDoubleAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaCMapObject* self = (PyoaDoubleAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_get_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaDouble get(const oaCMap* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaCMap,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCMap data;
    int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCMapObject* self=(PyoaDoubleAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCMap data;
    int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCMapObject* self=(PyoaDoubleAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_set_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaDouble)\n"
"    Calls: void set(oaCMap* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaCMap,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCMap data;
    int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCMapObject* self=(PyoaDoubleAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_isNull_doc[] =
"Class: oaDoubleAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaCMap data;
    int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaCMap_assign_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaCMap data;
  int convert_status=PyoaDoubleAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaCMap_get,METH_VARARGS,oaDoubleAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaCMap_getDefault,METH_VARARGS,oaDoubleAppDef_oaCMap_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaCMap_set,METH_VARARGS,oaDoubleAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaCMap_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaCMap_tp_assign,METH_VARARGS,oaDoubleAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_doc[] = 
"Class: oaDoubleAppDef_oaCMap\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaCMap)\n"
"    Calls: (const oaDoubleAppDef_oaCMap&)\n"
"    Signature: oaDoubleAppDef_oaCMap||cref-oaDoubleAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaCMap",
    sizeof(PyoaDoubleAppDef_oaCMapObject),
    0,
    (destructor)oaDoubleAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_static_find_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::find(p1.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCMap_static_get_doc[] = 
"Class: oaDoubleAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCMapp result= (oaDoubleAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaCMap_FromoaDoubleAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaCMap_static_find,METH_VARARGS,oaDoubleAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaCMap_static_get,METH_VARARGS,oaDoubleAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaCMap",
           (PyObject*)(&PyoaDoubleAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaCMap_Type.tp_dict;
    for(method=oaDoubleAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaCellObject* self = (PyoaDoubleAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaCell)
    {
        PyParamoaDoubleAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaCell, Choices are:\n"
        "    (oaDoubleAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaCell_tp_dealloc(PyoaDoubleAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaCell value;
    int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDoubleAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaCell v1;
    PyParamoaDoubleAppDef_oaCell v2;
    int convert_status1=PyoaDoubleAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaCell_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaCell_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaCell**) ((PyoaDoubleAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(oaDoubleAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaCell* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaCell_Type.tp_alloc(&PyoaDoubleAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaCellObject* self = (PyoaDoubleAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(oaDoubleAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaCell_Type.tp_alloc(&PyoaDoubleAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaCellObject* self = (PyoaDoubleAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_get_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaDouble get(const oaCell* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaCell,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCell data;
    int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellObject* self=(PyoaDoubleAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCell data;
    int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellObject* self=(PyoaDoubleAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_set_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaDouble)\n"
"    Calls: void set(oaCell* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaCell,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCell data;
    int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellObject* self=(PyoaDoubleAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_isNull_doc[] =
"Class: oaDoubleAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaCell data;
    int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaCell_assign_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaCell data;
  int convert_status=PyoaDoubleAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaCell_get,METH_VARARGS,oaDoubleAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaCell_getDefault,METH_VARARGS,oaDoubleAppDef_oaCell_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaCell_set,METH_VARARGS,oaDoubleAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaCell_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaCell_tp_assign,METH_VARARGS,oaDoubleAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_doc[] = 
"Class: oaDoubleAppDef_oaCell\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaCell)\n"
"    Calls: (const oaDoubleAppDef_oaCell&)\n"
"    Signature: oaDoubleAppDef_oaCell||cref-oaDoubleAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaCell",
    sizeof(PyoaDoubleAppDef_oaCellObject),
    0,
    (destructor)oaDoubleAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_static_find_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::find(p1.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCell_static_get_doc[] = 
"Class: oaDoubleAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellp result= (oaDoubleAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaCell_FromoaDoubleAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaCell_static_find,METH_VARARGS,oaDoubleAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaCell_static_get,METH_VARARGS,oaDoubleAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaCell",
           (PyObject*)(&PyoaDoubleAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaCell_Type.tp_dict;
    for(method=oaDoubleAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaCellViewObject* self = (PyoaDoubleAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaCellView)
    {
        PyParamoaDoubleAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaCellView, Choices are:\n"
        "    (oaDoubleAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaCellView_tp_dealloc(PyoaDoubleAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaCellView value;
    int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDoubleAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaCellView v1;
    PyParamoaDoubleAppDef_oaCellView v2;
    int convert_status1=PyoaDoubleAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaCellView_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaCellView**) ((PyoaDoubleAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(oaDoubleAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaCellView_Type.tp_alloc(&PyoaDoubleAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaCellViewObject* self = (PyoaDoubleAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(oaDoubleAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaCellView_Type.tp_alloc(&PyoaDoubleAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaCellViewObject* self = (PyoaDoubleAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_get_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaDouble get(const oaCellView* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaCellView,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCellView data;
    int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellViewObject* self=(PyoaDoubleAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCellView data;
    int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellViewObject* self=(PyoaDoubleAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_set_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaDouble)\n"
"    Calls: void set(oaCellView* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaCellView,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCellView data;
    int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaCellViewObject* self=(PyoaDoubleAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_isNull_doc[] =
"Class: oaDoubleAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaCellView data;
    int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaCellView_assign_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaCellView data;
  int convert_status=PyoaDoubleAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaCellView_get,METH_VARARGS,oaDoubleAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaCellView_getDefault,METH_VARARGS,oaDoubleAppDef_oaCellView_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaCellView_set,METH_VARARGS,oaDoubleAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaCellView_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaCellView_tp_assign,METH_VARARGS,oaDoubleAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_doc[] = 
"Class: oaDoubleAppDef_oaCellView\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaCellView)\n"
"    Calls: (const oaDoubleAppDef_oaCellView&)\n"
"    Signature: oaDoubleAppDef_oaCellView||cref-oaDoubleAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaCellView",
    sizeof(PyoaDoubleAppDef_oaCellViewObject),
    0,
    (destructor)oaDoubleAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_static_find_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::find(p1.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCellView_static_get_doc[] = 
"Class: oaDoubleAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaCellViewp result= (oaDoubleAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaCellView_FromoaDoubleAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaCellView_static_find,METH_VARARGS,oaDoubleAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaCellView_static_get,METH_VARARGS,oaDoubleAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaCellView",
           (PyObject*)(&PyoaDoubleAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaCellView_Type.tp_dict;
    for(method=oaDoubleAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaClusterObject* self = (PyoaDoubleAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaCluster)
    {
        PyParamoaDoubleAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaCluster, Choices are:\n"
        "    (oaDoubleAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaCluster_tp_dealloc(PyoaDoubleAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaCluster value;
    int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaDoubleAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaCluster v1;
    PyParamoaDoubleAppDef_oaCluster v2;
    int convert_status1=PyoaDoubleAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaCluster_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaCluster**) ((PyoaDoubleAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(oaDoubleAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaCluster_Type.tp_alloc(&PyoaDoubleAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaClusterObject* self = (PyoaDoubleAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(oaDoubleAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaCluster_Type.tp_alloc(&PyoaDoubleAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaClusterObject* self = (PyoaDoubleAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_get_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaDouble get(const oaCluster* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaCluster,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCluster data;
    int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaClusterObject* self=(PyoaDoubleAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCluster data;
    int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaClusterObject* self=(PyoaDoubleAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_set_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaDouble)\n"
"    Calls: void set(oaCluster* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaCluster,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaCluster data;
    int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaClusterObject* self=(PyoaDoubleAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_isNull_doc[] =
"Class: oaDoubleAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaCluster data;
    int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaCluster_assign_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaCluster data;
  int convert_status=PyoaDoubleAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaCluster_get,METH_VARARGS,oaDoubleAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaCluster_getDefault,METH_VARARGS,oaDoubleAppDef_oaCluster_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaCluster_set,METH_VARARGS,oaDoubleAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaCluster_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaCluster_tp_assign,METH_VARARGS,oaDoubleAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_doc[] = 
"Class: oaDoubleAppDef_oaCluster\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaCluster)\n"
"    Calls: (const oaDoubleAppDef_oaCluster&)\n"
"    Signature: oaDoubleAppDef_oaCluster||cref-oaDoubleAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaCluster",
    sizeof(PyoaDoubleAppDef_oaClusterObject),
    0,
    (destructor)oaDoubleAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_static_find_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::find(p1.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaCluster_static_get_doc[] = 
"Class: oaDoubleAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaClusterp result= (oaDoubleAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaCluster_FromoaDoubleAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaCluster_static_find,METH_VARARGS,oaDoubleAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaCluster_static_get,METH_VARARGS,oaDoubleAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaCluster",
           (PyObject*)(&PyoaDoubleAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaCluster_Type.tp_dict;
    for(method=oaDoubleAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConnectDefObject* self = (PyoaDoubleAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConnectDef)
    {
        PyParamoaDoubleAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConnectDef, Choices are:\n"
        "    (oaDoubleAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConnectDef_tp_dealloc(PyoaDoubleAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConnectDef value;
    int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConnectDef v1;
    PyParamoaDoubleAppDef_oaConnectDef v2;
    int convert_status1=PyoaDoubleAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConnectDef**) ((PyoaDoubleAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(oaDoubleAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConnectDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConnectDefObject* self = (PyoaDoubleAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(oaDoubleAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConnectDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConnectDefObject* self = (PyoaDoubleAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_get_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaDouble get(const oaConnectDef* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConnectDef,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConnectDef data;
    int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConnectDefObject* self=(PyoaDoubleAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConnectDef data;
    int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConnectDefObject* self=(PyoaDoubleAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_set_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaDouble)\n"
"    Calls: void set(oaConnectDef* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConnectDef data;
    int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConnectDefObject* self=(PyoaDoubleAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_isNull_doc[] =
"Class: oaDoubleAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConnectDef data;
    int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConnectDef_assign_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConnectDef data;
  int convert_status=PyoaDoubleAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConnectDef_get,METH_VARARGS,oaDoubleAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConnectDef_getDefault,METH_VARARGS,oaDoubleAppDef_oaConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConnectDef_set,METH_VARARGS,oaDoubleAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConnectDef)\n"
"    Calls: (const oaDoubleAppDef_oaConnectDef&)\n"
"    Signature: oaDoubleAppDef_oaConnectDef||cref-oaDoubleAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConnectDef",
    sizeof(PyoaDoubleAppDef_oaConnectDefObject),
    0,
    (destructor)oaDoubleAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::find(p1.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConnectDefp result= (oaDoubleAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConnectDef_FromoaDoubleAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConnectDef_static_find,METH_VARARGS,oaDoubleAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConnectDef_static_get,METH_VARARGS,oaDoubleAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConnectDef",
           (PyObject*)(&PyoaDoubleAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintObject* self = (PyoaDoubleAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraint)
    {
        PyParamoaDoubleAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraint, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraint_tp_dealloc(PyoaDoubleAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraint value;
    int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraint v1;
    PyParamoaDoubleAppDef_oaConstraint v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraint**) ((PyoaDoubleAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(oaDoubleAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraint_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintObject* self = (PyoaDoubleAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(oaDoubleAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraint_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintObject* self = (PyoaDoubleAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaDouble get(const oaConstraint* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraint,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraint data;
    int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintObject* self=(PyoaDoubleAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraint data;
    int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintObject* self=(PyoaDoubleAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaDouble)\n"
"    Calls: void set(oaConstraint* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraint,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraint data;
    int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintObject* self=(PyoaDoubleAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraint data;
    int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraint_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraint data;
  int convert_status=PyoaDoubleAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraint_get,METH_VARARGS,oaDoubleAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraint_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraint_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraint_set,METH_VARARGS,oaDoubleAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraint_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_doc[] = 
"Class: oaDoubleAppDef_oaConstraint\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraint)\n"
"    Calls: (const oaDoubleAppDef_oaConstraint&)\n"
"    Signature: oaDoubleAppDef_oaConstraint||cref-oaDoubleAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraint",
    sizeof(PyoaDoubleAppDef_oaConstraintObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraint_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintp result= (oaDoubleAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraint_FromoaDoubleAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraint_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraint_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraint",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraint_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintDefObject* self = (PyoaDoubleAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintDef)
    {
        PyParamoaDoubleAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintDef, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintDef_tp_dealloc(PyoaDoubleAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintDef value;
    int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintDef v1;
    PyParamoaDoubleAppDef_oaConstraintDef v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintDef**) ((PyoaDoubleAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(oaDoubleAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintDefObject* self = (PyoaDoubleAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(oaDoubleAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintDefObject* self = (PyoaDoubleAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaDouble get(const oaConstraintDef* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintDef,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintDefObject* self=(PyoaDoubleAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintDefObject* self=(PyoaDoubleAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaDouble)\n"
"    Calls: void set(oaConstraintDef* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintDefObject* self=(PyoaDoubleAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintDef data;
  int convert_status=PyoaDoubleAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintDef_get,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintDef_set,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintDef)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintDef&)\n"
"    Signature: oaDoubleAppDef_oaConstraintDef||cref-oaDoubleAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintDef",
    sizeof(PyoaDoubleAppDef_oaConstraintDefObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintDefp result= (oaDoubleAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintDef_FromoaDoubleAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintDef_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintDef_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintDef",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintGroupObject* self = (PyoaDoubleAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintGroup)
    {
        PyParamoaDoubleAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintGroup_tp_dealloc(PyoaDoubleAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintGroup value;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintGroup v1;
    PyParamoaDoubleAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintGroup**) ((PyoaDoubleAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(oaDoubleAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintGroupObject* self = (PyoaDoubleAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(oaDoubleAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintGroupObject* self = (PyoaDoubleAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaDouble get(const oaConstraintGroup* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintGroup,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroup data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupObject* self=(PyoaDoubleAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroup data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupObject* self=(PyoaDoubleAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaDouble)\n"
"    Calls: void set(oaConstraintGroup* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroup data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupObject* self=(PyoaDoubleAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintGroup data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintGroup data;
  int convert_status=PyoaDoubleAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_set,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintGroup)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintGroup&)\n"
"    Signature: oaDoubleAppDef_oaConstraintGroup||cref-oaDoubleAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintGroup",
    sizeof(PyoaDoubleAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupp result= (oaDoubleAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintGroup_FromoaDoubleAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self = (PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintGroupHeader)
    {
        PyParamoaDoubleAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintGroupHeader v1;
    PyParamoaDoubleAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintGroupHeader**) ((PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(oaDoubleAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self = (PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(oaDoubleAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self = (PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaDouble get(const oaConstraintGroupHeader* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintGroupHeader,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self=(PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self=(PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaDouble)\n"
"    Calls: void set(oaConstraintGroupHeader* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupHeaderObject* self=(PyoaDoubleAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaDoubleAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaDoubleAppDef_oaConstraintGroupHeader||cref-oaDoubleAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintGroupHeader",
    sizeof(PyoaDoubleAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupHeaderp result= (oaDoubleAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupHeader_FromoaDoubleAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintGroupMemObject* self = (PyoaDoubleAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintGroupMem)
    {
        PyParamoaDoubleAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintGroupMem_tp_dealloc(PyoaDoubleAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintGroupMem v1;
    PyParamoaDoubleAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintGroupMem**) ((PyoaDoubleAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(oaDoubleAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintGroupMemObject* self = (PyoaDoubleAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(oaDoubleAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintGroupMemObject* self = (PyoaDoubleAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaDouble get(const oaConstraintGroupMem* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintGroupMem,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupMemObject* self=(PyoaDoubleAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupMemObject* self=(PyoaDoubleAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaDouble)\n"
"    Calls: void set(oaConstraintGroupMem* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintGroupMemObject* self=(PyoaDoubleAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaDoubleAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaDoubleAppDef_oaConstraintGroupMem||cref-oaDoubleAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintGroupMem",
    sizeof(PyoaDoubleAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintGroupMemp result= (oaDoubleAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintGroupMem_FromoaDoubleAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintParamObject* self = (PyoaDoubleAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintParam)
    {
        PyParamoaDoubleAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintParam, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintParam_tp_dealloc(PyoaDoubleAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintParam value;
    int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintParam v1;
    PyParamoaDoubleAppDef_oaConstraintParam v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintParam**) ((PyoaDoubleAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(oaDoubleAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintParam_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintParamObject* self = (PyoaDoubleAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(oaDoubleAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintParam_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintParamObject* self = (PyoaDoubleAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaDouble get(const oaConstraintParam* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintParam,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParam data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamObject* self=(PyoaDoubleAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParam data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamObject* self=(PyoaDoubleAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaDouble)\n"
"    Calls: void set(oaConstraintParam* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParam data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamObject* self=(PyoaDoubleAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintParam data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintParam data;
  int convert_status=PyoaDoubleAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintParam_get,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintParam_set,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintParam)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintParam&)\n"
"    Signature: oaDoubleAppDef_oaConstraintParam||cref-oaDoubleAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintParam",
    sizeof(PyoaDoubleAppDef_oaConstraintParamObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamp result= (oaDoubleAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintParam_FromoaDoubleAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintParam_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintParam_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintParam",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaConstraintParamDefObject* self = (PyoaDoubleAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaConstraintParamDef)
    {
        PyParamoaDoubleAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaDoubleAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaConstraintParamDef_tp_dealloc(PyoaDoubleAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaConstraintParamDef value;
    int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaDoubleAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaConstraintParamDef v1;
    PyParamoaDoubleAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaConstraintParamDef**) ((PyoaDoubleAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(oaDoubleAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaConstraintParamDefObject* self = (PyoaDoubleAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(oaDoubleAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaDoubleAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaConstraintParamDefObject* self = (PyoaDoubleAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaDouble get(const oaConstraintParamDef* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaConstraintParamDef,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParamDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamDefObject* self=(PyoaDoubleAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParamDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamDefObject* self=(PyoaDoubleAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaDouble)\n"
"    Calls: void set(oaConstraintParamDef* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaConstraintParamDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaConstraintParamDefObject* self=(PyoaDoubleAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaConstraintParamDef data;
    int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaConstraintParamDef data;
  int convert_status=PyoaDoubleAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_get,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_set,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaDoubleAppDef_oaConstraintParamDef&)\n"
"    Signature: oaDoubleAppDef_oaConstraintParamDef||cref-oaDoubleAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaConstraintParamDef",
    sizeof(PyoaDoubleAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaDoubleAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaDoubleAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaConstraintParamDefp result= (oaDoubleAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaConstraintParamDef_FromoaDoubleAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaDoubleAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaDoubleAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaDoubleAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDMDataObject* self = (PyoaDoubleAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDMData)
    {
        PyParamoaDoubleAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDMData, Choices are:\n"
        "    (oaDoubleAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDMData_tp_dealloc(PyoaDoubleAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDMData value;
    int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDoubleAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDMData v1;
    PyParamoaDoubleAppDef_oaDMData v2;
    int convert_status1=PyoaDoubleAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDMData_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDMData**) ((PyoaDoubleAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(oaDoubleAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDMData_Type.tp_alloc(&PyoaDoubleAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDMDataObject* self = (PyoaDoubleAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(oaDoubleAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDMData_Type.tp_alloc(&PyoaDoubleAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDMDataObject* self = (PyoaDoubleAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_get_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaDouble get(const oaDMData* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDMData,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMData data;
    int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMDataObject* self=(PyoaDoubleAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMData data;
    int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMDataObject* self=(PyoaDoubleAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_set_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaDouble)\n"
"    Calls: void set(oaDMData* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDMData,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMData data;
    int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMDataObject* self=(PyoaDoubleAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_isNull_doc[] =
"Class: oaDoubleAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDMData data;
    int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDMData_assign_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDMData data;
  int convert_status=PyoaDoubleAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDMData_get,METH_VARARGS,oaDoubleAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDMData_getDefault,METH_VARARGS,oaDoubleAppDef_oaDMData_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDMData_set,METH_VARARGS,oaDoubleAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDMData_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDMData_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_doc[] = 
"Class: oaDoubleAppDef_oaDMData\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDMData)\n"
"    Calls: (const oaDoubleAppDef_oaDMData&)\n"
"    Signature: oaDoubleAppDef_oaDMData||cref-oaDoubleAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDMData",
    sizeof(PyoaDoubleAppDef_oaDMDataObject),
    0,
    (destructor)oaDoubleAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::find(p1.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMData_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMDatap result= (oaDoubleAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDMData_FromoaDoubleAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDMData_static_find,METH_VARARGS,oaDoubleAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDMData_static_get,METH_VARARGS,oaDoubleAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDMData",
           (PyObject*)(&PyoaDoubleAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDMData_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDMFileObject* self = (PyoaDoubleAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDMFile)
    {
        PyParamoaDoubleAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDMFile, Choices are:\n"
        "    (oaDoubleAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDMFile_tp_dealloc(PyoaDoubleAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDMFile value;
    int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDoubleAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDMFile v1;
    PyParamoaDoubleAppDef_oaDMFile v2;
    int convert_status1=PyoaDoubleAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDMFile**) ((PyoaDoubleAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(oaDoubleAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDMFile_Type.tp_alloc(&PyoaDoubleAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDMFileObject* self = (PyoaDoubleAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(oaDoubleAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDMFile_Type.tp_alloc(&PyoaDoubleAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDMFileObject* self = (PyoaDoubleAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_get_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaDouble get(const oaDMFile* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDMFile,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMFile data;
    int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMFileObject* self=(PyoaDoubleAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMFile data;
    int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMFileObject* self=(PyoaDoubleAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_set_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaDouble)\n"
"    Calls: void set(oaDMFile* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDMFile,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDMFile data;
    int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDMFileObject* self=(PyoaDoubleAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_isNull_doc[] =
"Class: oaDoubleAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDMFile data;
    int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDMFile_assign_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDMFile data;
  int convert_status=PyoaDoubleAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDMFile_get,METH_VARARGS,oaDoubleAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDMFile_getDefault,METH_VARARGS,oaDoubleAppDef_oaDMFile_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDMFile_set,METH_VARARGS,oaDoubleAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDMFile_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_doc[] = 
"Class: oaDoubleAppDef_oaDMFile\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDMFile)\n"
"    Calls: (const oaDoubleAppDef_oaDMFile&)\n"
"    Signature: oaDoubleAppDef_oaDMFile||cref-oaDoubleAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDMFile",
    sizeof(PyoaDoubleAppDef_oaDMFileObject),
    0,
    (destructor)oaDoubleAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::find(p1.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDMFile_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDMFilep result= (oaDoubleAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDMFile_FromoaDoubleAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDMFile_static_find,METH_VARARGS,oaDoubleAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDMFile_static_get,METH_VARARGS,oaDoubleAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDMFile",
           (PyObject*)(&PyoaDoubleAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDMFile_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDerivedLayerParamObject* self = (PyoaDoubleAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDerivedLayerParam)
    {
        PyParamoaDoubleAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaDoubleAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDerivedLayerParam_tp_dealloc(PyoaDoubleAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaDoubleAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDerivedLayerParam v1;
    PyParamoaDoubleAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDerivedLayerParam**) ((PyoaDoubleAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(oaDoubleAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaDoubleAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDerivedLayerParamObject* self = (PyoaDoubleAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(oaDoubleAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaDoubleAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDerivedLayerParamObject* self = (PyoaDoubleAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: oaDouble get(const oaDerivedLayerParam* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDerivedLayerParam,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDerivedLayerParamObject* self=(PyoaDoubleAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDerivedLayerParamObject* self=(PyoaDoubleAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,oaDouble)\n"
"    Calls: void set(oaDerivedLayerParam* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDerivedLayerParamObject* self=(PyoaDoubleAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaDoubleAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaDoubleAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaDoubleAppDef_oaDerivedLayerParam||cref-oaDoubleAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDerivedLayerParam",
    sizeof(PyoaDoubleAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaDoubleAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDerivedLayerParamp result= (oaDoubleAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDerivedLayerParam_FromoaDoubleAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaDoubleAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaDoubleAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDesignObject* self = (PyoaDoubleAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDesign)
    {
        PyParamoaDoubleAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDesign, Choices are:\n"
        "    (oaDoubleAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDesign_tp_dealloc(PyoaDoubleAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDesign value;
    int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDoubleAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDesign v1;
    PyParamoaDoubleAppDef_oaDesign v2;
    int convert_status1=PyoaDoubleAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDesign_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDesign**) ((PyoaDoubleAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(oaDoubleAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDesign_Type.tp_alloc(&PyoaDoubleAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDesignObject* self = (PyoaDoubleAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(oaDoubleAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDesign_Type.tp_alloc(&PyoaDoubleAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDesignObject* self = (PyoaDoubleAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_get_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign)\n"
"    Calls: oaDouble get(const oaDesign* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDesign,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesign data;
    int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignObject* self=(PyoaDoubleAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesign data;
    int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignObject* self=(PyoaDoubleAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_set_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,oaDouble)\n"
"    Calls: void set(oaDesign* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDesign,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesign data;
    int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignObject* self=(PyoaDoubleAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_isNull_doc[] =
"Class: oaDoubleAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDesign data;
    int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDesign_assign_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDesign data;
  int convert_status=PyoaDoubleAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDesign_get,METH_VARARGS,oaDoubleAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDesign_getDefault,METH_VARARGS,oaDoubleAppDef_oaDesign_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDesign_set,METH_VARARGS,oaDoubleAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDesign_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDesign_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_doc[] = 
"Class: oaDoubleAppDef_oaDesign\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDesign)\n"
"    Calls: (const oaDoubleAppDef_oaDesign&)\n"
"    Signature: oaDoubleAppDef_oaDesign||cref-oaDoubleAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDesign",
    sizeof(PyoaDoubleAppDef_oaDesignObject),
    0,
    (destructor)oaDoubleAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::find(p1.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesign_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignp result= (oaDoubleAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDesign_FromoaDoubleAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDesign_static_find,METH_VARARGS,oaDoubleAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDesign_static_get,METH_VARARGS,oaDoubleAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDesign",
           (PyObject*)(&PyoaDoubleAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDesign_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDesignInstObject* self = (PyoaDoubleAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDesignInst)
    {
        PyParamoaDoubleAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDesignInst, Choices are:\n"
        "    (oaDoubleAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDesignInst_tp_dealloc(PyoaDoubleAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDesignInst value;
    int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDesignInst v1;
    PyParamoaDoubleAppDef_oaDesignInst v2;
    int convert_status1=PyoaDoubleAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDesignInst**) ((PyoaDoubleAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(oaDoubleAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDesignInst_Type.tp_alloc(&PyoaDoubleAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDesignInstObject* self = (PyoaDoubleAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(oaDoubleAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDesignInst_Type.tp_alloc(&PyoaDoubleAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDesignInstObject* self = (PyoaDoubleAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_get_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: oaDouble get(const oaDesignInst* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDesignInst,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesignInst data;
    int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignInstObject* self=(PyoaDoubleAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesignInst data;
    int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignInstObject* self=(PyoaDoubleAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_set_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,oaDouble)\n"
"    Calls: void set(oaDesignInst* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDesignInst data;
    int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDesignInstObject* self=(PyoaDoubleAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_isNull_doc[] =
"Class: oaDoubleAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDesignInst data;
    int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDesignInst_assign_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDesignInst data;
  int convert_status=PyoaDoubleAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDesignInst_get,METH_VARARGS,oaDoubleAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDesignInst_getDefault,METH_VARARGS,oaDoubleAppDef_oaDesignInst_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDesignInst_set,METH_VARARGS,oaDoubleAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDesignInst)\n"
"    Calls: (const oaDoubleAppDef_oaDesignInst&)\n"
"    Signature: oaDoubleAppDef_oaDesignInst||cref-oaDoubleAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDesignInst",
    sizeof(PyoaDoubleAppDef_oaDesignInstObject),
    0,
    (destructor)oaDoubleAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::find(p1.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDesignInstp result= (oaDoubleAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDesignInst_FromoaDoubleAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDesignInst_static_find,METH_VARARGS,oaDoubleAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDesignInst_static_get,METH_VARARGS,oaDoubleAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDesignInst",
           (PyObject*)(&PyoaDoubleAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaDeviceObject* self = (PyoaDoubleAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaDevice)
    {
        PyParamoaDoubleAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaDevice, Choices are:\n"
        "    (oaDoubleAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaDevice_tp_dealloc(PyoaDoubleAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaDevice value;
    int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDoubleAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaDevice v1;
    PyParamoaDoubleAppDef_oaDevice v2;
    int convert_status1=PyoaDoubleAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaDevice_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaDevice**) ((PyoaDoubleAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(oaDoubleAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaDevice_Type.tp_alloc(&PyoaDoubleAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaDeviceObject* self = (PyoaDoubleAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(oaDoubleAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaDevice_Type.tp_alloc(&PyoaDoubleAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaDeviceObject* self = (PyoaDoubleAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_get_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice)\n"
"    Calls: oaDouble get(const oaDevice* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaDevice,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDevice data;
    int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDeviceObject* self=(PyoaDoubleAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDevice data;
    int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDeviceObject* self=(PyoaDoubleAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_set_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,oaDouble)\n"
"    Calls: void set(oaDevice* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaDevice,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaDevice data;
    int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaDeviceObject* self=(PyoaDoubleAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_isNull_doc[] =
"Class: oaDoubleAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaDevice data;
    int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaDevice_assign_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaDevice data;
  int convert_status=PyoaDoubleAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaDevice_get,METH_VARARGS,oaDoubleAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaDevice_getDefault,METH_VARARGS,oaDoubleAppDef_oaDevice_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaDevice_set,METH_VARARGS,oaDoubleAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaDevice_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaDevice_tp_assign,METH_VARARGS,oaDoubleAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_doc[] = 
"Class: oaDoubleAppDef_oaDevice\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaDevice)\n"
"    Calls: (const oaDoubleAppDef_oaDevice&)\n"
"    Signature: oaDoubleAppDef_oaDevice||cref-oaDoubleAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaDevice",
    sizeof(PyoaDoubleAppDef_oaDeviceObject),
    0,
    (destructor)oaDoubleAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_static_find_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::find(p1.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaDevice_static_get_doc[] = 
"Class: oaDoubleAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaDevicep result= (oaDoubleAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaDevice_FromoaDoubleAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaDevice_static_find,METH_VARARGS,oaDoubleAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaDevice_static_get,METH_VARARGS,oaDoubleAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaDevice",
           (PyObject*)(&PyoaDoubleAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaDevice_Type.tp_dict;
    for(method=oaDoubleAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaElmore
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaElmore_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaElmore_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaElmoreObject* self = (PyoaDoubleAppDef_oaElmoreObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaElmore)
    {
        PyParamoaDoubleAppDef_oaElmore p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaElmore_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaElmore, Choices are:\n"
        "    (oaDoubleAppDef_oaElmore)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaElmore_tp_dealloc(PyoaDoubleAppDef_oaElmoreObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaElmore_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaElmore value;
    int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDoubleAppDef_oaElmore::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaElmore_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaElmore v1;
    PyParamoaDoubleAppDef_oaElmore v2;
    int convert_status1=PyoaDoubleAppDef_oaElmore_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaElmore_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaElmore_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaElmore* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaElmore_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaElmore**) ((PyoaDoubleAppDef_oaElmoreObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaElmore Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(oaDoubleAppDef_oaElmore** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaElmore* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaElmore_Type.tp_alloc(&PyoaDoubleAppDef_oaElmore_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaElmoreObject* self = (PyoaDoubleAppDef_oaElmoreObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(oaDoubleAppDef_oaElmore* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaElmore_Type.tp_alloc(&PyoaDoubleAppDef_oaElmore_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaElmoreObject* self = (PyoaDoubleAppDef_oaElmoreObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_get_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaElmore)\n"
"    Calls: oaDouble get(const oaElmore* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaElmore,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaElmore data;
    int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaElmoreObject* self=(PyoaDoubleAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaElmore data;
    int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaElmoreObject* self=(PyoaDoubleAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_set_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaElmore,oaDouble)\n"
"    Calls: void set(oaElmore* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaElmore,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaElmore data;
    int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaElmoreObject* self=(PyoaDoubleAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_isNull_doc[] =
"Class: oaDoubleAppDef_oaElmore, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaElmore data;
    int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaElmore_assign_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaElmore data;
  int convert_status=PyoaDoubleAppDef_oaElmore_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaElmore p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaElmore_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaElmore_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaElmore_get,METH_VARARGS,oaDoubleAppDef_oaElmore_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaElmore_getDefault,METH_VARARGS,oaDoubleAppDef_oaElmore_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaElmore_set,METH_VARARGS,oaDoubleAppDef_oaElmore_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaElmore_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaElmore_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaElmore_tp_assign,METH_VARARGS,oaDoubleAppDef_oaElmore_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_doc[] = 
"Class: oaDoubleAppDef_oaElmore\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaElmore)\n"
"    Calls: (const oaDoubleAppDef_oaElmore&)\n"
"    Signature: oaDoubleAppDef_oaElmore||cref-oaDoubleAppDef_oaElmore,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaElmore_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaElmore",
    sizeof(PyoaDoubleAppDef_oaElmoreObject),
    0,
    (destructor)oaDoubleAppDef_oaElmore_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaElmore_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaElmore_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaElmore_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaElmore_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaElmore_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_static_find_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaElmore* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaElmore|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaElmore* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::find(p1.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaElmore, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaElmore_static_get_doc[] = 
"Class: oaDoubleAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaElmore_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaElmorep result= (oaDoubleAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaElmore_FromoaDoubleAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaElmore, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaElmore_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaElmore_static_find,METH_VARARGS,oaDoubleAppDef_oaElmore_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaElmore_static_get,METH_VARARGS,oaDoubleAppDef_oaElmore_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaElmore_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaElmore_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaElmore\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaElmore",
           (PyObject*)(&PyoaDoubleAppDef_oaElmore_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaElmore\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaElmore_Type.tp_dict;
    for(method=oaDoubleAppDef_oaElmore_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaFigGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFigGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaFigGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaFigGroupObject* self = (PyoaDoubleAppDef_oaFigGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaFigGroup)
    {
        PyParamoaDoubleAppDef_oaFigGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaFigGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaFigGroup, Choices are:\n"
        "    (oaDoubleAppDef_oaFigGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaFigGroup_tp_dealloc(PyoaDoubleAppDef_oaFigGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFigGroup_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaFigGroup value;
    int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDoubleAppDef_oaFigGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaFigGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaFigGroup v1;
    PyParamoaDoubleAppDef_oaFigGroup v2;
    int convert_status1=PyoaDoubleAppDef_oaFigGroup_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaFigGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaFigGroup_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaFigGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaFigGroup_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaFigGroup**) ((PyoaDoubleAppDef_oaFigGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaFigGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(oaDoubleAppDef_oaFigGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaFigGroup* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaFigGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaFigGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaFigGroupObject* self = (PyoaDoubleAppDef_oaFigGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(oaDoubleAppDef_oaFigGroup* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaFigGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaFigGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaFigGroupObject* self = (PyoaDoubleAppDef_oaFigGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_get_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: oaDouble get(const oaFigGroup* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaFigGroup,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroup data;
    int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupObject* self=(PyoaDoubleAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroup data;
    int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupObject* self=(PyoaDoubleAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_set_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaFigGroup,oaDouble)\n"
"    Calls: void set(oaFigGroup* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaFigGroup,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroup data;
    int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupObject* self=(PyoaDoubleAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_isNull_doc[] =
"Class: oaDoubleAppDef_oaFigGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaFigGroup data;
    int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaFigGroup_assign_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaFigGroup data;
  int convert_status=PyoaDoubleAppDef_oaFigGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaFigGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaFigGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaFigGroup_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaFigGroup_get,METH_VARARGS,oaDoubleAppDef_oaFigGroup_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaFigGroup_getDefault,METH_VARARGS,oaDoubleAppDef_oaFigGroup_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaFigGroup_set,METH_VARARGS,oaDoubleAppDef_oaFigGroup_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaFigGroup_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaFigGroup_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaFigGroup_tp_assign,METH_VARARGS,oaDoubleAppDef_oaFigGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaFigGroup)\n"
"    Calls: (const oaDoubleAppDef_oaFigGroup&)\n"
"    Signature: oaDoubleAppDef_oaFigGroup||cref-oaDoubleAppDef_oaFigGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaFigGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaFigGroup",
    sizeof(PyoaDoubleAppDef_oaFigGroupObject),
    0,
    (destructor)oaDoubleAppDef_oaFigGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaFigGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaFigGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaFigGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaFigGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaFigGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_static_find_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::find(p1.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFigGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroup_static_get_doc[] = 
"Class: oaDoubleAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupp result= (oaDoubleAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaFigGroup_FromoaDoubleAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFigGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaFigGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaFigGroup_static_find,METH_VARARGS,oaDoubleAppDef_oaFigGroup_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaFigGroup_static_get,METH_VARARGS,oaDoubleAppDef_oaFigGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaFigGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaFigGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaFigGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaFigGroup",
           (PyObject*)(&PyoaDoubleAppDef_oaFigGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaFigGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaFigGroup_Type.tp_dict;
    for(method=oaDoubleAppDef_oaFigGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaFigGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFigGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaFigGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaFigGroupMemObject* self = (PyoaDoubleAppDef_oaFigGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaFigGroupMem)
    {
        PyParamoaDoubleAppDef_oaFigGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaFigGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaFigGroupMem, Choices are:\n"
        "    (oaDoubleAppDef_oaFigGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaFigGroupMem_tp_dealloc(PyoaDoubleAppDef_oaFigGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFigGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaFigGroupMem value;
    int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDoubleAppDef_oaFigGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaFigGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaFigGroupMem v1;
    PyParamoaDoubleAppDef_oaFigGroupMem v2;
    int convert_status1=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaFigGroupMem_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaFigGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaFigGroupMem_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaFigGroupMem**) ((PyoaDoubleAppDef_oaFigGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaFigGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(oaDoubleAppDef_oaFigGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaFigGroupMem* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaDoubleAppDef_oaFigGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaFigGroupMemObject* self = (PyoaDoubleAppDef_oaFigGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(oaDoubleAppDef_oaFigGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaDoubleAppDef_oaFigGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaFigGroupMemObject* self = (PyoaDoubleAppDef_oaFigGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_get_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: oaDouble get(const oaFigGroupMem* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaFigGroupMem,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupMemObject* self=(PyoaDoubleAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupMemObject* self=(PyoaDoubleAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_set_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaFigGroupMem,oaDouble)\n"
"    Calls: void set(oaFigGroupMem* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaFigGroupMem,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFigGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFigGroupMemObject* self=(PyoaDoubleAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_isNull_doc[] =
"Class: oaDoubleAppDef_oaFigGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaFigGroupMem data;
    int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaFigGroupMem_assign_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaFigGroupMem data;
  int convert_status=PyoaDoubleAppDef_oaFigGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaFigGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaFigGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaFigGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_get,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_getDefault,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_set,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_tp_assign,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaFigGroupMem)\n"
"    Calls: (const oaDoubleAppDef_oaFigGroupMem&)\n"
"    Signature: oaDoubleAppDef_oaFigGroupMem||cref-oaDoubleAppDef_oaFigGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaFigGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaFigGroupMem",
    sizeof(PyoaDoubleAppDef_oaFigGroupMemObject),
    0,
    (destructor)oaDoubleAppDef_oaFigGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaFigGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaFigGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaFigGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaFigGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaFigGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_static_find_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::find(p1.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFigGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFigGroupMem_static_get_doc[] = 
"Class: oaDoubleAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaFigGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFigGroupMemp result= (oaDoubleAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaFigGroupMem_FromoaDoubleAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFigGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaFigGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_static_find,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaFigGroupMem_static_get,METH_VARARGS,oaDoubleAppDef_oaFigGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaFigGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaFigGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaFigGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaFigGroupMem",
           (PyObject*)(&PyoaDoubleAppDef_oaFigGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaFigGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaFigGroupMem_Type.tp_dict;
    for(method=oaDoubleAppDef_oaFigGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaFrame
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaFrame_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaFrameObject* self = (PyoaDoubleAppDef_oaFrameObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaFrame)
    {
        PyParamoaDoubleAppDef_oaFrame p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaFrame_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaFrame, Choices are:\n"
        "    (oaDoubleAppDef_oaFrame)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaFrame_tp_dealloc(PyoaDoubleAppDef_oaFrameObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFrame_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaFrame value;
    int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDoubleAppDef_oaFrame::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaFrame_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaFrame v1;
    PyParamoaDoubleAppDef_oaFrame v2;
    int convert_status1=PyoaDoubleAppDef_oaFrame_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaFrame_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaFrame_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaFrame* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaFrame_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaFrame**) ((PyoaDoubleAppDef_oaFrameObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaFrame Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(oaDoubleAppDef_oaFrame** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaFrame* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaFrame_Type.tp_alloc(&PyoaDoubleAppDef_oaFrame_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaFrameObject* self = (PyoaDoubleAppDef_oaFrameObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(oaDoubleAppDef_oaFrame* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaFrame_Type.tp_alloc(&PyoaDoubleAppDef_oaFrame_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaFrameObject* self = (PyoaDoubleAppDef_oaFrameObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_get_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaFrame)\n"
"    Calls: oaDouble get(const oaFrame* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaFrame,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrame data;
    int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameObject* self=(PyoaDoubleAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrame data;
    int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameObject* self=(PyoaDoubleAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_set_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaFrame,oaDouble)\n"
"    Calls: void set(oaFrame* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaFrame,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrame data;
    int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameObject* self=(PyoaDoubleAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_isNull_doc[] =
"Class: oaDoubleAppDef_oaFrame, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaFrame data;
    int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaFrame_assign_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaFrame data;
  int convert_status=PyoaDoubleAppDef_oaFrame_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaFrame p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaFrame_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaFrame_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaFrame_get,METH_VARARGS,oaDoubleAppDef_oaFrame_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaFrame_getDefault,METH_VARARGS,oaDoubleAppDef_oaFrame_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaFrame_set,METH_VARARGS,oaDoubleAppDef_oaFrame_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaFrame_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaFrame_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaFrame_tp_assign,METH_VARARGS,oaDoubleAppDef_oaFrame_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_doc[] = 
"Class: oaDoubleAppDef_oaFrame\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaFrame)\n"
"    Calls: (const oaDoubleAppDef_oaFrame&)\n"
"    Signature: oaDoubleAppDef_oaFrame||cref-oaDoubleAppDef_oaFrame,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaFrame_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaFrame",
    sizeof(PyoaDoubleAppDef_oaFrameObject),
    0,
    (destructor)oaDoubleAppDef_oaFrame_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaFrame_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaFrame_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaFrame_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaFrame_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaFrame_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_static_find_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFrame* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFrame|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFrame* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::find(p1.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFrame, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrame_static_get_doc[] = 
"Class: oaDoubleAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaFrame_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFramep result= (oaDoubleAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaFrame_FromoaDoubleAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFrame, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaFrame_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaFrame_static_find,METH_VARARGS,oaDoubleAppDef_oaFrame_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaFrame_static_get,METH_VARARGS,oaDoubleAppDef_oaFrame_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaFrame_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaFrame_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaFrame\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaFrame",
           (PyObject*)(&PyoaDoubleAppDef_oaFrame_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaFrame\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaFrame_Type.tp_dict;
    for(method=oaDoubleAppDef_oaFrame_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaFrameInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFrameInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaFrameInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaFrameInstObject* self = (PyoaDoubleAppDef_oaFrameInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaFrameInst)
    {
        PyParamoaDoubleAppDef_oaFrameInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaFrameInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaFrameInst, Choices are:\n"
        "    (oaDoubleAppDef_oaFrameInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaFrameInst_tp_dealloc(PyoaDoubleAppDef_oaFrameInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaFrameInst_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaFrameInst value;
    int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDoubleAppDef_oaFrameInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaFrameInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaFrameInst v1;
    PyParamoaDoubleAppDef_oaFrameInst v2;
    int convert_status1=PyoaDoubleAppDef_oaFrameInst_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaFrameInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaFrameInst_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaFrameInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaFrameInst_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaFrameInst**) ((PyoaDoubleAppDef_oaFrameInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaFrameInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(oaDoubleAppDef_oaFrameInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaFrameInst* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaFrameInst_Type.tp_alloc(&PyoaDoubleAppDef_oaFrameInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaFrameInstObject* self = (PyoaDoubleAppDef_oaFrameInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(oaDoubleAppDef_oaFrameInst* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaFrameInst_Type.tp_alloc(&PyoaDoubleAppDef_oaFrameInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaFrameInstObject* self = (PyoaDoubleAppDef_oaFrameInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_get_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: oaDouble get(const oaFrameInst* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaFrameInst,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrameInst data;
    int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameInstObject* self=(PyoaDoubleAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrameInst data;
    int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameInstObject* self=(PyoaDoubleAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_set_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaFrameInst,oaDouble)\n"
"    Calls: void set(oaFrameInst* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaFrameInst,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaFrameInst data;
    int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaFrameInstObject* self=(PyoaDoubleAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_isNull_doc[] =
"Class: oaDoubleAppDef_oaFrameInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaFrameInst data;
    int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaFrameInst_assign_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaFrameInst data;
  int convert_status=PyoaDoubleAppDef_oaFrameInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaFrameInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaFrameInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaFrameInst_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaFrameInst_get,METH_VARARGS,oaDoubleAppDef_oaFrameInst_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaFrameInst_getDefault,METH_VARARGS,oaDoubleAppDef_oaFrameInst_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaFrameInst_set,METH_VARARGS,oaDoubleAppDef_oaFrameInst_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaFrameInst_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaFrameInst_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaFrameInst_tp_assign,METH_VARARGS,oaDoubleAppDef_oaFrameInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaFrameInst)\n"
"    Calls: (const oaDoubleAppDef_oaFrameInst&)\n"
"    Signature: oaDoubleAppDef_oaFrameInst||cref-oaDoubleAppDef_oaFrameInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaFrameInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaFrameInst",
    sizeof(PyoaDoubleAppDef_oaFrameInstObject),
    0,
    (destructor)oaDoubleAppDef_oaFrameInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaFrameInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaFrameInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaFrameInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaFrameInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaFrameInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_static_find_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::find(p1.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFrameInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaFrameInst_static_get_doc[] = 
"Class: oaDoubleAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaFrameInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaFrameInstp result= (oaDoubleAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaFrameInst_FromoaDoubleAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaFrameInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaFrameInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaFrameInst_static_find,METH_VARARGS,oaDoubleAppDef_oaFrameInst_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaFrameInst_static_get,METH_VARARGS,oaDoubleAppDef_oaFrameInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaFrameInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaFrameInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaFrameInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaFrameInst",
           (PyObject*)(&PyoaDoubleAppDef_oaFrameInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaFrameInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaFrameInst_Type.tp_dict;
    for(method=oaDoubleAppDef_oaFrameInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaGCellPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGCellPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaGCellPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaGCellPatternObject* self = (PyoaDoubleAppDef_oaGCellPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaGCellPattern)
    {
        PyParamoaDoubleAppDef_oaGCellPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaGCellPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaGCellPattern, Choices are:\n"
        "    (oaDoubleAppDef_oaGCellPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaGCellPattern_tp_dealloc(PyoaDoubleAppDef_oaGCellPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGCellPattern_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaGCellPattern value;
    int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaDoubleAppDef_oaGCellPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaGCellPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaGCellPattern v1;
    PyParamoaDoubleAppDef_oaGCellPattern v2;
    int convert_status1=PyoaDoubleAppDef_oaGCellPattern_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaGCellPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaGCellPattern_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaGCellPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaGCellPattern_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaGCellPattern**) ((PyoaDoubleAppDef_oaGCellPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaGCellPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(oaDoubleAppDef_oaGCellPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaGCellPattern* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaGCellPattern_Type.tp_alloc(&PyoaDoubleAppDef_oaGCellPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaGCellPatternObject* self = (PyoaDoubleAppDef_oaGCellPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(oaDoubleAppDef_oaGCellPattern* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaGCellPattern_Type.tp_alloc(&PyoaDoubleAppDef_oaGCellPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaGCellPatternObject* self = (PyoaDoubleAppDef_oaGCellPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_get_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: oaDouble get(const oaGCellPattern* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaGCellPattern,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGCellPattern data;
    int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGCellPatternObject* self=(PyoaDoubleAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGCellPattern data;
    int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGCellPatternObject* self=(PyoaDoubleAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_set_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaGCellPattern,oaDouble)\n"
"    Calls: void set(oaGCellPattern* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaGCellPattern,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGCellPattern data;
    int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGCellPatternObject* self=(PyoaDoubleAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_isNull_doc[] =
"Class: oaDoubleAppDef_oaGCellPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaGCellPattern data;
    int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaGCellPattern_assign_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaGCellPattern data;
  int convert_status=PyoaDoubleAppDef_oaGCellPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaGCellPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaGCellPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaGCellPattern_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaGCellPattern_get,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaGCellPattern_getDefault,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaGCellPattern_set,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaGCellPattern_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaGCellPattern_tp_assign,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaGCellPattern)\n"
"    Calls: (const oaDoubleAppDef_oaGCellPattern&)\n"
"    Signature: oaDoubleAppDef_oaGCellPattern||cref-oaDoubleAppDef_oaGCellPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaGCellPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaGCellPattern",
    sizeof(PyoaDoubleAppDef_oaGCellPatternObject),
    0,
    (destructor)oaDoubleAppDef_oaGCellPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaGCellPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaGCellPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaGCellPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaGCellPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaGCellPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_static_find_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::find(p1.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGCellPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGCellPattern_static_get_doc[] = 
"Class: oaDoubleAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaGCellPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGCellPatternp result= (oaDoubleAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaGCellPattern_FromoaDoubleAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGCellPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaGCellPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaGCellPattern_static_find,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaGCellPattern_static_get,METH_VARARGS,oaDoubleAppDef_oaGCellPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaGCellPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaGCellPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaGCellPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaGCellPattern",
           (PyObject*)(&PyoaDoubleAppDef_oaGCellPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaGCellPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaGCellPattern_Type.tp_dict;
    for(method=oaDoubleAppDef_oaGCellPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaGroupObject* self = (PyoaDoubleAppDef_oaGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaGroup)
    {
        PyParamoaDoubleAppDef_oaGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaGroup, Choices are:\n"
        "    (oaDoubleAppDef_oaGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaGroup_tp_dealloc(PyoaDoubleAppDef_oaGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGroup_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaGroup value;
    int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDoubleAppDef_oaGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaGroup v1;
    PyParamoaDoubleAppDef_oaGroup v2;
    int convert_status1=PyoaDoubleAppDef_oaGroup_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaGroup_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaGroup_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaGroup**) ((PyoaDoubleAppDef_oaGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(oaDoubleAppDef_oaGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaGroup* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaGroupObject* self = (PyoaDoubleAppDef_oaGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(oaDoubleAppDef_oaGroup* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaGroup_Type.tp_alloc(&PyoaDoubleAppDef_oaGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaGroupObject* self = (PyoaDoubleAppDef_oaGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_get_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaGroup)\n"
"    Calls: oaDouble get(const oaGroup* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaGroup,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroup data;
    int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupObject* self=(PyoaDoubleAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroup data;
    int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupObject* self=(PyoaDoubleAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_set_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaGroup,oaDouble)\n"
"    Calls: void set(oaGroup* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaGroup,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroup data;
    int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupObject* self=(PyoaDoubleAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_isNull_doc[] =
"Class: oaDoubleAppDef_oaGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaGroup data;
    int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaGroup_assign_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaGroup data;
  int convert_status=PyoaDoubleAppDef_oaGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaGroup_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaGroup_get,METH_VARARGS,oaDoubleAppDef_oaGroup_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaGroup_getDefault,METH_VARARGS,oaDoubleAppDef_oaGroup_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaGroup_set,METH_VARARGS,oaDoubleAppDef_oaGroup_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaGroup_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaGroup_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaGroup_tp_assign,METH_VARARGS,oaDoubleAppDef_oaGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_doc[] = 
"Class: oaDoubleAppDef_oaGroup\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaGroup)\n"
"    Calls: (const oaDoubleAppDef_oaGroup&)\n"
"    Signature: oaDoubleAppDef_oaGroup||cref-oaDoubleAppDef_oaGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaGroup",
    sizeof(PyoaDoubleAppDef_oaGroupObject),
    0,
    (destructor)oaDoubleAppDef_oaGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_static_find_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGroup|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::find(p1.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroup_static_get_doc[] = 
"Class: oaDoubleAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupp result= (oaDoubleAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaGroup_FromoaDoubleAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaGroup_static_find,METH_VARARGS,oaDoubleAppDef_oaGroup_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaGroup_static_get,METH_VARARGS,oaDoubleAppDef_oaGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaGroup",
           (PyObject*)(&PyoaDoubleAppDef_oaGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaGroup_Type.tp_dict;
    for(method=oaDoubleAppDef_oaGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaGroupMember
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGroupMember_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaGroupMember_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaGroupMemberObject* self = (PyoaDoubleAppDef_oaGroupMemberObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaGroupMember)
    {
        PyParamoaDoubleAppDef_oaGroupMember p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaGroupMember_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaGroupMember, Choices are:\n"
        "    (oaDoubleAppDef_oaGroupMember)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaGroupMember_tp_dealloc(PyoaDoubleAppDef_oaGroupMemberObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGroupMember_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaGroupMember value;
    int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDoubleAppDef_oaGroupMember::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaGroupMember_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaGroupMember v1;
    PyParamoaDoubleAppDef_oaGroupMember v2;
    int convert_status1=PyoaDoubleAppDef_oaGroupMember_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaGroupMember_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaGroupMember_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaGroupMember* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaGroupMember_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaGroupMember**) ((PyoaDoubleAppDef_oaGroupMemberObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaGroupMember Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(oaDoubleAppDef_oaGroupMember** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaGroupMember* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaGroupMember_Type.tp_alloc(&PyoaDoubleAppDef_oaGroupMember_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaGroupMemberObject* self = (PyoaDoubleAppDef_oaGroupMemberObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(oaDoubleAppDef_oaGroupMember* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaGroupMember_Type.tp_alloc(&PyoaDoubleAppDef_oaGroupMember_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaGroupMemberObject* self = (PyoaDoubleAppDef_oaGroupMemberObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_get_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: oaDouble get(const oaGroupMember* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaGroupMember,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroupMember data;
    int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupMemberObject* self=(PyoaDoubleAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroupMember data;
    int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupMemberObject* self=(PyoaDoubleAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_set_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaGroupMember,oaDouble)\n"
"    Calls: void set(oaGroupMember* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaGroupMember,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGroupMember data;
    int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGroupMemberObject* self=(PyoaDoubleAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_isNull_doc[] =
"Class: oaDoubleAppDef_oaGroupMember, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaGroupMember data;
    int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaGroupMember_assign_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaGroupMember data;
  int convert_status=PyoaDoubleAppDef_oaGroupMember_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaGroupMember p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaGroupMember_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaGroupMember_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaGroupMember_get,METH_VARARGS,oaDoubleAppDef_oaGroupMember_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaGroupMember_getDefault,METH_VARARGS,oaDoubleAppDef_oaGroupMember_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaGroupMember_set,METH_VARARGS,oaDoubleAppDef_oaGroupMember_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaGroupMember_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaGroupMember_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaGroupMember_tp_assign,METH_VARARGS,oaDoubleAppDef_oaGroupMember_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaGroupMember)\n"
"    Calls: (const oaDoubleAppDef_oaGroupMember&)\n"
"    Signature: oaDoubleAppDef_oaGroupMember||cref-oaDoubleAppDef_oaGroupMember,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaGroupMember_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaGroupMember",
    sizeof(PyoaDoubleAppDef_oaGroupMemberObject),
    0,
    (destructor)oaDoubleAppDef_oaGroupMember_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaGroupMember_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaGroupMember_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaGroupMember_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaGroupMember_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaGroupMember_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_static_find_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::find(p1.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGroupMember, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGroupMember_static_get_doc[] = 
"Class: oaDoubleAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaGroupMember_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGroupMemberp result= (oaDoubleAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaGroupMember_FromoaDoubleAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGroupMember, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaGroupMember_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaGroupMember_static_find,METH_VARARGS,oaDoubleAppDef_oaGroupMember_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaGroupMember_static_get,METH_VARARGS,oaDoubleAppDef_oaGroupMember_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaGroupMember_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaGroupMember_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaGroupMember\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaGroupMember",
           (PyObject*)(&PyoaDoubleAppDef_oaGroupMember_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaGroupMember\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaGroupMember_Type.tp_dict;
    for(method=oaDoubleAppDef_oaGroupMember_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaGuide
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGuide_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaGuide_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaGuideObject* self = (PyoaDoubleAppDef_oaGuideObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaGuide)
    {
        PyParamoaDoubleAppDef_oaGuide p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaGuide_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaGuide, Choices are:\n"
        "    (oaDoubleAppDef_oaGuide)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaGuide_tp_dealloc(PyoaDoubleAppDef_oaGuideObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaGuide_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaGuide value;
    int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDoubleAppDef_oaGuide::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaGuide_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaGuide v1;
    PyParamoaDoubleAppDef_oaGuide v2;
    int convert_status1=PyoaDoubleAppDef_oaGuide_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaGuide_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaGuide_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaGuide* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaGuide_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaGuide**) ((PyoaDoubleAppDef_oaGuideObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaGuide Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(oaDoubleAppDef_oaGuide** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaGuide* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaGuide_Type.tp_alloc(&PyoaDoubleAppDef_oaGuide_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaGuideObject* self = (PyoaDoubleAppDef_oaGuideObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(oaDoubleAppDef_oaGuide* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaGuide_Type.tp_alloc(&PyoaDoubleAppDef_oaGuide_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaGuideObject* self = (PyoaDoubleAppDef_oaGuideObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_get_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaGuide)\n"
"    Calls: oaDouble get(const oaGuide* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaGuide,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGuide data;
    int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGuideObject* self=(PyoaDoubleAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGuide data;
    int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGuideObject* self=(PyoaDoubleAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_set_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaGuide,oaDouble)\n"
"    Calls: void set(oaGuide* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaGuide,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaGuide data;
    int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaGuideObject* self=(PyoaDoubleAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_isNull_doc[] =
"Class: oaDoubleAppDef_oaGuide, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaGuide data;
    int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaGuide_assign_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaGuide data;
  int convert_status=PyoaDoubleAppDef_oaGuide_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaGuide p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaGuide_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaGuide_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaGuide_get,METH_VARARGS,oaDoubleAppDef_oaGuide_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaGuide_getDefault,METH_VARARGS,oaDoubleAppDef_oaGuide_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaGuide_set,METH_VARARGS,oaDoubleAppDef_oaGuide_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaGuide_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaGuide_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaGuide_tp_assign,METH_VARARGS,oaDoubleAppDef_oaGuide_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_doc[] = 
"Class: oaDoubleAppDef_oaGuide\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaGuide)\n"
"    Calls: (const oaDoubleAppDef_oaGuide&)\n"
"    Signature: oaDoubleAppDef_oaGuide||cref-oaDoubleAppDef_oaGuide,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaGuide_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaGuide",
    sizeof(PyoaDoubleAppDef_oaGuideObject),
    0,
    (destructor)oaDoubleAppDef_oaGuide_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaGuide_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaGuide_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaGuide_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaGuide_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaGuide_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_static_find_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGuide* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGuide|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGuide* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::find(p1.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGuide, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaGuide_static_get_doc[] = 
"Class: oaDoubleAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaGuide_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaGuidep result= (oaDoubleAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaGuide_FromoaDoubleAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaGuide, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaGuide_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaGuide_static_find,METH_VARARGS,oaDoubleAppDef_oaGuide_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaGuide_static_get,METH_VARARGS,oaDoubleAppDef_oaGuide_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaGuide_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaGuide_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaGuide\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaGuide",
           (PyObject*)(&PyoaDoubleAppDef_oaGuide_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaGuide\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaGuide_Type.tp_dict;
    for(method=oaDoubleAppDef_oaGuide_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaImage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaImage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaImage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaImageObject* self = (PyoaDoubleAppDef_oaImageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaImage)
    {
        PyParamoaDoubleAppDef_oaImage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaImage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaImage, Choices are:\n"
        "    (oaDoubleAppDef_oaImage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaImage_tp_dealloc(PyoaDoubleAppDef_oaImageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaImage_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaImage value;
    int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDoubleAppDef_oaImage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaImage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaImage v1;
    PyParamoaDoubleAppDef_oaImage v2;
    int convert_status1=PyoaDoubleAppDef_oaImage_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaImage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaImage_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaImage* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaImage_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaImage**) ((PyoaDoubleAppDef_oaImageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaImage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(oaDoubleAppDef_oaImage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaImage* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaImage_Type.tp_alloc(&PyoaDoubleAppDef_oaImage_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaImageObject* self = (PyoaDoubleAppDef_oaImageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(oaDoubleAppDef_oaImage* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaImage_Type.tp_alloc(&PyoaDoubleAppDef_oaImage_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaImageObject* self = (PyoaDoubleAppDef_oaImageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_get_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: get\n"
"  Paramegers: (oaImage)\n"
"    Calls: oaDouble get(const oaImage* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaImage,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaImage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaImage data;
    int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaImageObject* self=(PyoaDoubleAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaImage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaImage data;
    int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaImageObject* self=(PyoaDoubleAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_set_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: set\n"
"  Paramegers: (oaImage,oaDouble)\n"
"    Calls: void set(oaImage* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaImage,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaImage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaImage data;
    int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaImageObject* self=(PyoaDoubleAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_isNull_doc[] =
"Class: oaDoubleAppDef_oaImage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaImage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaImage data;
    int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaImage_assign_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaImage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaImage data;
  int convert_status=PyoaDoubleAppDef_oaImage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaImage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaImage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaImage_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaImage_get,METH_VARARGS,oaDoubleAppDef_oaImage_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaImage_getDefault,METH_VARARGS,oaDoubleAppDef_oaImage_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaImage_set,METH_VARARGS,oaDoubleAppDef_oaImage_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaImage_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaImage_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaImage_tp_assign,METH_VARARGS,oaDoubleAppDef_oaImage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_doc[] = 
"Class: oaDoubleAppDef_oaImage\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaImage)\n"
"    Calls: (const oaDoubleAppDef_oaImage&)\n"
"    Signature: oaDoubleAppDef_oaImage||cref-oaDoubleAppDef_oaImage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaImage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaImage",
    sizeof(PyoaDoubleAppDef_oaImageObject),
    0,
    (destructor)oaDoubleAppDef_oaImage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaImage_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaImage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaImage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaImage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaImage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_static_find_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaImage* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaImage|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaImage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaImage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::find(p1.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaImage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaImage_static_get_doc[] = 
"Class: oaDoubleAppDef_oaImage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaImage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaImagep result= (oaDoubleAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaImage_FromoaDoubleAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaImage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaImage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaImage_static_find,METH_VARARGS,oaDoubleAppDef_oaImage_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaImage_static_get,METH_VARARGS,oaDoubleAppDef_oaImage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaImage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaImage_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaImage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaImage",
           (PyObject*)(&PyoaDoubleAppDef_oaImage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaImage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaImage_Type.tp_dict;
    for(method=oaDoubleAppDef_oaImage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaInstObject* self = (PyoaDoubleAppDef_oaInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaInst)
    {
        PyParamoaDoubleAppDef_oaInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaInst, Choices are:\n"
        "    (oaDoubleAppDef_oaInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaInst_tp_dealloc(PyoaDoubleAppDef_oaInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInst_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaInst value;
    int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDoubleAppDef_oaInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaInst v1;
    PyParamoaDoubleAppDef_oaInst v2;
    int convert_status1=PyoaDoubleAppDef_oaInst_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaInst_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaInst_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaInst**) ((PyoaDoubleAppDef_oaInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(oaDoubleAppDef_oaInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaInst* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaInst_Type.tp_alloc(&PyoaDoubleAppDef_oaInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaInstObject* self = (PyoaDoubleAppDef_oaInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(oaDoubleAppDef_oaInst* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaInst_Type.tp_alloc(&PyoaDoubleAppDef_oaInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaInstObject* self = (PyoaDoubleAppDef_oaInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_get_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: get\n"
"  Paramegers: (oaInst)\n"
"    Calls: oaDouble get(const oaInst* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaInst,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInst data;
    int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstObject* self=(PyoaDoubleAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInst data;
    int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstObject* self=(PyoaDoubleAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_set_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: set\n"
"  Paramegers: (oaInst,oaDouble)\n"
"    Calls: void set(oaInst* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaInst,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInst data;
    int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstObject* self=(PyoaDoubleAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_isNull_doc[] =
"Class: oaDoubleAppDef_oaInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaInst data;
    int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaInst_assign_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaInst data;
  int convert_status=PyoaDoubleAppDef_oaInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaInst_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaInst_get,METH_VARARGS,oaDoubleAppDef_oaInst_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaInst_getDefault,METH_VARARGS,oaDoubleAppDef_oaInst_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaInst_set,METH_VARARGS,oaDoubleAppDef_oaInst_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaInst_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaInst_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaInst_tp_assign,METH_VARARGS,oaDoubleAppDef_oaInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_doc[] = 
"Class: oaDoubleAppDef_oaInst\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaInst)\n"
"    Calls: (const oaDoubleAppDef_oaInst&)\n"
"    Signature: oaDoubleAppDef_oaInst||cref-oaDoubleAppDef_oaInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaInst",
    sizeof(PyoaDoubleAppDef_oaInstObject),
    0,
    (destructor)oaDoubleAppDef_oaInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_static_find_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInst|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::find(p1.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInst_static_get_doc[] = 
"Class: oaDoubleAppDef_oaInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstp result= (oaDoubleAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaInst_FromoaDoubleAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaInst_static_find,METH_VARARGS,oaDoubleAppDef_oaInst_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaInst_static_get,METH_VARARGS,oaDoubleAppDef_oaInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaInst",
           (PyObject*)(&PyoaDoubleAppDef_oaInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaInst_Type.tp_dict;
    for(method=oaDoubleAppDef_oaInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaInstHeaderObject* self = (PyoaDoubleAppDef_oaInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaInstHeader)
    {
        PyParamoaDoubleAppDef_oaInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaInstHeader, Choices are:\n"
        "    (oaDoubleAppDef_oaInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaInstHeader_tp_dealloc(PyoaDoubleAppDef_oaInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaInstHeader value;
    int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDoubleAppDef_oaInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaInstHeader v1;
    PyParamoaDoubleAppDef_oaInstHeader v2;
    int convert_status1=PyoaDoubleAppDef_oaInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaInstHeader_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaInstHeader_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaInstHeader**) ((PyoaDoubleAppDef_oaInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(oaDoubleAppDef_oaInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaInstHeader* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaInstHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaInstHeaderObject* self = (PyoaDoubleAppDef_oaInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(oaDoubleAppDef_oaInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaInstHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaInstHeaderObject* self = (PyoaDoubleAppDef_oaInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_get_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: oaDouble get(const oaInstHeader* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaInstHeader,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstHeader data;
    int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstHeaderObject* self=(PyoaDoubleAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstHeader data;
    int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstHeaderObject* self=(PyoaDoubleAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_set_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaInstHeader,oaDouble)\n"
"    Calls: void set(oaInstHeader* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaInstHeader,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstHeader data;
    int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstHeaderObject* self=(PyoaDoubleAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_isNull_doc[] =
"Class: oaDoubleAppDef_oaInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaInstHeader data;
    int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaInstHeader_assign_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaInstHeader data;
  int convert_status=PyoaDoubleAppDef_oaInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaInstHeader_get,METH_VARARGS,oaDoubleAppDef_oaInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaInstHeader_getDefault,METH_VARARGS,oaDoubleAppDef_oaInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaInstHeader_set,METH_VARARGS,oaDoubleAppDef_oaInstHeader_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaInstHeader_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaInstHeader_tp_assign,METH_VARARGS,oaDoubleAppDef_oaInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaInstHeader)\n"
"    Calls: (const oaDoubleAppDef_oaInstHeader&)\n"
"    Signature: oaDoubleAppDef_oaInstHeader||cref-oaDoubleAppDef_oaInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaInstHeader",
    sizeof(PyoaDoubleAppDef_oaInstHeaderObject),
    0,
    (destructor)oaDoubleAppDef_oaInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_static_find_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::find(p1.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstHeader_static_get_doc[] = 
"Class: oaDoubleAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstHeaderp result= (oaDoubleAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaInstHeader_FromoaDoubleAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaInstHeader_static_find,METH_VARARGS,oaDoubleAppDef_oaInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaInstHeader_static_get,METH_VARARGS,oaDoubleAppDef_oaInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaInstHeader",
           (PyObject*)(&PyoaDoubleAppDef_oaInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaInstHeader_Type.tp_dict;
    for(method=oaDoubleAppDef_oaInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaInstTermObject* self = (PyoaDoubleAppDef_oaInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaInstTerm)
    {
        PyParamoaDoubleAppDef_oaInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaInstTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaInstTerm, Choices are:\n"
        "    (oaDoubleAppDef_oaInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaInstTerm_tp_dealloc(PyoaDoubleAppDef_oaInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaInstTerm value;
    int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDoubleAppDef_oaInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaInstTerm v1;
    PyParamoaDoubleAppDef_oaInstTerm v2;
    int convert_status1=PyoaDoubleAppDef_oaInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaInstTerm_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaInstTerm_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaInstTerm**) ((PyoaDoubleAppDef_oaInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(oaDoubleAppDef_oaInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaInstTerm* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaInstTerm_Type.tp_alloc(&PyoaDoubleAppDef_oaInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaInstTermObject* self = (PyoaDoubleAppDef_oaInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(oaDoubleAppDef_oaInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaInstTerm_Type.tp_alloc(&PyoaDoubleAppDef_oaInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaInstTermObject* self = (PyoaDoubleAppDef_oaInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_get_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: oaDouble get(const oaInstTerm* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaInstTerm,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstTerm data;
    int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstTermObject* self=(PyoaDoubleAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstTerm data;
    int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstTermObject* self=(PyoaDoubleAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_set_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaInstTerm,oaDouble)\n"
"    Calls: void set(oaInstTerm* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaInstTerm,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaInstTerm data;
    int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaInstTermObject* self=(PyoaDoubleAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_isNull_doc[] =
"Class: oaDoubleAppDef_oaInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaInstTerm data;
    int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaInstTerm_assign_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaInstTerm data;
  int convert_status=PyoaDoubleAppDef_oaInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaInstTerm_get,METH_VARARGS,oaDoubleAppDef_oaInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaInstTerm_getDefault,METH_VARARGS,oaDoubleAppDef_oaInstTerm_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaInstTerm_set,METH_VARARGS,oaDoubleAppDef_oaInstTerm_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaInstTerm_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaInstTerm_tp_assign,METH_VARARGS,oaDoubleAppDef_oaInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaInstTerm)\n"
"    Calls: (const oaDoubleAppDef_oaInstTerm&)\n"
"    Signature: oaDoubleAppDef_oaInstTerm||cref-oaDoubleAppDef_oaInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaInstTerm",
    sizeof(PyoaDoubleAppDef_oaInstTermObject),
    0,
    (destructor)oaDoubleAppDef_oaInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_static_find_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::find(p1.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaInstTerm_static_get_doc[] = 
"Class: oaDoubleAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaInstTermp result= (oaDoubleAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaInstTerm_FromoaDoubleAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaInstTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaInstTerm_static_find,METH_VARARGS,oaDoubleAppDef_oaInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaInstTerm_static_get,METH_VARARGS,oaDoubleAppDef_oaInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaInstTerm",
           (PyObject*)(&PyoaDoubleAppDef_oaInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaInstTerm_Type.tp_dict;
    for(method=oaDoubleAppDef_oaInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDoubleAppDef_oaLPPHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaLPPHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDoubleAppDef_oaLPPHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDoubleAppDef_oaLPPHeaderObject* self = (PyoaDoubleAppDef_oaLPPHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDoubleAppDef_oaLPPHeader)
    {
        PyParamoaDoubleAppDef_oaLPPHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDoubleAppDef_oaLPPHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDoubleAppDef_oaLPPHeader, Choices are:\n"
        "    (oaDoubleAppDef_oaLPPHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDoubleAppDef_oaLPPHeader_tp_dealloc(PyoaDoubleAppDef_oaLPPHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDoubleAppDef_oaLPPHeader_tp_repr(PyObject *ob)
{
    PyParamoaDoubleAppDef_oaLPPHeader value;
    int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDoubleAppDef_oaLPPHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDoubleAppDef_oaLPPHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDoubleAppDef_oaLPPHeader v1;
    PyParamoaDoubleAppDef_oaLPPHeader v2;
    int convert_status1=PyoaDoubleAppDef_oaLPPHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDoubleAppDef_oaLPPHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDoubleAppDef_oaLPPHeader_Convert(PyObject* ob,PyParamoaDoubleAppDef_oaLPPHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDoubleAppDef_oaLPPHeader_Check(ob)) {
        result->SetData( (oaDoubleAppDef_oaLPPHeader**) ((PyoaDoubleAppDef_oaLPPHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDoubleAppDef_oaLPPHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(oaDoubleAppDef_oaLPPHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDoubleAppDef_oaLPPHeader* data=*value;
        PyObject* bself = PyoaDoubleAppDef_oaLPPHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaLPPHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDoubleAppDef_oaLPPHeaderObject* self = (PyoaDoubleAppDef_oaLPPHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(oaDoubleAppDef_oaLPPHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDoubleAppDef_oaLPPHeader_Type.tp_alloc(&PyoaDoubleAppDef_oaLPPHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDoubleAppDef_oaLPPHeaderObject* self = (PyoaDoubleAppDef_oaLPPHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_get_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: oaDouble get(const oaLPPHeader* object)\n"
"    Signature: get|simple-oaDouble|cptr-oaLPPHeader,\n"
"    This function returns the value of this double extension.\n"
"    object\n"
"    The object for which to get the value\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaLPPHeader data;
    int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaLPPHeaderObject* self=(PyoaDoubleAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDouble result= (data.DataCall()->get(p1.Data()));
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_getDefault_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaDouble getDefault() const\n"
"    Signature: getDefault|simple-oaDouble|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this double extension.\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaLPPHeader data;
    int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaLPPHeaderObject* self=(PyoaDoubleAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDouble result= (data.DataCall()->getDefault());
        return PyoaDouble_FromoaDouble(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_set_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaLPPHeader,oaDouble)\n"
"    Calls: void set(oaLPPHeader* object,oaDouble value)\n"
"    Signature: set|void-void|ptr-oaLPPHeader,simple-oaDouble,\n"
"    This function sets the value of this double extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to set on the object\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleAppDef_oaLPPHeader data;
    int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDoubleAppDef_oaLPPHeaderObject* self=(PyoaDoubleAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    PyParamoaDouble p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaDouble_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_isNull_doc[] =
"Class: oaDoubleAppDef_oaLPPHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDoubleAppDef_oaLPPHeader data;
    int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDoubleAppDef_oaLPPHeader_assign_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDoubleAppDef_oaLPPHeader data;
  int convert_status=PyoaDoubleAppDef_oaLPPHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDoubleAppDef_oaLPPHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDoubleAppDef_oaLPPHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDoubleAppDef_oaLPPHeader_methodlist[] = {
    {"get",(PyCFunction)oaDoubleAppDef_oaLPPHeader_get,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_get_doc},
    {"getDefault",(PyCFunction)oaDoubleAppDef_oaLPPHeader_getDefault,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_getDefault_doc},
    {"set",(PyCFunction)oaDoubleAppDef_oaLPPHeader_set,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_set_doc},
    {"isNull",(PyCFunction)oaDoubleAppDef_oaLPPHeader_tp_isNull,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_isNull_doc},
    {"assign",(PyCFunction)oaDoubleAppDef_oaLPPHeader_tp_assign,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader\n"
"  The oaDoubleAppDef class implements an application-specific extension for a particular type of data in a database.\n"
"  Once created, a double field is added to each object of the specified dataType. The default value for this extension is DBL_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDoubleAppDef_oaLPPHeader)\n"
"    Calls: (const oaDoubleAppDef_oaLPPHeader&)\n"
"    Signature: oaDoubleAppDef_oaLPPHeader||cref-oaDoubleAppDef_oaLPPHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDoubleAppDef_oaLPPHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDoubleAppDef_oaLPPHeader",
    sizeof(PyoaDoubleAppDef_oaLPPHeaderObject),
    0,
    (destructor)oaDoubleAppDef_oaLPPHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDoubleAppDef_oaLPPHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDoubleAppDef_oaLPPHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDoubleAppDef_oaLPPHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDoubleAppDef_oaLPPHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDoubleAppDef_oaLPPHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_static_find_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDoubleAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::find(p1.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::find(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaLPPHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDoubleAppDef_oaLPPHeader_static_get_doc[] = 
"Class: oaDoubleAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name . You can create a double extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    defValue\n"
"    The default value for this extension\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
"    Calls: oaDoubleAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaDouble defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDoubleAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaDouble,simple-oaBoolean,\n"
"    This function constructs an oaDoubleAppDef object, creating a double extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaDoubleAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaDoubleAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDoubleAppDef_oaLPPHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaDouble p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaDouble,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaDouble p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaDouble_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDoubleAppDef_oaLPPHeaderp result= (oaDoubleAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaDoubleAppDef_oaLPPHeader_FromoaDoubleAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDoubleAppDef_oaLPPHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaDouble)\n"
        "    (oaString,oaDouble,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaDouble)\n"
        "    (oaString,oaAppObjectDef,oaDouble,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDoubleAppDef_oaLPPHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDoubleAppDef_oaLPPHeader_static_find,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDoubleAppDef_oaLPPHeader_static_get,METH_VARARGS,oaDoubleAppDef_oaLPPHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDoubleAppDef_oaLPPHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDoubleAppDef_oaLPPHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDoubleAppDef_oaLPPHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDoubleAppDef_oaLPPHeader",
           (PyObject*)(&PyoaDoubleAppDef_oaLPPHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDoubleAppDef_oaLPPHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDoubleAppDef_oaLPPHeader_Type.tp_dict;
    for(method=oaDoubleAppDef_oaLPPHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

